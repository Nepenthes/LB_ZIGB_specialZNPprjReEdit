///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              09/May/2018  15:27:30
// Copyright 2004-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\Source\zcl_sampledoorlock.c
//    Command line       =  
//        -f C:\Users\NEPENT~1\AppData\Local\Temp\EWA1F1.tmp
//        ("D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\Source\zcl_sampledoorlock.c"
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D
//        xHOLD_AUTO_START -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC
//        -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
//        ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D
//        ZCL_IDENTIFY -D ZCL_DOORLOCK -D ZCL_SCENES -D ZCL_GROUPS -lC
//        "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\CoordinatorEB\List"
//        -lA "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\CoordinatorEB\List"
//        --diag_suppress Pe001,Pa010 -o "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\CoordinatorEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\Source\"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\Source\"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_China.936
//    List file          =  
//        D:\Zigbee\Software\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\CoordinatorEB\List\zcl_sampledoorlock.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_sampledoorlock

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclSampleDoorLock_BasicResetCB::?relay`,0203H
        FUNCTION `??zclSampleDoorLock_DoorLockActuator::?relay`,0203H
        FUNCTION `??zclSampleDoorLock_DoorLockCB::?relay`,0203H
        FUNCTION `??zclSampleDoorLock_DoorLockRspCB::?relay`,0203H
        FUNCTION `??zclSampleDoorLock_EZModeCB::?relay`,0203H
        FUNCTION `??zclSampleDoorLock_HandleKeys::?relay`,0203H
        FUNCTION `??zclSampleDoorLock_IdentifyCB::?relay`,0203H
        FUNCTION `??zclSampleDoorLock_IdentifyQueryRspCB::?relay`,0203H
        PUBLIC `??zclSampleDoorLock_Init::?relay`
        FUNCTION `??zclSampleDoorLock_Init::?relay`,0203H
        PUBLIC `??zclSampleDoorLock_LcdDisplayHelpMode::?relay`
        FUNCTION `??zclSampleDoorLock_LcdDisplayHelpMode::?relay`,0203H
        PUBLIC `??zclSampleDoorLock_LcdDisplayMainMode::?relay`
        FUNCTION `??zclSampleDoorLock_LcdDisplayMainMode::?relay`,0203H
        PUBLIC `??zclSampleDoorLock_LcdDisplayPINMode::?relay`
        FUNCTION `??zclSampleDoorLock_LcdDisplayPINMode::?relay`,0203H
        PUBLIC `??zclSampleDoorLock_LcdDisplayUpdate::?relay`
        FUNCTION `??zclSampleDoorLock_LcdDisplayUpdate::?relay`,0203H
        FUNCTION `??zclSampleDoorLock_ProcessAppMsg::?relay`,0203H
        FUNCTION `??zclSampleDoorLock_ProcessClosuresMsg::?relay`,0203H
        FUNCTION `??zclSampleDoorLock_ProcessFoundationMsg::?rela`,0203H
        FUNCTION `??zclSampleDoorLock_ProcessGroupCmd::?relay`,0203H
        FUNCTION `??zclSampleDoorLock_ProcessIdentifyTimeChange::`,0203H
        FUNCTION `??zclSampleDoorLock_ProcessSceneCmd::?relay`,0203H
        PUBLIC `??zclSampleDoorLock_event_loop::?relay`
        FUNCTION `??zclSampleDoorLock_event_loop::?relay`,0203H
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_bb8
        PUBLIC giDoorLockPINColumnCount
        PUBLIC giDoorLockPINCount
        PUBLIC giDoorLockScreenMode
        PUBLIC iToggleBuff
        PUBLIC sClearLine
        PUBLIC sDeviceName
        PUBLIC sDoorLocked
        PUBLIC sDoorUnlocked
        PUBLIC sInvalidPIN
        PUBLIC sPINLine2
        PUBLIC sPINLine3
        PUBLIC sStorePIN
        PUBLIC sSwDoorLock
        PUBLIC sSwEZMode
        PUBLIC sSwHelp
        PUBLIC sSwPIN
        PUBLIC zclSampleDoorLockSeqNum
        PUBLIC zclSampleDoorLock_ActuatorEnabled
        FUNCTION zclSampleDoorLock_BasicResetCB,021603H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleDoorLock_DoorLockActuator,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclSampleDoorLock_DoorLockCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        FUNCTION zclSampleDoorLock_DoorLockRspCB,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zclSampleDoorLock_DstAddr
        FUNCTION zclSampleDoorLock_EZModeCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        FUNCTION zclSampleDoorLock_HandleKeys,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        FUNCTION zclSampleDoorLock_IdentifyCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleDoorLock_IdentifyQueryRspCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC zclSampleDoorLock_Init
        FUNCTION zclSampleDoorLock_Init,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zclSampleDoorLock_LcdDisplayHelpMode
        FUNCTION zclSampleDoorLock_LcdDisplayHelpMode,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleDoorLock_LcdDisplayMainMode
        FUNCTION zclSampleDoorLock_LcdDisplayMainMode,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 30, STACK
        PUBLIC zclSampleDoorLock_LcdDisplayPINMode
        FUNCTION zclSampleDoorLock_LcdDisplayPINMode,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 30, STACK
        PUBLIC zclSampleDoorLock_LcdDisplayUpdate
        FUNCTION zclSampleDoorLock_LcdDisplayUpdate,021203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleDoorLock_LockState
        PUBLIC zclSampleDoorLock_LockType
        PUBLIC zclSampleDoorLock_NwkState
        PUBLIC zclSampleDoorLock_OnOff
        FUNCTION zclSampleDoorLock_ProcessAppMsg,0a1203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 50, STACK
        FUNCTION zclSampleDoorLock_ProcessClosuresMsg,0a1203H
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 30, STACK
        FUNCTION zclSampleDoorLock_ProcessFoundationMsg,0a1203H
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 29, STACK
        FUNCTION zclSampleDoorLock_ProcessGroupCmd,0a1203H
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 28, STACK
        FUNCTION zclSampleDoorLock_ProcessIdentifyTimeChange,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        FUNCTION zclSampleDoorLock_ProcessSceneCmd,0a1203H
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 88, STACK
        PUBLIC zclSampleDoorLock_RequirePinForRfOperation
        PUBLIC zclSampleDoorLock_SendPinOta
        PUBLIC zclSampleDoorLock_TaskID
        PUBLIC zclSampleDoorLock_event_loop
        FUNCTION zclSampleDoorLock_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalLcdWriteString   SYMBOL "HalLcdWriteString"
`??HalLcdWriteString::?relay` SYMBOL "?relay", HalLcdWriteString
HalLedBlink         SYMBOL "HalLedBlink"
`??HalLedBlink::?relay` SYMBOL "?relay", HalLedBlink
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
MT_SysCommandProcessing SYMBOL "MT_SysCommandProcessing"
`??MT_SysCommandProcessing::?relay` SYMBOL "?relay", MT_SysCommandProcessing
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
`??ZDO_ParseEPListRsp::?relay` SYMBOL "?relay", ZDO_ParseEPListRsp
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
`??ZDP_MgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtPermitJoinReq
_itoa               SYMBOL "_itoa"
`??_itoa::?relay`   SYMBOL "?relay", _itoa
_ltoa               SYMBOL "_ltoa"
`??_ltoa::?relay`   SYMBOL "?relay", _ltoa
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
zclClosures_RegisterDoorLockCmdCallbacks SYMBOL "zclClosures_RegisterDoorLockCmdCallbacks"
`??zclClosures_RegisterDoorLockCmdCallbacks::?re` SYMBOL "?relay", zclClosures_RegisterDoorLockCmdCallbacks
zclClosures_SendDoorLockRequest SYMBOL "zclClosures_SendDoorLockRequest"
`??zclClosures_SendDoorLockRequest::?relay` SYMBOL "?relay", zclClosures_SendDoorLockRequest
zclClosures_SendDoorLockStatusResponse SYMBOL "zclClosures_SendDoorLockStatusResponse"
`??zclClosures_SendDoorLockStatusResponse::?rela` SYMBOL "?relay", zclClosures_SendDoorLockStatusResponse
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclGeneral_SendAddGroupRequest SYMBOL "zclGeneral_SendAddGroupRequest"
`??zclGeneral_SendAddGroupRequest::?relay` SYMBOL "?relay", zclGeneral_SendAddGroupRequest
zclGeneral_SendAddSceneRequest SYMBOL "zclGeneral_SendAddSceneRequest"
`??zclGeneral_SendAddSceneRequest::?relay` SYMBOL "?relay", zclGeneral_SendAddSceneRequest
zclGeneral_SendGroupGetMembershipRequest SYMBOL "zclGeneral_SendGroupGetMembershipRequest"
`??zclGeneral_SendGroupGetMembershipRequest::?re` SYMBOL "?relay", zclGeneral_SendGroupGetMembershipRequest
zclGeneral_SendGroupRequest SYMBOL "zclGeneral_SendGroupRequest"
`??zclGeneral_SendGroupRequest::?relay` SYMBOL "?relay", zclGeneral_SendGroupRequest
zclGeneral_SendSceneRequest SYMBOL "zclGeneral_SendSceneRequest"
`??zclGeneral_SendSceneRequest::?relay` SYMBOL "?relay", zclGeneral_SendSceneRequest
zclHA_Init          SYMBOL "zclHA_Init"
`??zclHA_Init::?relay` SYMBOL "?relay", zclHA_Init
zclHA_LcdStatusLine1 SYMBOL "zclHA_LcdStatusLine1"
`??zclHA_LcdStatusLine1::?relay` SYMBOL "?relay", zclHA_LcdStatusLine1
zclParseHdr         SYMBOL "zclParseHdr"
`??zclParseHdr::?relay` SYMBOL "?relay", zclParseHdr
zclParseInConfigReportCmd SYMBOL "zclParseInConfigReportCmd"
`??zclParseInConfigReportCmd::?relay` SYMBOL "?relay", zclParseInConfigReportCmd
zclParseInReadCmd   SYMBOL "zclParseInReadCmd"
`??zclParseInReadCmd::?relay` SYMBOL "?relay", zclParseInReadCmd
zclParseInReadReportCfgCmd SYMBOL "zclParseInReadReportCfgCmd"
`??zclParseInReadReportCfgCmd::?relay` SYMBOL "?relay", zclParseInReadReportCfgCmd
zclParseInReportCmd SYMBOL "zclParseInReportCmd"
`??zclParseInReportCmd::?relay` SYMBOL "?relay", zclParseInReportCmd
zclParseInWriteCmd  SYMBOL "zclParseInWriteCmd"
`??zclParseInWriteCmd::?relay` SYMBOL "?relay", zclParseInWriteCmd
zcl_EZModeAction    SYMBOL "zcl_EZModeAction"
`??zcl_EZModeAction::?relay` SYMBOL "?relay", zcl_EZModeAction
zcl_InvokeEZMode    SYMBOL "zcl_InvokeEZMode"
`??zcl_InvokeEZMode::?relay` SYMBOL "?relay", zcl_InvokeEZMode
zcl_RegisterEZMode  SYMBOL "zcl_RegisterEZMode"
`??zcl_RegisterEZMode::?relay` SYMBOL "?relay", zcl_RegisterEZMode
zcl_SendCommand     SYMBOL "zcl_SendCommand"
`??zcl_SendCommand::?relay` SYMBOL "?relay", zcl_SendCommand
zcl_SendConfigReportCmd SYMBOL "zcl_SendConfigReportCmd"
`??zcl_SendConfigReportCmd::?relay` SYMBOL "?relay", zcl_SendConfigReportCmd
zcl_SendRead        SYMBOL "zcl_SendRead"
`??zcl_SendRead::?relay` SYMBOL "?relay", zcl_SendRead
zcl_SendReadReportCfgCmd SYMBOL "zcl_SendReadReportCfgCmd"
`??zcl_SendReadReportCfgCmd::?relay` SYMBOL "?relay", zcl_SendReadReportCfgCmd
zcl_SendReportCmd   SYMBOL "zcl_SendReportCmd"
`??zcl_SendReportCmd::?relay` SYMBOL "?relay", zcl_SendReportCmd
zcl_SendWriteRequest SYMBOL "zcl_SendWriteRequest"
`??zcl_SendWriteRequest::?relay` SYMBOL "?relay", zcl_SendWriteRequest
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
zclSampleDoorLock_Init SYMBOL "zclSampleDoorLock_Init"
`??zclSampleDoorLock_Init::?relay` SYMBOL "?relay", zclSampleDoorLock_Init
zclSampleDoorLock_LcdDisplayHelpMode SYMBOL "zclSampleDoorLock_LcdDisplayHelpMode"
`??zclSampleDoorLock_LcdDisplayHelpMode::?relay` SYMBOL "?relay", zclSampleDoorLock_LcdDisplayHelpMode
zclSampleDoorLock_LcdDisplayMainMode SYMBOL "zclSampleDoorLock_LcdDisplayMainMode"
`??zclSampleDoorLock_LcdDisplayMainMode::?relay` SYMBOL "?relay", zclSampleDoorLock_LcdDisplayMainMode
zclSampleDoorLock_LcdDisplayPINMode SYMBOL "zclSampleDoorLock_LcdDisplayPINMode"
`??zclSampleDoorLock_LcdDisplayPINMode::?relay` SYMBOL "?relay", zclSampleDoorLock_LcdDisplayPINMode
zclSampleDoorLock_LcdDisplayUpdate SYMBOL "zclSampleDoorLock_LcdDisplayUpdate"
`??zclSampleDoorLock_LcdDisplayUpdate::?relay` SYMBOL "?relay", zclSampleDoorLock_LcdDisplayUpdate
zclSampleDoorLock_event_loop SYMBOL "zclSampleDoorLock_event_loop"
`??zclSampleDoorLock_event_loop::?relay` SYMBOL "?relay", zclSampleDoorLock_event_loop

        EXTERN `??HalLcdWriteString::?relay`
        FUNCTION `??HalLcdWriteString::?relay`,00H
        EXTERN `??HalLedBlink::?relay`
        FUNCTION `??HalLedBlink::?relay`,00H
        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??MT_SysCommandProcessing::?relay`
        FUNCTION `??MT_SysCommandProcessing::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??ZDO_ParseEPListRsp::?relay`
        FUNCTION `??ZDO_ParseEPListRsp::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDP_MgmtPermitJoinReq::?relay`
        FUNCTION `??ZDP_MgmtPermitJoinReq::?relay`,00H
        EXTERN `??_itoa::?relay`
        FUNCTION `??_itoa::?relay`,00H
        EXTERN `??_ltoa::?relay`
        FUNCTION `??_ltoa::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??zclClosures_RegisterDoorLockCmdCallbacks::?re`
        FUNCTION `??zclClosures_RegisterDoorLockCmdCallbacks::?re`,00H
        EXTERN `??zclClosures_SendDoorLockRequest::?relay`
        FUNCTION `??zclClosures_SendDoorLockRequest::?relay`,00H
        EXTERN `??zclClosures_SendDoorLockStatusResponse::?rela`
        FUNCTION `??zclClosures_SendDoorLockStatusResponse::?rela`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zclGeneral_SendAddGroupRequest::?relay`
        FUNCTION `??zclGeneral_SendAddGroupRequest::?relay`,00H
        EXTERN `??zclGeneral_SendAddSceneRequest::?relay`
        FUNCTION `??zclGeneral_SendAddSceneRequest::?relay`,00H
        EXTERN `??zclGeneral_SendGroupGetMembershipRequest::?re`
        FUNCTION `??zclGeneral_SendGroupGetMembershipRequest::?re`,00H
        EXTERN `??zclGeneral_SendGroupRequest::?relay`
        FUNCTION `??zclGeneral_SendGroupRequest::?relay`,00H
        EXTERN `??zclGeneral_SendSceneRequest::?relay`
        FUNCTION `??zclGeneral_SendSceneRequest::?relay`,00H
        EXTERN `??zclHA_Init::?relay`
        FUNCTION `??zclHA_Init::?relay`,00H
        EXTERN `??zclHA_LcdStatusLine1::?relay`
        FUNCTION `??zclHA_LcdStatusLine1::?relay`,00H
        EXTERN `??zclParseHdr::?relay`
        FUNCTION `??zclParseHdr::?relay`,00H
        EXTERN `??zclParseInConfigReportCmd::?relay`
        FUNCTION `??zclParseInConfigReportCmd::?relay`,00H
        EXTERN `??zclParseInReadCmd::?relay`
        FUNCTION `??zclParseInReadCmd::?relay`,00H
        EXTERN `??zclParseInReadReportCfgCmd::?relay`
        FUNCTION `??zclParseInReadReportCfgCmd::?relay`,00H
        EXTERN `??zclParseInReportCmd::?relay`
        FUNCTION `??zclParseInReportCmd::?relay`,00H
        EXTERN `??zclParseInWriteCmd::?relay`
        FUNCTION `??zclParseInWriteCmd::?relay`,00H
        EXTERN `??zcl_EZModeAction::?relay`
        FUNCTION `??zcl_EZModeAction::?relay`,00H
        EXTERN `??zcl_InvokeEZMode::?relay`
        FUNCTION `??zcl_InvokeEZMode::?relay`,00H
        EXTERN `??zcl_RegisterEZMode::?relay`
        FUNCTION `??zcl_RegisterEZMode::?relay`,00H
        EXTERN `??zcl_SendCommand::?relay`
        FUNCTION `??zcl_SendCommand::?relay`,00H
        EXTERN `??zcl_SendConfigReportCmd::?relay`
        FUNCTION `??zcl_SendConfigReportCmd::?relay`,00H
        EXTERN `??zcl_SendRead::?relay`
        FUNCTION `??zcl_SendRead::?relay`,00H
        EXTERN `??zcl_SendReadReportCfgCmd::?relay`
        FUNCTION `??zcl_SendReadReportCfgCmd::?relay`,00H
        EXTERN `??zcl_SendReportCmd::?relay`
        FUNCTION `??zcl_SendReportCmd::?relay`,00H
        EXTERN `??zcl_SendWriteRequest::?relay`
        FUNCTION `??zcl_SendWriteRequest::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_SysCommandProcessing
        FUNCTION MT_SysCommandProcessing,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _itoa
        FUNCTION _itoa,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _ltoa
        FUNCTION _ltoa,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 80, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclClosures_RegisterDoorLockCmdCallbacks
        FUNCTION zclClosures_RegisterDoorLockCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclClosures_SendDoorLockRequest
        FUNCTION zclClosures_SendDoorLockRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclClosures_SendDoorLockStatusResponse
        FUNCTION zclClosures_SendDoorLockStatusResponse,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_SendAddGroupRequest
        FUNCTION zclGeneral_SendAddGroupRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_SendAddSceneRequest
        FUNCTION zclGeneral_SendAddSceneRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 80, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_SendGroupGetMembershipRequest
        FUNCTION zclGeneral_SendGroupGetMembershipRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_SendGroupRequest
        FUNCTION zclGeneral_SendGroupRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_SendSceneRequest
        FUNCTION zclGeneral_SendSceneRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_Init
        FUNCTION zclHA_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_LcdStatusLine1
        FUNCTION zclHA_LcdStatusLine1,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclParseHdr
        FUNCTION zclParseHdr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclParseInConfigReportCmd
        FUNCTION zclParseInConfigReportCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclParseInReadCmd
        FUNCTION zclParseInReadCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclParseInReadReportCfgCmd
        FUNCTION zclParseInReadReportCfgCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclParseInReportCmd
        FUNCTION zclParseInReportCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclParseInWriteCmd
        FUNCTION zclParseInWriteCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleDoorLock_Attrs
        EXTERN zclSampleDoorLock_IdentifyTime
        EXTERN zclSampleDoorLock_SimpleDesc
        EXTERN zcl_EZModeAction
        FUNCTION zcl_EZModeAction,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_InvokeEZMode
        FUNCTION zcl_InvokeEZMode,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_RegisterEZMode
        FUNCTION zcl_RegisterEZMode,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 88, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendConfigReportCmd
        FUNCTION zcl_SendConfigReportCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendRead
        FUNCTION zcl_SendRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendReadReportCfgCmd
        FUNCTION zcl_SendReadReportCfgCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendReportCmd
        FUNCTION zcl_SendReportCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendWriteRequest
        FUNCTION zcl_SendWriteRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\Zigbee\Software\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\Source\zcl_sampledoorlock.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_sampledoorlock.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6 
//    7   Description:    Zigbee Cluster Library - sample device application.
//    8 
//    9 
//   10   Copyright 2013-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42   This device is a door lock.
//   43 
//   44   SCREEN MODES
//   45   ----------------------------------------
//   46   Main:
//   47     - SW1: Toggle door lock
//   48     - SW2: Invoke EZMode
//   49     - SW3: Go to Master PIN screen
//   50     - SW4: Enable/Disable Permit Join
//   51     - SW5: Go to Help screen
//   52 
//   53   PIN:
//   54     - SW1: Increase PIN number
//   55     - SW3: Decrease PIN number
//   56     - SW5: Enter PIN number
//   57   ----------------------------------------
//   58 *********************************************************************/
//   59 
//   60 /*********************************************************************
//   61  * INCLUDES
//   62  */
//   63 #include "ZComDef.h"
//   64 #include "OSAL.h"
//   65 #include "AF.h"
//   66 #include "ZDApp.h"
//   67 #include "ZDObject.h"
//   68 #include "MT_APP.h"
//   69 #include "OSAL_Nv.h"
//   70 #include "MT_SYS.h"
//   71 
//   72 #include "zcl.h"
//   73 #include "zcl_general.h"
//   74 #include "zcl_ha.h"
//   75 #include "zcl_ezmode.h"
//   76 #include "zcl_closures.h"
//   77 
//   78 #include "zcl_sampledoorlock.h"
//   79 
//   80 #include "onboard.h"
//   81 
//   82 /* HAL */
//   83 #include "hal_lcd.h"
//   84 #include "hal_led.h"
//   85 #include "hal_key.h"
//   86 
//   87 
//   88 /*********************************************************************
//   89  * MACROS
//   90  */
//   91 
//   92 /*********************************************************************
//   93  * CONSTANTS
//   94  */
//   95 /*********************************************************************
//   96  * TYPEDEFS
//   97  */
//   98 
//   99 /*********************************************************************
//  100  * GLOBAL VARIABLES
//  101  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  102 byte zclSampleDoorLock_TaskID;
zclSampleDoorLock_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  103 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  104 uint8 zclSampleDoorLockSeqNum;
zclSampleDoorLockSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  105 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  106 uint8  zclSampleDoorLock_OnOff;
zclSampleDoorLock_OnOff:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  107 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  108 uint8 zclSampleDoorLock_LockState;
zclSampleDoorLock_LockState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  109 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  110 uint8 zclSampleDoorLock_LockType = CLOSURES_LOCK_TYPE_DEADBOLT;
zclSampleDoorLock_LockType:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  111 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  112 bool zclSampleDoorLock_ActuatorEnabled = TRUE;
zclSampleDoorLock_ActuatorEnabled:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclSampleDoorLock_ActuatorEn`
        REQUIRE __INIT_XDATA_I
//  113 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  114 bool zclSampleDoorLock_SendPinOta = FALSE;
zclSampleDoorLock_SendPinOta:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  115 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  116 bool zclSampleDoorLock_RequirePinForRfOperation = TRUE;
zclSampleDoorLock_RequirePinForRfOperation:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclSampleDoorLock_RequirePin`
        REQUIRE __INIT_XDATA_I
//  117 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  118 static byte gPermitDuration = 0;
gPermitDuration:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  119 
//  120 /*********************************************************************
//  121  * GLOBAL FUNCTIONS
//  122  */
//  123 
//  124 /*********************************************************************
//  125  * LOCAL VARIABLES
//  126  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  127 afAddrType_t zclSampleDoorLock_DstAddr;
zclSampleDoorLock_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  128 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  129 uint8 iToggleBuff = LIGHT_OFF;
iToggleBuff:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  130 
//  131 #ifdef ZCL_EZMODE
//  132 static void zclSampleDoorLock_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
//  133 static void zclSampleDoorLock_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
//  134 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  135 static const zclEZMode_RegisterData_t zclSampleDoorLock_RegisterEZModeData =
zclSampleDoorLock_RegisterEZModeData:
        DATA16
        DW zclSampleDoorLock_TaskID
        DW 4
        DW 8
        DW zclSampleDoorLockSeqNum
        DW `??zclSampleDoorLock_EZModeCB::?relay`
//  136 {
//  137   &zclSampleDoorLock_TaskID,
//  138   SAMPLEDOORLOCK_EZMODE_NEXTSTATE_EVT,
//  139   SAMPLEDOORLOCK_EZMODE_TIMEOUT_EVT,
//  140   &zclSampleDoorLockSeqNum,
//  141   zclSampleDoorLock_EZModeCB
//  142 };
//  143 
//  144 // NOT ZCL_EZMODE, use EndDeviceBind
//  145 #else
//  146 
//  147 static cId_t bindingInClusters[] =
//  148 {
//  149   ZCL_CLUSTER_ID_GEN_ON_OFF,
//  150   ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK
//  151 };
//  152 #define ZCLSAMPLEDOORLOCK_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
//  153 #endif
//  154 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  155 devStates_t zclSampleDoorLock_NwkState = DEV_INIT;
zclSampleDoorLock_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclSampleDoorLock_NwkState>`
        REQUIRE __INIT_XDATA_I
//  156 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  157 uint8 giDoorLockScreenMode = DOORLOCK_MAINMODE;   // display main screen mode first
giDoorLockScreenMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  158 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  159 static uint8 aProcessCmd[] = { 1, 0, 0, 0 }; // used for reset command, { length + cmd0 + cmd1 + data }
aProcessCmd:
        DATA32
        DS 4
        REQUIRE `?<Initializer for aProcessCmd>`
        REQUIRE __INIT_XDATA_I
//  160 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  161 uint8 giDoorLockPINCount = 0;
giDoorLockPINCount:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  162 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  163 uint8 giDoorLockPINColumnCount = 0;
giDoorLockPINColumnCount:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  164 
//  165 // Master PIN code for DoorLock

        RSEG XDATA_I:XDATA:NOROOT(0)
//  166 static uint8 aiDoorLockMasterPINCode[] = {4,0x31,0x32,0x33,0x34};
aiDoorLockMasterPINCode:
        DATA8
        DS 5
        REQUIRE `?<Initializer for aiDoorLockMasterPINCode>`
        REQUIRE __INIT_XDATA_I
//  167 
//  168 // Test Endpoint to allow SYS_APP_MSGs

        RSEG XDATA_I:XDATA:NOROOT(0)
//  169 static endPointDesc_t sampleDoorLock_TestEp =
sampleDoorLock_TestEp:
        DATA8
        DS 6
        REQUIRE `?<Initializer for sampleDoorLock_TestEp>`
        REQUIRE __INIT_XDATA_I
//  170 {
//  171   20,                                 // Test endpoint
//  172   &zclSampleDoorLock_TaskID,
//  173   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  174   (afNetworkLatencyReq_t)0            // No Network Latency req
//  175 };
//  176 
//  177 /*********************************************************************
//  178  * LOCAL FUNCTIONS
//  179  */
//  180 static void zclSampleDoorLock_HandleKeys( byte shift, byte keys );
//  181 static void zclSampleDoorLock_BasicResetCB( void );
//  182 static void zclSampleDoorLock_IdentifyCB( zclIdentify_t *pCmd );
//  183 static void zclSampleDoorLock_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
//  184 //static void zclSampleDoorLock_OnOffCB( uint8 cmd );
//  185 static void zclSampleDoorLock_ProcessIdentifyTimeChange( void );
//  186 
//  187 void zclSampleDoorLock_LcdDisplayUpdate(void);
//  188 void zclSampleDoorLock_LcdDisplayMainMode(void);
//  189 void zclSampleDoorLock_LcdDisplayPINMode(void);
//  190 void zclSampleDoorLock_LcdDisplayHelpMode(void);
//  191 
//  192 static void zclSampleDoorLock_ProcessAppMsg( uint8 srcEP, uint8 len, uint8 *msg );
//  193 static void zclSampleDoorLock_ProcessFoundationMsg( afAddrType_t *dstAddr, uint16 clusterID,
//  194                                                     zclFrameHdr_t *hdr, zclParseCmd_t *pParseCmd );
//  195 static void zclSampleDoorLock_ProcessGeneralMsg( uint8 srcEP, afAddrType_t *dstAddr,
//  196                                     uint16 clusterID, zclFrameHdr_t *hdr, uint8 len, uint8 *data );
//  197 static void zclSampleDoorLock_ProcessGroupCmd( uint8 srcEP, afAddrType_t *dstAddr,
//  198                                   uint16 clusterID, zclFrameHdr_t *hdr, uint8 len, uint8 *data );
//  199 static void zclSampleDoorLock_ProcessSceneCmd( uint8 srcEP, afAddrType_t *dstAddr,
//  200                                 uint16 clusterID, zclFrameHdr_t *hdr, uint8 len, uint8 *data );
//  201 static void zclSampleDoorLock_ProcessClosuresMsg( uint8 srcEP, afAddrType_t *dstAddr,
//  202                                     uint16 clusterID, zclFrameHdr_t *hdr, uint8 len, uint8 *data );
//  203 ZStatus_t zclSampleDoorLock_DoorLockToggleDoorCB( zclDoorLock_t *pCmd );
//  204 
//  205 // Functions to process ZCL Foundation incoming Command/Response messages
//  206 static void zclSampleDoorLock_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  207 #ifdef ZCL_READ
//  208 static uint8 zclSampleDoorLock_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  209 #endif
//  210 #ifdef ZCL_WRITE
//  211 static uint8 zclSampleDoorLock_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  212 #endif
//  213 static uint8 zclSampleDoorLock_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  214 
//  215 static ZStatus_t zclSampleDoorLock_DoorLockCB ( zclIncoming_t *pInMsg, zclDoorLock_t *pInCmd );
//  216 static ZStatus_t zclSampleDoorLock_DoorLockRspCB ( zclIncoming_t *pInMsg, uint8 status );
//  217 ZStatus_t zclSampleDoorLock_DoorLockActuator ( uint8 newDoorLockState );
//  218 
//  219 /*********************************************************************
//  220  * STATUS STRINGS
//  221  */
//  222 #ifdef LCD_SUPPORTED

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  223 const char sClearLine[]    = " ";
sClearLine:
        DB " "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  224 const char sDeviceName[]   = "    DoorLock";
sDeviceName:
        DB "    DoorLock"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  225 const char sSwDoorLock[]   = "SW1: Lock/Unlock";
sSwDoorLock:
        DB "SW1: Lock/Unlock"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  226 const char sSwEZMode[]     = "SW2: EZ-Mode";
sSwEZMode:
        DB "SW2: EZ-Mode"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  227 const char sSwPIN[]        = "SW3: Master PIN";
sSwPIN:
        DB "SW3: Master PIN"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  228 const char sPINLine2[]     = "SW1:+";
sPINLine2:
        DB "SW1:+"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  229 const char sPINLine3[]     = "SW3:-  SW5:Enter";
sPINLine3:
        DB "SW3:-  SW5:Enter"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  230 const char sSwHelp[]       = "SW5: Help";
sSwHelp:
        DB "SW5: Help"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  231 const char sStorePIN[]     = "   PIN SAVED";
sStorePIN:
        DB "   PIN SAVED"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  232 const char sDoorLocked[]   = "  Door Locked";
sDoorLocked:
        DB "  Door Locked"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  233 const char sDoorUnlocked[] = "  Door Unlocked";
sDoorUnlocked:
        DB "  Door Unlocked"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  234 const char sInvalidPIN[]   = "  Invalid PIN";
sInvalidPIN:
        DB "  Invalid PIN"
//  235 #endif
//  236 
//  237 /*********************************************************************
//  238  * ZCL General Profile Callback table
//  239  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  240 static zclGeneral_AppCallbacks_t zclSampleDoorLock_CmdCallbacks =
zclSampleDoorLock_CmdCallbacks:
        DATA8
        DS 32
        REQUIRE `?<Initializer for zclSampleDoorLock_CmdCallbac`
        REQUIRE __INIT_XDATA_I
//  241 {
//  242   zclSampleDoorLock_BasicResetCB,         // Basic Cluster Reset command
//  243   zclSampleDoorLock_IdentifyCB,           // Identify command
//  244 #ifdef ZCL_EZMODE
//  245   NULL,                                   // Identify EZ-Mode Invoke command
//  246   NULL,                                   // Identify Update Commission State command
//  247 #endif
//  248   NULL,                                   // Identify Trigger Effect command
//  249   zclSampleDoorLock_IdentifyQueryRspCB,   // Identify Query Response command
//  250   NULL,                                   // On/Off cluster commands
//  251   NULL,                                   // On/Off cluster enhanced command Off with Effect
//  252   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  253   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  254 #ifdef ZCL_LEVEL_CTRL
//  255   NULL,                                   // Level Control Move to Level command
//  256   NULL,                                   // Level Control Move command
//  257   NULL,                                   // Level Control Step command
//  258   NULL,                                   // Level Control Stop command
//  259 #endif
//  260 #ifdef ZCL_GROUPS
//  261   NULL,                                   // Group Response commands
//  262 #endif
//  263 #ifdef ZCL_SCENES
//  264   NULL,                                   // Scene Store Request command
//  265   NULL,                                   // Scene Recall Request command
//  266   NULL,                                   // Scene Response command
//  267 #endif
//  268 #if ZCL_ALARMS
//  269   NULL,                                   // Alarm (Response) commands
//  270 #endif
//  271 #ifdef SE_UK_EXT
//  272   NULL,                                   // Get Event Log command
//  273   NULL,                                   // Publish Event Log command
//  274 #endif
//  275   NULL,                                   // RSSI Location command
//  276   NULL                                    // RSSI Location Response command
//  277 };
//  278 
//  279 /*********************************************************************
//  280  * ZCL Closure cluster Callback table
//  281  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  282 static zclClosures_DoorLockAppCallbacks_t zclSampleDoorLock_DoorLockCmdCallbacks =
zclSampleDoorLock_DoorLockCmdCallbacks:
        DATA8
        DS 100
        REQUIRE `?<Initializer for zclSampleDoorLock_DoorLockCm`
        REQUIRE __INIT_XDATA_I
//  283 {
//  284   zclSampleDoorLock_DoorLockCB,                           // DoorLock cluster command
//  285   zclSampleDoorLock_DoorLockRspCB,                        // DoorLock Response
//  286   NULL,
//  287   NULL,
//  288   NULL,
//  289   NULL,
//  290   NULL,
//  291   NULL,
//  292   NULL,
//  293   NULL,
//  294   NULL,
//  295   NULL,
//  296   NULL,
//  297   NULL,
//  298   NULL,
//  299   NULL,
//  300   NULL,
//  301   NULL,
//  302   NULL,
//  303   NULL,
//  304   NULL,
//  305   NULL,
//  306   NULL,
//  307   NULL,
//  308   NULL,
//  309   NULL,
//  310   NULL,
//  311   NULL,
//  312   NULL,
//  313   NULL,
//  314   NULL,
//  315   NULL,
//  316   NULL,
//  317   NULL,
//  318   NULL,
//  319   NULL,
//  320   NULL,
//  321   NULL,
//  322   NULL,
//  323   NULL,
//  324   NULL,
//  325   NULL,
//  326   NULL,
//  327   NULL,
//  328   NULL,
//  329   NULL,
//  330   NULL,
//  331   NULL,
//  332   NULL,
//  333   NULL
//  334 };
//  335 
//  336 /*********************************************************************
//  337  * @fn          zclSampleDoorLock_Init
//  338  *
//  339  * @brief       Initialization function for the zclGeneral layer.
//  340  *
//  341  * @param       none
//  342  *
//  343  * @return      none
//  344  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  345 void zclSampleDoorLock_Init( byte task_id )
zclSampleDoorLock_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclSampleDoorLock_Init
        CODE
//  346 {
        FUNCALL zclSampleDoorLock_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_Init, zclClosures_RegisterDoorLockCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_Init, zcl_RegisterEZMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_Init, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_Init, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  347   zclSampleDoorLock_TaskID = task_id;
        MOV       DPTR,#zclSampleDoorLock_TaskID
        MOVX      @DPTR,A
//  348 
//  349   // Set destination address to indirect
//  350   zclSampleDoorLock_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV       DPTR,#zclSampleDoorLock_DstAddr + 8
        CLR       A
        MOVX      @DPTR,A
//  351   zclSampleDoorLock_DstAddr.endPoint = 0;
        INC       DPTR
        MOVX      @DPTR,A
//  352   zclSampleDoorLock_DstAddr.addr.shortAddr = 0;
        MOV       DPTR,#zclSampleDoorLock_DstAddr
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  353 
//  354   // This app is part of the Home Automation Profile
//  355   zclHA_Init( &zclSampleDoorLock_SimpleDesc );
        ; Setup parameters for call to function zclHA_Init
        MOV       R2,#zclSampleDoorLock_SimpleDesc & 0xff
        MOV       R3,#(zclSampleDoorLock_SimpleDesc >> 8) & 0xff
        LCALL     `??zclHA_Init::?relay`; Banked call to: zclHA_Init
//  356 
//  357   // Register the ZCL General Cluster Library callback functions
//  358   zclGeneral_RegisterCmdCallbacks( SAMPLEDOORLOCK_ENDPOINT, &zclSampleDoorLock_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV       R2,#zclSampleDoorLock_CmdCallbacks & 0xff
        MOV       R3,#(zclSampleDoorLock_CmdCallbacks >> 8) & 0xff
        MOV       R1,#0x8
        LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  359 
//  360   // Register the application's attribute list
//  361   zcl_registerAttrList( SAMPLEDOORLOCK_ENDPOINT, SAMPLEDOORLOCK_MAX_ATTRIBUTES, zclSampleDoorLock_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV       R4,#zclSampleDoorLock_Attrs & 0xff
        MOV       R5,#(zclSampleDoorLock_Attrs >> 8) & 0xff
        MOV       R2,#0x16
        MOV       R1,#0x8
        LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  362 
//  363   // Register the Application to receive the unprocessed Foundation command/response messages
//  364   zcl_registerForMsg( zclSampleDoorLock_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV       DPTR,#zclSampleDoorLock_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  365 
//  366   // Register for all key events - This app will handle all key events
//  367   RegisterForKeys( zclSampleDoorLock_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV       DPTR,#zclSampleDoorLock_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  368 
//  369   //Register the ZCL DoorLock Cluster Library callback function
//  370   zclClosures_RegisterDoorLockCmdCallbacks( SAMPLEDOORLOCK_ENDPOINT, &zclSampleDoorLock_DoorLockCmdCallbacks );
        ; Setup parameters for call to function zclClosures_RegisterDoorLockCmdCallbacks
        MOV       R2,#zclSampleDoorLock_DoorLockCmdCallbacks & 0xff
        MOV       R3,#(zclSampleDoorLock_DoorLockCmdCallbacks >> 8) & 0xff
        MOV       R1,#0x8
        LCALL     `??zclClosures_RegisterDoorLockCmdCallbacks::?re`; Banked call to: zclClosures_RegisterDoorLockCmdCallbacks
//  371 
//  372   // Register for a test endpoint
//  373   afRegister( &sampleDoorLock_TestEp );
        ; Setup parameters for call to function afRegister
        MOV       R2,#sampleDoorLock_TestEp & 0xff
        MOV       R3,#(sampleDoorLock_TestEp >> 8) & 0xff
        LCALL     `??afRegister::?relay`; Banked call to: afRegister
//  374 
//  375 #ifdef ZCL_EZMODE
//  376   // Register EZ-Mode
//  377   zcl_RegisterEZMode( &zclSampleDoorLock_RegisterEZModeData );
        ; Setup parameters for call to function zcl_RegisterEZMode
        MOV       R2,#zclSampleDoorLock_RegisterEZModeData & 0xff
        MOV       R3,#(zclSampleDoorLock_RegisterEZModeData >> 8) & 0xff
        LCALL     `??zcl_RegisterEZMode::?relay`; Banked call to: zcl_RegisterEZMode
//  378 
//  379   // Register with the ZDO to receive Match Descriptor Responses
//  380   ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       R2,#0x6
        MOV       R3,#-0x80
        MOV       A,R6
        MOV       R1,A
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
//  381 #endif
//  382 
//  383 #ifdef LCD_SUPPORTED
//  384   // display the device name
//  385   HalLcdWriteString( (char *)sDeviceName, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x3
        MOV       R2,#sDeviceName & 0xff
        MOV       R3,#(sDeviceName >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  386 #endif
//  387 
//  388   // initialize NVM for storing PIN information
//  389   if ( SUCCESS == osal_nv_item_init( ZCD_NV_APS_DOORLOCK_PIN, 5, aiDoorLockMasterPINCode ) )
        ; Setup parameters for call to function osal_nv_item_init
        MOV       ?V0,#aiDoorLockMasterPINCode & 0xff
        MOV       ?V1,#(aiDoorLockMasterPINCode >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R4,#0x5
        MOV       R5,#0x0
        MOV       R2,#0x2
        MOV       R3,#0x4
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       A,R1
        JNZ       ??zclSampleDoorLock_Init_0
//  390     // use NVM PIN number in APP
//  391     osal_nv_read( ZCD_NV_APS_DOORLOCK_PIN, 0, 5, aiDoorLockMasterPINCode );
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x5
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x2
        MOV       R3,#0x4
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  392 }
??zclSampleDoorLock_Init_0:
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  393 
//  394 /*********************************************************************
//  395  * @fn          zclSample_event_loop
//  396  *
//  397  * @brief       Event Loop Processor for zclGeneral.
//  398  *
//  399  * @param       none
//  400  *
//  401  * @return      none
//  402  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  403 uint16 zclSampleDoorLock_event_loop( uint8 task_id, uint16 events )
zclSampleDoorLock_event_loop:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zclSampleDoorLock_event_loop
        CODE
//  404 {
        FUNCALL zclSampleDoorLock_event_loop, zclSampleDoorLock_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_event_loop, zclSampleDoorLock_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_event_loop, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_event_loop, zclSampleDoorLock_ProcessAppMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_event_loop, zclSampleDoorLock_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_event_loop, zclSampleDoorLock_LcdDisplayMainMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_event_loop, zcl_EZModeAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  405   afIncomingMSGPacket_t *MSGpkt;
//  406 
//  407   (void)task_id;  // Intentionally unreferenced parameter
//  408 
//  409   if ( events & SYS_EVENT_MSG )
        ANL       A,#0x80
        JNZ       ??zclSampleDoorLock_event_loop_0
//  410   {
//  411     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleDoorLock_TaskID )) )
//  412     {
//  413       switch ( MSGpkt->hdr.event )
//  414       {
//  415 #ifdef ZCL_EZMODE
//  416         case ZDO_CB_MSG:
//  417           zclSampleDoorLock_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  418           break;
//  419 #endif
//  420 
//  421         case MT_SYS_APP_MSG:
//  422           // Message received from MT
//  423           zclSampleDoorLock_ProcessAppMsg( ((mtSysAppMsg_t *)MSGpkt)->endpoint,
//  424                                           ((mtSysAppMsg_t *)MSGpkt)->appDataLen,
//  425                                           ((mtSysAppMsg_t *)MSGpkt)->appData );
//  426           break;
//  427 
//  428         case ZCL_INCOMING_MSG:
//  429           // Incoming ZCL Foundation command/response messages
//  430           zclSampleDoorLock_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  431           break;
//  432 
//  433         case KEY_CHANGE:
//  434           zclSampleDoorLock_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  435           break;
//  436 
//  437         case ZDO_STATE_CHANGE:
//  438           zclSampleDoorLock_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  439 
//  440           // now on the network
//  441           if ( (zclSampleDoorLock_NwkState == DEV_ZB_COORD) ||
//  442                (zclSampleDoorLock_NwkState == DEV_ROUTER)   ||
//  443                (zclSampleDoorLock_NwkState == DEV_END_DEVICE) )
//  444           {
//  445 #ifndef HOLD_AUTO_START
//  446             giDoorLockScreenMode = DOORLOCK_MAINMODE;
//  447             zclSampleDoorLock_LcdDisplayUpdate();
//  448 #endif
//  449 #ifdef ZCL_EZMODE
//  450             zcl_EZModeAction( EZMODE_ACTION_NETWORK_STARTED, NULL );
//  451 #endif
//  452           }
//  453           break;
//  454 
//  455         default:
//  456           break;
//  457       }
//  458 
//  459       // Release the memory
//  460       osal_msg_deallocate( (uint8 *)MSGpkt );
//  461     }
//  462 
//  463     // return unprocessed events
//  464     return (events ^ SYS_EVENT_MSG);
//  465   }
//  466 
//  467   if ( events & SAMPLEDOORLOCK_IDENTIFY_TIMEOUT_EVT )
        MOV       A,R6
        MOV       C,0xE0 /* A   */.0
        JC        $+5
        LJMP      ??zclSampleDoorLock_event_loop_1 & 0xFFFF
//  468   {
//  469     if ( zclSampleDoorLock_IdentifyTime > 0 )
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_55:
        JZ        ??zclSampleDoorLock_event_loop_2
//  470       zclSampleDoorLock_IdentifyTime--;
        MOV       DPTR,#zclSampleDoorLock_IdentifyTime
        MOVX      A,@DPTR
        ADD       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#-0x1
        MOVX      @DPTR,A
//  471     zclSampleDoorLock_ProcessIdentifyTimeChange();
??zclSampleDoorLock_event_loop_2:
        ; Setup parameters for call to function zclSampleDoorLock_ProcessIdentifyTimeChange
        LCALL     `??zclSampleDoorLock_ProcessIdentifyTimeChange::`; Banked call to: zclSampleDoorLock_ProcessIdentifyTimeChange
//  472 
//  473     return ( events ^ SAMPLEDOORLOCK_IDENTIFY_TIMEOUT_EVT );
        MOV       A,R6
        XRL       A,#0x1
        LJMP      ??zclSampleDoorLock_event_loop_3 & 0xFFFF
//  474   }
??zclSampleDoorLock_event_loop_4:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPTR,#zclSampleDoorLock_NwkState
        MOVX      @DPTR,A
        XRL       A,#0x9
        JZ        ??zclSampleDoorLock_event_loop_5
        MOVX      A,@DPTR
        XRL       A,#0x7
        JZ        ??zclSampleDoorLock_event_loop_5
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??zclSampleDoorLock_event_loop_6
??zclSampleDoorLock_event_loop_5:
        MOV       DPTR,#giDoorLockScreenMode
        CLR       A
        MOVX      @DPTR,A
        ; Setup parameters for call to function zclSampleDoorLock_LcdDisplayUpdate
        LCALL     `??zclSampleDoorLock_LcdDisplayUpdate::?relay`; Banked call to: zclSampleDoorLock_LcdDisplayUpdate
        ; Setup parameters for call to function zcl_EZModeAction
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       R1,#0x2
        LCALL     `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
??zclSampleDoorLock_event_loop_6:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zclSampleDoorLock_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#zclSampleDoorLock_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_event_loop_7 & 0xFFFF
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ADD       A,#-0x23
        JZ        ??zclSampleDoorLock_event_loop_8
        ADD       A,#-0x11
        JZ        ??zclSampleDoorLock_event_loop_9
        ADD       A,#0x74
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_event_loop_10 & 0xFFFF
        ADD       A,#-0x11
        JZ        ??zclSampleDoorLock_event_loop_4
        ADD       A,#-0x2
        JNZ       ??zclSampleDoorLock_event_loop_6
        MOV       A,R2
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??zclSampleDoorLock_event_loop_11
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x80
??zclSampleDoorLock_event_loop_11:
        JNZ       ??zclSampleDoorLock_event_loop_6
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL     `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
        MOV       ?V2,R2
        MOV       ?V3,R3
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV       R1,#0x5
        LCALL     `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V2
        MOV       R3,?V3
??zclSampleDoorLock_event_loop_12:
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zclSampleDoorLock_event_loop_6
??zclSampleDoorLock_event_loop_8:
        ; Setup parameters for call to function zclSampleDoorLock_ProcessAppMsg
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL     `??zclSampleDoorLock_ProcessAppMsg::?relay`; Banked call to: zclSampleDoorLock_ProcessAppMsg
        SJMP      ??zclSampleDoorLock_event_loop_6
??zclSampleDoorLock_event_loop_9:
        MOV       A,R2
        ADD       A,#0x17
        MOV       R0,A
        CLR       A
        ADDC      A,?V1
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        DEC       A
        JZ        ??zclSampleDoorLock_event_loop_13
        ADD       A,#-0x3
        JNZ       ??zclSampleDoorLock_event_loop_14
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_40:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JNC       ??zclSampleDoorLock_event_loop_14
        INC       R0
        SJMP      ??CrossCallReturnLabel_40
??zclSampleDoorLock_event_loop_13:
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_41:
        SJMP      ??zclSampleDoorLock_event_loop_15
??zclSampleDoorLock_event_loop_16:
        INC       R0
??zclSampleDoorLock_event_loop_15:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R1
        JC        ??zclSampleDoorLock_event_loop_16
??zclSampleDoorLock_event_loop_14:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_event_loop_6 & 0xFFFF
        ; Setup parameters for call to function osal_mem_free
        SJMP      ??zclSampleDoorLock_event_loop_12
??zclSampleDoorLock_event_loop_10:
        ; Setup parameters for call to function zclSampleDoorLock_HandleKeys
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_39:
        LCALL     `??zclSampleDoorLock_HandleKeys::?relay`; Banked call to: zclSampleDoorLock_HandleKeys
        LJMP      ??zclSampleDoorLock_event_loop_6 & 0xFFFF
??zclSampleDoorLock_event_loop_7:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
        SJMP      ??zclSampleDoorLock_event_loop_17
//  475 
//  476   if ( events & SAMPLEDOORLOCK_MAIN_SCREEN_EVT )
??zclSampleDoorLock_event_loop_1:
        ANL       A,#0x10
        JZ        ??zclSampleDoorLock_event_loop_18
//  477   {
//  478     giDoorLockScreenMode = DOORLOCK_MAINMODE;
        MOV       DPTR,#giDoorLockScreenMode
        CLR       A
        MOVX      @DPTR,A
//  479 
//  480     zclSampleDoorLock_LcdDisplayMainMode();
        ; Setup parameters for call to function zclSampleDoorLock_LcdDisplayMainMode
        LCALL     `??zclSampleDoorLock_LcdDisplayMainMode::?relay`; Banked call to: zclSampleDoorLock_LcdDisplayMainMode
//  481 
//  482     return ( events ^ SAMPLEDOORLOCK_MAIN_SCREEN_EVT );
        MOV       A,R6
        XRL       A,#0x10
        SJMP      ??zclSampleDoorLock_event_loop_3
//  483   }
//  484 
//  485 #ifdef ZCL_EZMODE
//  486   // going on to next state
//  487   if ( events & SAMPLEDOORLOCK_EZMODE_NEXTSTATE_EVT )
??zclSampleDoorLock_event_loop_18:
        MOV       A,R6
        ANL       A,#0x4
        JZ        ??zclSampleDoorLock_event_loop_19
//  488   {
//  489     zcl_EZModeAction ( EZMODE_ACTION_PROCESS, NULL );   // going on to next state
        ; Setup parameters for call to function zcl_EZModeAction
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       R1,#0x1
        LCALL     `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
//  490     return ( events ^ SAMPLEDOORLOCK_EZMODE_NEXTSTATE_EVT );
        MOV       A,R6
        XRL       A,#0x4
        SJMP      ??zclSampleDoorLock_event_loop_3
//  491   }
//  492 
//  493   // the overall EZMode timer expired, so we timed out
//  494   if ( events & SAMPLEDOORLOCK_EZMODE_TIMEOUT_EVT )
??zclSampleDoorLock_event_loop_19:
        MOV       A,R6
        ANL       A,#0x8
        MOV       R2,#0x0
        MOV       R3,#0x0
        JZ        ??zclSampleDoorLock_event_loop_20
//  495   {
//  496     zcl_EZModeAction ( EZMODE_ACTION_TIMED_OUT, NULL ); // EZ-Mode timed out
        ; Setup parameters for call to function zcl_EZModeAction
        MOV       R1,#0x63
        LCALL     `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
//  497     return ( events ^ SAMPLEDOORLOCK_EZMODE_TIMEOUT_EVT );
        MOV       A,R6
        XRL       A,#0x8
??zclSampleDoorLock_event_loop_3:
        MOV       R2,A
        MOV       A,R7
??zclSampleDoorLock_event_loop_17:
        MOV       R3,A
//  498   }
//  499 #endif // ZLC_EZMODE
//  500 
//  501   // Discard unknown events
//  502   return 0;
??zclSampleDoorLock_event_loop_20:
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
//  503 }
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function zclSampleDoorLock_event_loop
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function zclSampleDoorLock_event_loop
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV       DPL,R0
        MOV       DPH,R1
        MOV       R0,#0x0
        RET
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function zclSampleDoorLock_event_loop
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function zclSampleDoorLock_event_loop
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       DPL,?V0
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond8 Using cfiCommon0
          CFI Function zclSampleDoorLock_event_loop
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function zclSampleDoorLock_ProcessIdentifyTimeChange
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond9) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond9) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond9) CFA_SP SP+-7
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        MOV       DPTR,#zclSampleDoorLock_IdentifyTime
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine25_0:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessClosuresMsg
          CFI Conditional ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function zclSampleDoorLock_event_loop
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function zclSampleDoorLock_ProcessIdentifyTimeChange
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond13) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond13) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond13) CFA_SP SP+-7
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14
//  504 
//  505 /*********************************************************************
//  506  * @fn      zclSampleDoorLock_HandleKeys
//  507  *
//  508  * @brief   Handles all key events for this device.
//  509  *
//  510  * @param   shift - true if in shift/alt.
//  511  * @param   keys - bit field for key events. Valid entries:
//  512  *                 HAL_KEY_SW_5
//  513  *                 HAL_KEY_SW_4
//  514  *                 HAL_KEY_SW_3
//  515  *                 HAL_KEY_SW_2
//  516  *                 HAL_KEY_SW_1
//  517  *
//  518  * @return  none
//  519  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  520 static void zclSampleDoorLock_HandleKeys( byte shift, byte keys )
zclSampleDoorLock_HandleKeys:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function zclSampleDoorLock_HandleKeys
        CODE
//  521 {
        FUNCALL zclSampleDoorLock_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_HandleKeys, zcl_InvokeEZMode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_HandleKeys, ZDP_MgmtPermitJoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_HandleKeys, zclSampleDoorLock_BasicResetCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_HandleKeys, _itoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_HandleKeys, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_HandleKeys, zclSampleDoorLock_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 10
        MOV       A,#-0xa
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V0,R1
        MOV       ?V1,R2
//  522   uint8 numBuff;    // used to convert decimal to ASCII
//  523 
//  524   if ( keys & HAL_KEY_SW_1 )
        MOV       A,R2
        MOV       C,0xE0 /* A   */.0
        JNC       ??zclSampleDoorLock_HandleKeys_0
//  525   {
//  526     // increase PIN number
//  527     if ( giDoorLockScreenMode == DOORLOCK_PINMODE )
        MOV       DPTR,#giDoorLockScreenMode
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??zclSampleDoorLock_HandleKeys_1
//  528     {
//  529       if ( giDoorLockPINColumnCount < 4 )
        MOV       DPTR,#giDoorLockPINColumnCount
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x4
        JNC       ??zclSampleDoorLock_HandleKeys_0
//  530       {
//  531         if(giDoorLockPINCount > 8)
        MOV       DPTR,#giDoorLockPINCount
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x9
        JC        ??zclSampleDoorLock_HandleKeys_2
//  532         {
//  533           giDoorLockPINCount = 0;
        CLR       A
        SJMP      ??zclSampleDoorLock_HandleKeys_3
//  534         }
//  535         else
//  536         {
//  537           giDoorLockPINCount++;
??zclSampleDoorLock_HandleKeys_2:
        MOVX      A,@DPTR
        INC       A
        SJMP      ??zclSampleDoorLock_HandleKeys_3
//  538         }
//  539       }
//  540     }
//  541     // toggle door lock
//  542     else
//  543     {
//  544       if ( zclSampleDoorLock_LockState == CLOSURES_LOCK_STATE_LOCKED )
??zclSampleDoorLock_HandleKeys_1:
        MOV       DPTR,#zclSampleDoorLock_LockState
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??zclSampleDoorLock_HandleKeys_4
//  545       {
//  546 #ifdef LCD_SUPPORTED
//  547         HalLcdWriteString( (char *)sDoorUnlocked, HAL_LCD_LINE_2);
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x2
        MOV       R2,#sDoorUnlocked & 0xff
        MOV       R3,#(sDoorUnlocked >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  548 #endif //LCD_SUPPORTED
//  549         HalLedSet( HAL_LED_1, HAL_LED_MODE_BLINK );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x2
        MOV       R1,#0x1
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  550         HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x0
        SJMP      ??zclSampleDoorLock_HandleKeys_5
//  551 
//  552         zclSampleDoorLock_LockState = CLOSURES_LOCK_STATE_UNLOCKED;
//  553       }
//  554       else if ( zclSampleDoorLock_LockState == CLOSURES_LOCK_STATE_UNLOCKED )
??zclSampleDoorLock_HandleKeys_4:
        MOV       R2,#sDoorLocked & 0xff
        MOV       R3,#(sDoorLocked >> 8) & 0xff
        MOVX      A,@DPTR
        XRL       A,#0x2
        MOV       R1,#0x2
        JNZ       ??zclSampleDoorLock_HandleKeys_6
//  555       {
//  556 #ifdef LCD_SUPPORTED
//  557         HalLcdWriteString( (char *)sDoorLocked, HAL_LCD_LINE_2);
        ; Setup parameters for call to function HalLcdWriteString
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  558 #endif //LCD_SUPPORTED
//  559         HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x0
        MOV       R1,#0x1
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  560         HalLedSet( HAL_LED_2, HAL_LED_MODE_BLINK );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x2
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  561         zclSampleDoorLock_LockState = CLOSURES_LOCK_STATE_LOCKED;
        MOV       DPTR,#zclSampleDoorLock_LockState
        MOV       A,#0x1
        SJMP      ??zclSampleDoorLock_HandleKeys_3
//  562       }
//  563       else
//  564       {
//  565 #ifdef LCD_SUPPORTED
//  566         HalLcdWriteString( (char *)sDoorLocked, HAL_LCD_LINE_2);
??zclSampleDoorLock_HandleKeys_6:
        ; Setup parameters for call to function HalLcdWriteString
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  567 #endif //LCD_SUPPORTED
//  568         HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x0
        MOV       R1,#0x1
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  569         HalLedSet( HAL_LED_2, HAL_LED_MODE_BLINK );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x2
??zclSampleDoorLock_HandleKeys_5:
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
//  570 
//  571         zclSampleDoorLock_LockState = CLOSURES_LOCK_STATE_UNLOCKED;
        MOV       DPTR,#zclSampleDoorLock_LockState
        MOV       A,#0x2
??zclSampleDoorLock_HandleKeys_3:
        MOVX      @DPTR,A
//  572       }
//  573     }
//  574   }
//  575 
//  576   if ( keys & HAL_KEY_SW_2 )
??zclSampleDoorLock_HandleKeys_0:
        MOV       A,?V1
        MOV       C,0xE0 /* A   */.1
        JNC       ??zclSampleDoorLock_HandleKeys_7
//  577   {
//  578     if ( ( giDoorLockScreenMode == DOORLOCK_MAINMODE ) ||
//  579          ( giDoorLockScreenMode == DOORLOCK_HELPMODE ) )
        MOV       DPTR,#giDoorLockScreenMode
        MOVX      A,@DPTR
        JZ        ??zclSampleDoorLock_HandleKeys_8
        XRL       A,#0x1
        JNZ       ??zclSampleDoorLock_HandleKeys_7
//  580     {
//  581       giDoorLockScreenMode = DOORLOCK_MAINMODE;
??zclSampleDoorLock_HandleKeys_8:
        CLR       A
        MOVX      @DPTR,A
//  582 
//  583 #ifdef ZCL_EZMODE
//  584       {
//  585         // Invoke EZ-Mode
//  586         zclEZMode_InvokeData_t ezModeData;
//  587 
//  588         // Invoke EZ-Mode
//  589         ezModeData.endpoint = SAMPLEDOORLOCK_ENDPOINT; // endpoint on which to invoke EZ-Mode
        INC       A
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x8
        MOVX      @DPTR,A
//  590         if ( ( zclSampleDoorLock_NwkState == DEV_ZB_COORD ) ||
//  591              ( zclSampleDoorLock_NwkState == DEV_ROUTER )   ||
//  592              ( zclSampleDoorLock_NwkState == DEV_END_DEVICE ) )
        MOV       DPTR,#zclSampleDoorLock_NwkState
        MOVX      A,@DPTR
        XRL       A,#0x9
        JZ        ??zclSampleDoorLock_HandleKeys_9
        MOVX      A,@DPTR
        XRL       A,#0x7
        JZ        ??zclSampleDoorLock_HandleKeys_9
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??zclSampleDoorLock_HandleKeys_10
//  593         {
//  594           ezModeData.onNetwork = TRUE;      // node is already on the network
??zclSampleDoorLock_HandleKeys_9:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        SJMP      ??zclSampleDoorLock_HandleKeys_11
//  595         }
//  596         else
//  597         {
//  598           ezModeData.onNetwork = FALSE;     // node is not yet on the network
??zclSampleDoorLock_HandleKeys_10:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        CLR       A
??zclSampleDoorLock_HandleKeys_11:
        MOVX      @DPTR,A
//  599         }
//  600         ezModeData.initiator = FALSE;        // DoorLock Device is a target
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
//  601         zcl_InvokeEZMode( &ezModeData );
        ; Setup parameters for call to function zcl_InvokeEZMode
        INC       A
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??zcl_InvokeEZMode::?relay`; Banked call to: zcl_InvokeEZMode
//  602 
//  603  #ifdef LCD_SUPPORTED
//  604         HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x2
        MOV       R2,#`?<Constant "EZMode">` & 0xff
        MOV       R3,#(`?<Constant "EZMode">` >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  605  #endif
//  606       }
//  607 
//  608 // NOT ZCL_EZMODE, Use EndDeviceBind
//  609 #else
//  610       {
//  611         zAddrType_t dstAddr;
//  612         // Initiate an End Device Bind Request, this bind request will
//  613         // only use a cluster list that is important to binding.
//  614         dstAddr.addrMode = afAddr16Bit;
//  615         dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
//  616         ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
//  617                              SAMPLEDOORLOCK_ENDPOINT,
//  618                              ZCL_HA_PROFILE_ID,
//  619                              ZCLSAMPLEDOORLOCK_BINDINGLIST, bindingInClusters,
//  620                              0, NULL,   // No Outgoing clusters to bind
//  621                              TRUE );
//  622       }
//  623 #endif // ZCL_EZMODE
//  624     }
//  625   }
//  626 
//  627   if ( keys & HAL_KEY_SW_3 )
??zclSampleDoorLock_HandleKeys_7:
        MOV       A,?V1
        MOV       C,0xE0 /* A   */.4
        JNC       ??zclSampleDoorLock_HandleKeys_12
//  628   {
//  629     // decrease PIN number
//  630     if ( giDoorLockScreenMode == DOORLOCK_PINMODE )
        MOV       DPTR,#giDoorLockScreenMode
        MOVX      A,@DPTR
        XRL       A,#0x2
        MOV       DPTR,#giDoorLockPINColumnCount
        JNZ       ??zclSampleDoorLock_HandleKeys_13
//  631     {
//  632       if ( giDoorLockPINColumnCount < 4 )
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x4
        JNC       ??zclSampleDoorLock_HandleKeys_12
//  633       {
//  634         if ( giDoorLockPINCount < 1 )
        MOV       DPTR,#giDoorLockPINCount
        MOVX      A,@DPTR
        JNZ       ??zclSampleDoorLock_HandleKeys_14
//  635         {
//  636           giDoorLockPINCount = 9;
        MOV       A,#0x9
        SJMP      ??zclSampleDoorLock_HandleKeys_15
//  637         }
//  638         else
//  639         {
//  640           giDoorLockPINCount--;
??zclSampleDoorLock_HandleKeys_14:
        DEC       A
        SJMP      ??zclSampleDoorLock_HandleKeys_15
//  641         }
//  642       }
//  643     }
//  644     else
//  645     {
//  646       giDoorLockPINColumnCount = 0;
??zclSampleDoorLock_HandleKeys_13:
        CLR       A
        MOVX      @DPTR,A
//  647       giDoorLockScreenMode = DOORLOCK_PINMODE;   // set to PIN screen
        MOV       DPTR,#giDoorLockScreenMode
        MOV       A,#0x2
??zclSampleDoorLock_HandleKeys_15:
        MOVX      @DPTR,A
//  648     }
//  649   }
//  650 
//  651   if ( keys & HAL_KEY_SW_4 )
??zclSampleDoorLock_HandleKeys_12:
        MOV       A,?V1
        MOV       C,0xE0 /* A   */.3
        JNC       ??zclSampleDoorLock_HandleKeys_16
//  652   {
//  653     if ( giDoorLockScreenMode == DOORLOCK_HELPMODE )
        MOV       DPTR,#giDoorLockScreenMode
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??zclSampleDoorLock_HandleKeys_17
//  654     {
//  655       giDoorLockScreenMode = DOORLOCK_MAINMODE;
        CLR       A
        MOVX      @DPTR,A
//  656     }
//  657 
//  658     if ( ( zclSampleDoorLock_NwkState == DEV_ZB_COORD ) ||
//  659          ( zclSampleDoorLock_NwkState == DEV_ROUTER ) )
??zclSampleDoorLock_HandleKeys_17:
        MOV       DPTR,#zclSampleDoorLock_NwkState
        MOVX      A,@DPTR
        XRL       A,#0x9
        JZ        ??zclSampleDoorLock_HandleKeys_18
        MOVX      A,@DPTR
        XRL       A,#0x7
        JNZ       ??zclSampleDoorLock_HandleKeys_16
//  660     {
//  661       zAddrType_t tmpAddr;
//  662 
//  663       tmpAddr.addrMode = Addr16Bit;
??zclSampleDoorLock_HandleKeys_18:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  664       tmpAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  665 
//  666       // toggle permit join
//  667       gPermitDuration = gPermitDuration ? 0 : 0xff;
        MOV       DPTR,#gPermitDuration
        MOVX      A,@DPTR
        JZ        ??zclSampleDoorLock_HandleKeys_19
        CLR       A
        SJMP      ??zclSampleDoorLock_HandleKeys_20
??zclSampleDoorLock_HandleKeys_19:
        MOV       A,#-0x1
??zclSampleDoorLock_HandleKeys_20:
        MOVX      @DPTR,A
//  668 
//  669       // Trust Center significance is always true
//  670       ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
        ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
        MOV       R5,#0x0
        MOV       R4,#0x1
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R4
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
//  671     }
//  672   }
//  673 
//  674   if ( shift && ( keys & HAL_KEY_SW_5 ) )
??zclSampleDoorLock_HandleKeys_16:
        MOV       A,?V0
        JZ        ??zclSampleDoorLock_HandleKeys_21
        MOV       A,?V1
        MOV       C,0xE0 /* A   */.2
        JC        $+5
        LJMP      ??zclSampleDoorLock_HandleKeys_22 & 0xFFFF
//  675   {
//  676     zclSampleDoorLock_BasicResetCB();
        ; Setup parameters for call to function zclSampleDoorLock_BasicResetCB
        LCALL     `??zclSampleDoorLock_BasicResetCB::?relay`; Banked call to: zclSampleDoorLock_BasicResetCB
        LJMP      ??zclSampleDoorLock_HandleKeys_22 & 0xFFFF
//  677   }
//  678   else if ( keys & HAL_KEY_SW_5 )
??zclSampleDoorLock_HandleKeys_21:
        MOV       A,?V1
        MOV       C,0xE0 /* A   */.2
        JC        $+5
        LJMP      ??zclSampleDoorLock_HandleKeys_22 & 0xFFFF
//  679   {
//  680     // for Master PIN screen
//  681     if ( giDoorLockScreenMode == DOORLOCK_PINMODE )
        MOV       DPTR,#giDoorLockScreenMode
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??zclSampleDoorLock_HandleKeys_23
//  682     {
//  683       if ( giDoorLockPINCount > 0 )
        MOV       DPTR,#giDoorLockPINCount
        MOVX      A,@DPTR
        JZ        ??zclSampleDoorLock_HandleKeys_24
//  684       {
//  685         _itoa(giDoorLockPINCount, &numBuff, 10);  // convert number to ASCII
        ; Setup parameters for call to function _itoa
        MOV       R1,#0xa
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??_itoa::?relay`; Banked call to: _itoa
//  686 
//  687         aiDoorLockMasterPINCode[giDoorLockPINColumnCount + 1] = numBuff;   // copy current PIN number
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        LCALL     ?Subroutine13 & 0xFFFF
//  688       }
??CrossCallReturnLabel_36:
        POP       A
          CFI CFA_SP SP+0
        SJMP      ??zclSampleDoorLock_HandleKeys_25
//  689       else
//  690       {
//  691         // make sure '0' is copied into PIN variable
//  692         aiDoorLockMasterPINCode[giDoorLockPINColumnCount + 1] = 0x30;   // ASCII '0'
??zclSampleDoorLock_HandleKeys_24:
        LCALL     ?Subroutine13 & 0xFFFF
//  693       }
??CrossCallReturnLabel_37:
        MOV       A,#0x30
??zclSampleDoorLock_HandleKeys_25:
        MOVX      @DPTR,A
//  694 
//  695       if(giDoorLockPINColumnCount < 3)
        MOV       DPTR,#giDoorLockPINColumnCount
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x3
        JNC       ??zclSampleDoorLock_HandleKeys_26
//  696       {
//  697         giDoorLockPINColumnCount++;   // adjust PIN column
        MOVX      A,@DPTR
        INC       A
        SJMP      ??zclSampleDoorLock_HandleKeys_27
//  698       }
//  699       else
//  700       {
//  701         giDoorLockPINColumnCount = 4;   // hold here until PIN screen reset
??zclSampleDoorLock_HandleKeys_26:
        MOV       A,#0x4
        MOVX      @DPTR,A
//  702         giDoorLockPINCount = 0;   // reset PIN count
        MOV       DPTR,#giDoorLockPINCount
        CLR       A
        MOVX      @DPTR,A
//  703 
//  704         // store PIN to NVM
//  705         osal_nv_write( ZCD_NV_APS_DOORLOCK_PIN, 0, 5, aiDoorLockMasterPINCode );
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V2,#aiDoorLockMasterPINCode & 0xff
        MOV       ?V3,#(aiDoorLockMasterPINCode >> 8) & 0xff
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V2,#0x5
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x2
        MOV       R3,#0x4
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  706 #ifdef LCD_SUPPORTED
//  707         HalLcdWriteString( (char *)sStorePIN, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x2
        MOV       R2,#sStorePIN & 0xff
        MOV       R3,#(sStorePIN >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  708         HalLcdWriteString( (char *)sClearLine, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x3
        MOV       R2,#sClearLine & 0xff
        MOV       R3,#(sClearLine >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  709 #endif
//  710         giDoorLockScreenMode = DOORLOCK_MAINMODE;
        MOV       DPTR,#giDoorLockScreenMode
        CLR       A
        SJMP      ??zclSampleDoorLock_HandleKeys_27
//  711       }
//  712     }
//  713     else if ( giDoorLockScreenMode == DOORLOCK_MAINMODE )
??zclSampleDoorLock_HandleKeys_23:
        MOVX      A,@DPTR
        JNZ       ??zclSampleDoorLock_HandleKeys_28
//  714     {
//  715       giDoorLockScreenMode = DOORLOCK_HELPMODE;
        MOV       A,#0x1
??zclSampleDoorLock_HandleKeys_27:
        MOVX      @DPTR,A
        SJMP      ??zclSampleDoorLock_HandleKeys_22
//  716     }
//  717     else
//  718     {
//  719       giDoorLockScreenMode = DOORLOCK_MAINMODE;
??zclSampleDoorLock_HandleKeys_28:
        CLR       A
        MOVX      @DPTR,A
//  720 #ifdef LCD_SUPPORTED
//  721       HalLcdWriteString( (char *)sClearLine, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x2
        MOV       R2,#sClearLine & 0xff
        MOV       R3,#(sClearLine >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  722 #endif
//  723     }
//  724   }
//  725 
//  726   // update display
//  727   zclSampleDoorLock_LcdDisplayUpdate();
??zclSampleDoorLock_HandleKeys_22:
        ; Setup parameters for call to function zclSampleDoorLock_LcdDisplayUpdate
        LCALL     `??zclSampleDoorLock_LcdDisplayUpdate::?relay`; Banked call to: zclSampleDoorLock_LcdDisplayUpdate
//  728 }
        MOV       A,#0xa
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock15

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function zclSampleDoorLock_HandleKeys
          CFI Conditional ??CrossCallReturnLabel_36
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function zclSampleDoorLock_HandleKeys
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        MOV       DPTR,#giDoorLockPINColumnCount
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#(aiDoorLockMasterPINCode + 1) & 0xff
        ADD       A,R0
        MOV       DPL,A
        CLR       A
        ADDC      A,#((aiDoorLockMasterPINCode + 1) >> 8) & 0xff
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18
//  729 
//  730 /*********************************************************************
//  731  * @fn      zclSampleDoorLock_LcdDisplayUpdate
//  732  *
//  733  * @brief   Called to update the LCD display.
//  734  *
//  735  * @param   none
//  736  *
//  737  * @return  none
//  738  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  739 void zclSampleDoorLock_LcdDisplayUpdate(void)
zclSampleDoorLock_LcdDisplayUpdate:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function zclSampleDoorLock_LcdDisplayUpdate
        CODE
//  740 {
        FUNCALL zclSampleDoorLock_LcdDisplayUpdate, zclSampleDoorLock_LcdDisplayPINMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_LcdDisplayUpdate, zclSampleDoorLock_LcdDisplayHelpMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_LcdDisplayUpdate, zclSampleDoorLock_LcdDisplayMainMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  741   if ( giDoorLockScreenMode == DOORLOCK_PINMODE )
        MOV       DPTR,#giDoorLockScreenMode
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??zclSampleDoorLock_LcdDisplayUpdate_0
//  742   {
//  743     zclSampleDoorLock_LcdDisplayPINMode();
        ; Setup parameters for call to function zclSampleDoorLock_LcdDisplayPINMode
        LCALL     `??zclSampleDoorLock_LcdDisplayPINMode::?relay`; Banked call to: zclSampleDoorLock_LcdDisplayPINMode
        SJMP      ??zclSampleDoorLock_LcdDisplayUpdate_1
//  744   }
//  745   else if ( giDoorLockScreenMode == DOORLOCK_HELPMODE )
??zclSampleDoorLock_LcdDisplayUpdate_0:
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??zclSampleDoorLock_LcdDisplayUpdate_2
//  746   {
//  747     zclSampleDoorLock_LcdDisplayHelpMode();
        ; Setup parameters for call to function zclSampleDoorLock_LcdDisplayHelpMode
        LCALL     `??zclSampleDoorLock_LcdDisplayHelpMode::?relay`; Banked call to: zclSampleDoorLock_LcdDisplayHelpMode
        SJMP      ??zclSampleDoorLock_LcdDisplayUpdate_1
//  748   }
//  749   else
//  750   {
//  751     zclSampleDoorLock_LcdDisplayMainMode();
??zclSampleDoorLock_LcdDisplayUpdate_2:
        ; Setup parameters for call to function zclSampleDoorLock_LcdDisplayMainMode
        LCALL     `??zclSampleDoorLock_LcdDisplayMainMode::?relay`; Banked call to: zclSampleDoorLock_LcdDisplayMainMode
//  752   }
//  753 }
??zclSampleDoorLock_LcdDisplayUpdate_1:
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock19
//  754 
//  755 /*********************************************************************
//  756  * @fn      zclSampleDoorLock_LcdDisplayMainMode
//  757  *
//  758  * @brief   Called to display the main screen on the LCD.
//  759  *
//  760  * @param   none
//  761  *
//  762  * @return  none
//  763  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  764 void zclSampleDoorLock_LcdDisplayMainMode(void)
zclSampleDoorLock_LcdDisplayMainMode:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function zclSampleDoorLock_LcdDisplayMainMode
        CODE
//  765 {
        FUNCALL zclSampleDoorLock_LcdDisplayMainMode, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_LcdDisplayMainMode, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_LcdDisplayMainMode, zclHA_LcdStatusLine1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_LcdDisplayMainMode, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_LcdDisplayMainMode, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_LcdDisplayMainMode, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_LcdDisplayMainMode, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 16
        MOV       A,#-0x10
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
//  766   char sPermitJoinStatus[16];
//  767 
//  768   if ( zclSampleDoorLock_NwkState == DEV_ZB_COORD )
        MOV       DPTR,#zclSampleDoorLock_NwkState
        MOVX      A,@DPTR
        XRL       A,#0x9
        JNZ       ??zclSampleDoorLock_LcdDisplayMainMode_0
//  769   {
//  770     zclHA_LcdStatusLine1( ZCL_HA_DEVICE_COORDINATOR );
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV       R1,#0x0
        SJMP      ??zclSampleDoorLock_LcdDisplayMainMode_1
//  771   }
//  772   else if ( zclSampleDoorLock_NwkState == DEV_ROUTER )
??zclSampleDoorLock_LcdDisplayMainMode_0:
        MOVX      A,@DPTR
        XRL       A,#0x7
        JNZ       ??zclSampleDoorLock_LcdDisplayMainMode_2
//  773   {
//  774     zclHA_LcdStatusLine1( ZCL_HA_DEVICE_ROUTER );
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV       R1,#0x1
        SJMP      ??zclSampleDoorLock_LcdDisplayMainMode_1
//  775   }
//  776   else if ( zclSampleDoorLock_NwkState == DEV_END_DEVICE )
??zclSampleDoorLock_LcdDisplayMainMode_2:
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??zclSampleDoorLock_LcdDisplayMainMode_3
//  777   {
//  778     zclHA_LcdStatusLine1( ZCL_HA_DEVICE_END_DEVICE );
        ; Setup parameters for call to function zclHA_LcdStatusLine1
        MOV       R1,#0x2
??zclSampleDoorLock_LcdDisplayMainMode_1:
        LCALL     `??zclHA_LcdStatusLine1::?relay`; Banked call to: zclHA_LcdStatusLine1
//  779   }
//  780 
//  781 #ifdef LCD_SUPPORTED
//  782   if ( ( zclSampleDoorLock_NwkState == DEV_ZB_COORD ) ||
//  783        ( zclSampleDoorLock_NwkState == DEV_ROUTER ) )
        MOV       DPTR,#zclSampleDoorLock_NwkState
        MOVX      A,@DPTR
        XRL       A,#0x9
        JZ        ??zclSampleDoorLock_LcdDisplayMainMode_4
        MOVX      A,@DPTR
        XRL       A,#0x7
        JNZ       ??zclSampleDoorLock_LcdDisplayMainMode_3
//  784   {
//  785     if ( gPermitDuration )
??zclSampleDoorLock_LcdDisplayMainMode_4:
        MOV       DPTR,#gPermitDuration
        MOVX      A,@DPTR
        JZ        ??zclSampleDoorLock_LcdDisplayMainMode_5
//  786     {
//  787       osal_memcpy(sPermitJoinStatus, "SW5: Help      *", 16);
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "SW5: Help      *">` & 0xff
        MOV       ?V1,#(`?<Constant "SW5: Help      *">` >> 8) & 0xff
        SJMP      ??zclSampleDoorLock_LcdDisplayMainMode_6
//  788     }
//  789     else
//  790     {
//  791       osal_memcpy(sPermitJoinStatus, "SW5: Help       ", 16);
??zclSampleDoorLock_LcdDisplayMainMode_5:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "SW5: Help       ">` & 0xff
        MOV       ?V1,#(`?<Constant "SW5: Help       ">` >> 8) & 0xff
??zclSampleDoorLock_LcdDisplayMainMode_6:
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
//  792     }
//  793     // display help key with permit join status
//  794     HalLcdWriteString( (char *)sPermitJoinStatus, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x3
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        SJMP      ??zclSampleDoorLock_LcdDisplayMainMode_7
//  795   }
//  796   else
//  797   {
//  798     // display help key
//  799     HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
??zclSampleDoorLock_LcdDisplayMainMode_3:
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x3
        MOV       R2,#sSwHelp & 0xff
        MOV       R3,#(sSwHelp >> 8) & 0xff
//  800   }
??zclSampleDoorLock_LcdDisplayMainMode_7:
          CFI EndBlock cfiBlock20
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  801 #endif
//  802 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 27)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
        MOV       A,#0x10
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       R7,#0x3
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock21
//  803 
//  804 /*********************************************************************
//  805  * @fn      zclSampleDoorLock_LcdDisplayHelpMode
//  806  *
//  807  * @brief   Called to update the LCD display with permit join information.
//  808  *
//  809  * @param   none
//  810  *
//  811  * @return  none
//  812  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  813 void zclSampleDoorLock_LcdDisplayHelpMode(void)
zclSampleDoorLock_LcdDisplayHelpMode:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function zclSampleDoorLock_LcdDisplayHelpMode
        CODE
//  814 {
        FUNCALL zclSampleDoorLock_LcdDisplayHelpMode, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_LcdDisplayHelpMode, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_LcdDisplayHelpMode, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  815 #ifdef LCD_SUPPORTED
//  816   HalLcdWriteString( (char *)sSwDoorLock, HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x1
        MOV       R2,#sSwDoorLock & 0xff
        MOV       R3,#(sSwDoorLock >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  817   HalLcdWriteString( (char *)sSwEZMode, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x2
        MOV       R2,#sSwEZMode & 0xff
        MOV       R3,#(sSwEZMode >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  818   HalLcdWriteString( (char *)sSwPIN, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x3
        MOV       R2,#sSwPIN & 0xff
        MOV       R3,#(sSwPIN >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  819 #endif
//  820 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock22
//  821 
//  822 /*********************************************************************
//  823  * @fn      zclSampleDoorLock_LcdDisplayPINMode
//  824  *
//  825  * @brief   Called to display the PIN screen on the LCD.
//  826  *
//  827  * @param   none
//  828  *
//  829  * @return  none
//  830  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  831 void zclSampleDoorLock_LcdDisplayPINMode(void)
zclSampleDoorLock_LcdDisplayPINMode:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function zclSampleDoorLock_LcdDisplayPINMode
        CODE
//  832 {
        FUNCALL zclSampleDoorLock_LcdDisplayPINMode, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_LcdDisplayPINMode, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_LcdDisplayPINMode, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_LcdDisplayPINMode, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_LcdDisplayPINMode, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_LcdDisplayPINMode, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_LcdDisplayPINMode, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_LcdDisplayPINMode, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_LcdDisplayPINMode, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_LcdDisplayPINMode, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_LcdDisplayPINMode, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_LcdDisplayPINMode, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 16
        MOV       A,#-0x10
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
//  833   char sDisplayPIN[16];
//  834 
//  835   // cover appropriate columns with security '*'
//  836   if ( giDoorLockPINColumnCount == 0 )
        MOV       DPTR,#giDoorLockPINColumnCount
        MOVX      A,@DPTR
        JNZ       ??zclSampleDoorLock_LcdDisplayPINMode_0
//  837   {
//  838     osal_memcpy(sDisplayPIN, "Enter PIN: ", 11);
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "Enter PIN: ">` & 0xff
        MOV       ?V1,#(`?<Constant "Enter PIN: ">` >> 8) & 0xff
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R4,#0xb
        SJMP      ??zclSampleDoorLock_LcdDisplayPINMode_1
          CFI CFA_XSP16 add(XSP16, 27)
//  839     _ltoa(giDoorLockPINCount, (void *)(&sDisplayPIN[11 + giDoorLockPINColumnCount]), 10);
//  840   }
//  841   else if ( giDoorLockPINColumnCount == 1 )
??zclSampleDoorLock_LcdDisplayPINMode_0:
        XRL       A,#0x1
        JNZ       ??zclSampleDoorLock_LcdDisplayPINMode_2
//  842   {
//  843     osal_memcpy(sDisplayPIN, "Enter PIN: *", 12);
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "Enter PIN: *">` & 0xff
        MOV       ?V1,#(`?<Constant "Enter PIN: *">` >> 8) & 0xff
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R4,#0xc
        SJMP      ??zclSampleDoorLock_LcdDisplayPINMode_1
          CFI CFA_XSP16 add(XSP16, 27)
//  844     _ltoa(giDoorLockPINCount, (void *)(&sDisplayPIN[11 + giDoorLockPINColumnCount]), 10);
//  845   }
//  846   else if ( giDoorLockPINColumnCount == 2 )
??zclSampleDoorLock_LcdDisplayPINMode_2:
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??zclSampleDoorLock_LcdDisplayPINMode_3
//  847   {
//  848     osal_memcpy(sDisplayPIN, "Enter PIN: **", 13);
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "Enter PIN: **">` & 0xff
        MOV       ?V1,#(`?<Constant "Enter PIN: **">` >> 8) & 0xff
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R4,#0xd
        SJMP      ??zclSampleDoorLock_LcdDisplayPINMode_1
          CFI CFA_XSP16 add(XSP16, 27)
//  849     _ltoa(giDoorLockPINCount, (void *)(&sDisplayPIN[11 + giDoorLockPINColumnCount]), 10);
//  850   }
//  851   else if ( giDoorLockPINColumnCount == 3 )
??zclSampleDoorLock_LcdDisplayPINMode_3:
        MOVX      A,@DPTR
        XRL       A,#0x3
        JNZ       ??zclSampleDoorLock_LcdDisplayPINMode_4
//  852   {
//  853     osal_memcpy(sDisplayPIN, "Enter PIN: ***", 14);
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "Enter PIN: ***">` & 0xff
        MOV       ?V1,#(`?<Constant "Enter PIN: ***">` >> 8) & 0xff
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R4,#0xe
??zclSampleDoorLock_LcdDisplayPINMode_1:
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
//  854     _ltoa(giDoorLockPINCount, (void *)(&sDisplayPIN[11 + giDoorLockPINColumnCount]), 10);
        ; Setup parameters for call to function _ltoa
        MOV       DPTR,#giDoorLockPINColumnCount
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,DPL
        ADD       A,R0
        MOV       R0,A
        CLR       A
        ADDC      A,DPH
        MOV       R1,A
        MOV       A,R0
        ADD       A,#0xb
        MOV       ?V0,A
        CLR       A
        ADDC      A,R1
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       R1,#0xa
        MOV       DPTR,#giDoorLockPINCount
        MOVX      A,@DPTR
        MOV       R2,A
        CLR       A
        MOV       R3,A
        MOV       R4,A
        MOV       R5,A
        LCALL     `??_ltoa::?relay`; Banked call to: _ltoa
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        SJMP      ??zclSampleDoorLock_LcdDisplayPINMode_5
//  855   }
//  856   else if ( giDoorLockPINColumnCount > 3 )
??zclSampleDoorLock_LcdDisplayPINMode_4:
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x4
        JC        ??zclSampleDoorLock_LcdDisplayPINMode_5
//  857   {
//  858     osal_memcpy(sDisplayPIN, "Enter PIN: **** ", 16);
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "Enter PIN: **** ">` & 0xff
        MOV       ?V1,#(`?<Constant "Enter PIN: **** ">` >> 8) & 0xff
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
//  859   }
//  860 #ifdef LCD_SUPPORTED
//  861   HalLcdWriteString( (char *)sDisplayPIN, HAL_LCD_LINE_1 );
??zclSampleDoorLock_LcdDisplayPINMode_5:
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x1
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  862   HalLcdWriteString( (char *)sPINLine2, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x2
        MOV       R2,#sPINLine2 & 0xff
        MOV       R3,#(sPINLine2 >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  863   HalLcdWriteString( (char *)sPINLine3, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x3
        MOV       R2,#sPINLine3 & 0xff
        MOV       R3,#(sPINLine3 >> 8) & 0xff
        LJMP      ?Subroutine1 & 0xFFFF
//  864 #endif
//  865 }
          CFI EndBlock cfiBlock23
//  866 
//  867 /*********************************************************************
//  868  * @fn      zclSampleDoorLock_ProcessAppMsg
//  869  *
//  870  * @brief   Process DoorLock messages
//  871  *
//  872  * @param   srcEP - Sending Apps endpoint
//  873  * @param   len - number of bytes
//  874  * @param   msg - pointer to message
//  875  *          0 - lo byte destination address
//  876  *          1 - hi byte destination address
//  877  *          2 - destination endpoint
//  878  *          3 - lo byte cluster ID
//  879  *          4 - hi byte cluster ID
//  880  *          5 - message length
//  881  *          6 - destination address mode (first byte of data)
//  882  *          7 - zcl command frame
//  883  *
//  884  * @return  none
//  885  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  886 static void zclSampleDoorLock_ProcessAppMsg( uint8 srcEP, uint8 len, uint8 *msg )
zclSampleDoorLock_ProcessAppMsg:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessAppMsg
        CODE
//  887 {
        FUNCALL zclSampleDoorLock_ProcessAppMsg, zclParseHdr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessAppMsg, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessAppMsg, zclSampleDoorLock_ProcessFoundationMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessAppMsg, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessAppMsg, zclSampleDoorLock_ProcessSceneCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessAppMsg, zclSampleDoorLock_ProcessGroupCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessAppMsg, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessAppMsg, zclSampleDoorLock_ProcessClosuresMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 23
        MOV       A,#-0x17
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       ?V0,R1
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  888   afAddrType_t dstAddr;
//  889   uint16 clusterID;
//  890   zclFrameHdr_t hdr;
//  891   uint8 *pData;
//  892   uint8 dataLen;
//  893 
//  894   dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV       R0,A
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine4 & 0xFFFF
//  895   msg += 2;
//  896   dstAddr.endPoint = *msg++;
??CrossCallReturnLabel_0:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        JNC       ??zclSampleDoorLock_ProcessAppMsg_0
        INC       R7
//  897   clusterID = BUILD_UINT16( msg[0], msg[1] );
??zclSampleDoorLock_ProcessAppMsg_0:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        CLR       A
        XCH       A,R0
        MOV       R1,A
        MOV       A,R2
        ADD       A,R0
        MOV       ?V4,A
        CLR       A
        ADDC      A,R1
        MOV       ?V5,A
//  898   msg += 2;
//  899   dataLen = *msg++; // Length of message (Z-Tool can support up to 255 octets)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
//  900   dstAddr.addrMode = (afAddrMode_t)(*msg++);
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,R6
        ADD       A,#0x4
        MOV       R6,A
        JNC       ??zclSampleDoorLock_ProcessAppMsg_1
        INC       R7
//  901   dataLen--; // Length of ZCL frame
//  902 
//  903   // Begining of ZCL frame
//  904   pData = zclParseHdr( &hdr, msg );
??zclSampleDoorLock_ProcessAppMsg_1:
        ; Setup parameters for call to function zclParseHdr
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??zclParseHdr::?relay`; Banked call to: zclParseHdr
        MOV       ?V2,R2
        MOV       ?V3,R3
//  905   dataLen -= (uint8)( pData - msg );
        MOV       R0,?V2
        MOV       A,#-0x1
        ADD       A,?V1
        CLR       C
        SUBB      A,R0
        ADD       A,R6
        MOV       ?V1,A
//  906 
//  907   // Is this a foundation type message?
//  908   if ( zcl_ProfileCmd( hdr.fc.type ) )
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_64:
        MOV       R1,A
        MOV       A,?V1
        MOV       ?V6,A
        MOV       ?V7,#0x0
        MOVX      A,@DPTR
        ANL       A,#0x3
        JZ        $+5
        LJMP      ??zclSampleDoorLock_ProcessAppMsg_2 & 0xFFFF
//  909   {
//  910     if ( hdr.fc.manuSpecific )
        MOVX      A,@DPTR
        ANL       A,#0x4
        JZ        ??zclSampleDoorLock_ProcessAppMsg_3
//  911     {
//  912       // We don't support any manufacturer specific command -- just forward it.
//  913       zcl_SendCommand( srcEP, &dstAddr, clusterID, hdr.commandID, FALSE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  914                        hdr.fc.disableDefaultRsp, hdr.manuCode, hdr.transSeqNum, dataLen, pData );
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine18 & 0xFFFF
//  915     }
??CrossCallReturnLabel_42:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 44)
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 46)
        MOV       A,R1
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 47)
        MOV       ?V1,#0x0
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 48)
        LJMP      ??zclSampleDoorLock_ProcessAppMsg_4 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 39)
//  916     else
//  917     {
//  918       zclParseCmd_t cmd;
//  919 
//  920       cmd.endpoint = srcEP;
??zclSampleDoorLock_ProcessAppMsg_3:
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V0
        MOVX      @DPTR,A
//  921       cmd.dataLen = dataLen;
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V6
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  922       cmd.pData = pData;
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  923 
//  924       zclSampleDoorLock_ProcessFoundationMsg( &dstAddr, clusterID, &hdr, &cmd );
        ; Setup parameters for call to function zclSampleDoorLock_ProcessFoundationMsg
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV       R4,?V4
        MOV       R5,?V5
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??zclSampleDoorLock_ProcessFoundationMsg::?rela`; Banked call to: zclSampleDoorLock_ProcessFoundationMsg
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
        LJMP      ??zclSampleDoorLock_ProcessAppMsg_5 & 0xFFFF
//  925     }
//  926   }
//  927   else
//  928   {
//  929     // Nope, must be specific to the cluster ID
//  930     if ( hdr.fc.manuSpecific )
??zclSampleDoorLock_ProcessAppMsg_2:
        MOVX      A,@DPTR
        ANL       A,#0x4
        JZ        ??zclSampleDoorLock_ProcessAppMsg_6
//  931     {
//  932       // We don't support any manufacturer specific command -- just forward it.
//  933       zcl_SendCommand( srcEP, &dstAddr, clusterID, hdr.commandID, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  934                        hdr.fc.disableDefaultRsp, hdr.manuCode, hdr.transSeqNum, dataLen, pData );
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine18 & 0xFFFF
//  935     }
??CrossCallReturnLabel_43:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 44)
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 46)
        MOV       A,R1
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 47)
        MOV       ?V1,#0x0
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 48)
        MOV       ?V1,#0x1
??zclSampleDoorLock_ProcessAppMsg_4:
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 49)
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 50)
        MOV       R4,?V4
        MOV       R5,?V5
        LJMP      ??zclSampleDoorLock_ProcessAppMsg_7 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 39)
//  936     else
//  937     {
//  938       if ( ZCL_CLUSTER_ID_GEN( clusterID ) )
??zclSampleDoorLock_ProcessAppMsg_6:
        CLR       C
        MOV       A,?V4
        SUBB      A,#0x16
        MOV       A,?V5
        SUBB      A,#0x0
        JC        $+5
        LJMP      ??zclSampleDoorLock_ProcessAppMsg_8 & 0xFFFF
//  939       {
//  940         zclSampleDoorLock_ProcessGeneralMsg( srcEP, &dstAddr, clusterID, &hdr, dataLen, pData );
        MOV       R0,#?V4
        LCALL     ?US_SWITCH_DENSE
`?<Jumptable for zclSampleDoorLock_ProcessAppMs_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA8
        DATA
        DATA8
        DB        5
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSampleDoorLock_ProcessAppMsg_5
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSampleDoorLock_ProcessAppMsg_9
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSampleDoorLock_ProcessAppMsg_5
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSampleDoorLock_ProcessAppMsg_5
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSampleDoorLock_ProcessAppMsg_5
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSampleDoorLock_ProcessAppMsg_10
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSampleDoorLock_ProcessAppMsg_11
        CODE
??zclSampleDoorLock_ProcessAppMsg_11:
        ; Setup parameters for call to function zclSampleDoorLock_ProcessSceneCmd
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 42)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 44)
        MOV       R4,#0x5
        MOV       R5,#0x0
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,?V0
        LCALL     `??zclSampleDoorLock_ProcessSceneCmd::?relay`; Banked call to: zclSampleDoorLock_ProcessSceneCmd
        LJMP      ??zclSampleDoorLock_ProcessAppMsg_12 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 39)
??zclSampleDoorLock_ProcessAppMsg_10:
        ; Setup parameters for call to function zclSampleDoorLock_ProcessGroupCmd
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 42)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 44)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,?V0
        LCALL     `??zclSampleDoorLock_ProcessGroupCmd::?relay`; Banked call to: zclSampleDoorLock_ProcessGroupCmd
        LJMP      ??zclSampleDoorLock_ProcessAppMsg_12 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 39)
??zclSampleDoorLock_ProcessAppMsg_9:
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        JZ        $+5
        LJMP      ??zclSampleDoorLock_ProcessAppMsg_5 & 0xFFFF
        ; Setup parameters for call to function zcl_SendCommand
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine18 & 0xFFFF
//  941       }
??CrossCallReturnLabel_45:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 44)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 46)
        MOV       A,R1
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 47)
        MOV       ?V1,#0x0
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 48)
        MOV       ?V1,#0x1
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 49)
        MOV       ?V1,#0x0
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 50)
        MOV       R4,#0x0
        MOV       R5,#0x0
??zclSampleDoorLock_ProcessAppMsg_7:
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,?V0
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
        SJMP      ??zclSampleDoorLock_ProcessAppMsg_5
//  942       else if ( ZCL_CLUSTER_ID_CLOSURES( clusterID ) )
??zclSampleDoorLock_ProcessAppMsg_8:
        MOV       A,?V4
        ADD       A,#0x0
        MOV       R0,A
        MOV       A,?V5
        ADDC      A,#-0x1
        MOV       R1,A
        CLR       C
        MOV       A,R0
        SUBB      A,#0x3
        MOV       A,R1
        SUBB      A,#0x0
        JNC       ??zclSampleDoorLock_ProcessAppMsg_5
//  943       {
//  944         zclSampleDoorLock_ProcessClosuresMsg( srcEP, &dstAddr, clusterID, &hdr, dataLen, pData );
        ; Setup parameters for call to function zclSampleDoorLock_ProcessClosuresMsg
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 42)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 44)
        MOV       R4,?V4
        MOV       R5,?V5
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,?V0
        LCALL     `??zclSampleDoorLock_ProcessClosuresMsg::?relay`; Banked call to: zclSampleDoorLock_ProcessClosuresMsg
??zclSampleDoorLock_ProcessAppMsg_12:
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
//  945       }
//  946     }
//  947   }
//  948 }
??zclSampleDoorLock_ProcessAppMsg_5:
        MOV       A,#0x17
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock24

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond25 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessAppMsg
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function zclSampleDoorLock_ProcessAppMsg
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function zclSampleDoorLock_ProcessAppMsg
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function zclSampleDoorLock_ProcessAppMsg
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 43)
          CFI Block cfiPicker29 Using cfiCommon1
          CFI (cfiPicker29) NoFunction
          CFI (cfiPicker29) Picker
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V1
        RET
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiPicker29

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond30 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessAppMsg
          CFI Conditional ??CrossCallReturnLabel_62
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiPicker32 Using cfiCommon1
          CFI (cfiPicker32) NoFunction
          CFI (cfiPicker32) Picker
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiPicker32
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine26_0:
          CFI Block cfiCond33 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessSceneCmd
          CFI Conditional ??CrossCallReturnLabel_61
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function zclSampleDoorLock_ProcessAppMsg
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiPicker36 Using cfiCommon1
          CFI (cfiPicker36) NoFunction
          CFI (cfiPicker36) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R2
        RET
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiPicker36
//  949 
//  950 /*********************************************************************
//  951  * @fn      zclSampleDoorLock_ProcessFoundationMsg
//  952  *
//  953  * @brief   Process Foundation message
//  954  *
//  955  * @param   srcEP - Sending Apps endpoint
//  956  * @param   dstAddr - where to send the request
//  957  * @param   clusterID - real cluster ID
//  958  * @param   hdr - pointer to the message header
//  959  * @param   len - length of the received message
//  960  * @param   data - received message
//  961  *
//  962  * @return  none
//  963  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  964 static void zclSampleDoorLock_ProcessFoundationMsg( afAddrType_t *dstAddr, uint16 clusterID,
zclSampleDoorLock_ProcessFoundationMsg:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessFoundationMsg
        CODE
//  965                                                 zclFrameHdr_t *hdr, zclParseCmd_t *pParseCmd )
//  966 {
        FUNCALL zclSampleDoorLock_ProcessFoundationMsg, zclParseInReadCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessFoundationMsg, zcl_SendRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessFoundationMsg, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessFoundationMsg, zclParseInWriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessFoundationMsg, zcl_SendWriteRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessFoundationMsg, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessFoundationMsg, zclParseInWriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessFoundationMsg, zcl_SendWriteRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessFoundationMsg, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessFoundationMsg, zclParseInWriteCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessFoundationMsg, zcl_SendWriteRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessFoundationMsg, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessFoundationMsg, zclParseInConfigReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessFoundationMsg, zcl_SendConfigReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessFoundationMsg, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessFoundationMsg, zclParseInReadReportCfgCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessFoundationMsg, zcl_SendReadReportCfgCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessFoundationMsg, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessFoundationMsg, zclParseInReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessFoundationMsg, zcl_SendReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessFoundationMsg, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessFoundationMsg, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
//  967 #if defined(ZCL_READ) || defined(ZCL_WRITE) || defined(ZCL_REPORT) || defined(ZCL_DISCOVER)
//  968   void *cmd;
//  969 #endif
//  970 
//  971   switch ( hdr->commandID )
        MOV       DPL,?V2
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,?V2
        ADD       A,#0x4
        MOV       ?V4,A
        CLR       A
        ADDC      A,?V3
        MOV       ?V5,A
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V7,A
        MOV       A,R1
        JZ        ??zclSampleDoorLock_ProcessFoundationMsg_0
        ADD       A,#-0x2
        JZ        ??zclSampleDoorLock_ProcessFoundationMsg_1
        DEC       A
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_2 & 0xFFFF
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_3 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_4 & 0xFFFF
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_5 & 0xFFFF
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_6 & 0xFFFF
        LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_7 & 0xFFFF
//  972   {
//  973 #ifdef ZCL_READ
//  974     case ZCL_CMD_READ:
//  975       cmd = zclParseInReadCmd( pParseCmd );
??zclSampleDoorLock_ProcessFoundationMsg_0:
        ; Setup parameters for call to function zclParseInReadCmd
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??zclParseInReadCmd::?relay`; Banked call to: zclParseInReadCmd
        MOV       ?V6,R2
        MOV       ?V7,R3
//  976       if ( cmd )
        MOV       A,R2
        ORL       A,?V7
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_8 & 0xFFFF
//  977       {
//  978         zcl_SendRead( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID, (zclReadCmd_t *)cmd,
//  979                       ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
        ; Setup parameters for call to function zcl_SendRead
        LCALL     ?Subroutine12 & 0xFFFF
//  980         osal_mem_free( cmd );
//  981       }
??CrossCallReturnLabel_28:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V2,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,#0x8
        LCALL     `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
        LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_9 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 18)
//  982       break;
//  983 #endif // ZCL_READ
//  984 
//  985 #ifdef ZCL_WRITE
//  986     case ZCL_CMD_WRITE:
//  987       cmd = zclParseInWriteCmd( pParseCmd );
??zclSampleDoorLock_ProcessFoundationMsg_1:
        ; Setup parameters for call to function zclParseInWriteCmd
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??zclParseInWriteCmd::?relay`; Banked call to: zclParseInWriteCmd
        MOV       ?V6,R2
        MOV       ?V7,R3
//  988       if ( cmd )
        MOV       A,R2
        ORL       A,?V7
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_8 & 0xFFFF
//  989       {
//  990         zcl_SendWrite( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID, (zclWriteCmd_t *)cmd,
//  991                        ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
        ; Setup parameters for call to function zcl_SendWriteRequest
        LCALL     ?Subroutine12 & 0xFFFF
//  992         osal_mem_free( cmd );
//  993       }
??CrossCallReturnLabel_29:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V2,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V2,#0x2
        SJMP      ??zclSampleDoorLock_ProcessFoundationMsg_10
          CFI CFA_XSP16 add(XSP16, 18)
//  994       break;
//  995 
//  996     case ZCL_CMD_WRITE_UNDIVIDED:
//  997       cmd = zclParseInWriteCmd( pParseCmd );
??zclSampleDoorLock_ProcessFoundationMsg_2:
        ; Setup parameters for call to function zclParseInWriteCmd
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??zclParseInWriteCmd::?relay`; Banked call to: zclParseInWriteCmd
        MOV       ?V6,R2
        MOV       ?V7,R3
//  998       if ( cmd )
        MOV       A,R2
        ORL       A,?V7
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_8 & 0xFFFF
//  999       {
// 1000         zcl_SendWriteUndivided( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID, (zclWriteCmd_t *)cmd,
// 1001                                 ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
        ; Setup parameters for call to function zcl_SendWriteRequest
        LCALL     ?Subroutine12 & 0xFFFF
// 1002         osal_mem_free( cmd );
// 1003       }
??CrossCallReturnLabel_30:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V2,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V2,#0x3
        SJMP      ??zclSampleDoorLock_ProcessFoundationMsg_10
          CFI CFA_XSP16 add(XSP16, 18)
// 1004       break;
// 1005 
// 1006     case ZCL_CMD_WRITE_NO_RSP:
// 1007       cmd = zclParseInWriteCmd( pParseCmd );
??zclSampleDoorLock_ProcessFoundationMsg_3:
        ; Setup parameters for call to function zclParseInWriteCmd
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??zclParseInWriteCmd::?relay`; Banked call to: zclParseInWriteCmd
        MOV       ?V6,R2
        MOV       ?V7,R3
// 1008       if ( cmd )
        MOV       A,R2
        ORL       A,?V7
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_8 & 0xFFFF
// 1009       {
// 1010         zcl_SendWriteNoRsp( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID, (zclWriteCmd_t *)cmd,
// 1011                             ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
        ; Setup parameters for call to function zcl_SendWriteRequest
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V2,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V2,#0x5
??zclSampleDoorLock_ProcessFoundationMsg_10:
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,#0x8
        LCALL     `??zcl_SendWriteRequest::?relay`; Banked call to: zcl_SendWriteRequest
        MOV       A,#0x6
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 1012         osal_mem_free( cmd );
        ; Setup parameters for call to function osal_mem_free
        LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_11 & 0xFFFF
// 1013       }
// 1014       break;
// 1015 #endif // ZCL_WRITE
// 1016 
// 1017 #ifdef ZCL_REPORT
// 1018     case ZCL_CMD_CONFIG_REPORT:
// 1019       cmd = zclParseInConfigReportCmd( pParseCmd );
??zclSampleDoorLock_ProcessFoundationMsg_4:
        ; Setup parameters for call to function zclParseInConfigReportCmd
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??zclParseInConfigReportCmd::?relay`; Banked call to: zclParseInConfigReportCmd
        MOV       ?V6,R2
        MOV       ?V7,R3
// 1020       if ( cmd )
        MOV       A,R2
        ORL       A,?V7
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_8 & 0xFFFF
// 1021       {
// 1022         zcl_SendConfigReportCmd( SAMPLEDOORLOCK_ENDPOINT, dstAddr,  clusterID, (zclCfgReportCmd_t *)cmd,
// 1023                                  ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
        ; Setup parameters for call to function zcl_SendConfigReportCmd
        LCALL     ?Subroutine12 & 0xFFFF
// 1024         osal_mem_free( cmd );
// 1025       }
??CrossCallReturnLabel_32:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V2,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,#0x8
        LCALL     `??zcl_SendConfigReportCmd::?relay`; Banked call to: zcl_SendConfigReportCmd
        SJMP      ??zclSampleDoorLock_ProcessFoundationMsg_9
          CFI CFA_XSP16 add(XSP16, 18)
// 1026       break;
// 1027 
// 1028     case ZCL_CMD_READ_REPORT_CFG:
// 1029       cmd = zclParseInReadReportCfgCmd( pParseCmd );
??zclSampleDoorLock_ProcessFoundationMsg_5:
        ; Setup parameters for call to function zclParseInReadReportCfgCmd
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??zclParseInReadReportCfgCmd::?relay`; Banked call to: zclParseInReadReportCfgCmd
        MOV       ?V6,R2
        MOV       ?V7,R3
// 1030       if ( cmd )
        MOV       A,R2
        ORL       A,?V7
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_8 & 0xFFFF
// 1031       {
// 1032         zcl_SendReadReportCfgCmd( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID, (zclReadReportCfgCmd_t *)cmd,
// 1033                                   ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
        ; Setup parameters for call to function zcl_SendReadReportCfgCmd
        LCALL     ?Subroutine12 & 0xFFFF
// 1034         osal_mem_free( cmd );
// 1035       }
??CrossCallReturnLabel_33:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V2,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,#0x8
        LCALL     `??zcl_SendReadReportCfgCmd::?relay`; Banked call to: zcl_SendReadReportCfgCmd
        SJMP      ??zclSampleDoorLock_ProcessFoundationMsg_9
          CFI CFA_XSP16 add(XSP16, 18)
// 1036       break;
// 1037 
// 1038     case ZCL_CMD_REPORT:
// 1039       cmd = zclParseInReportCmd( pParseCmd );
??zclSampleDoorLock_ProcessFoundationMsg_6:
        ; Setup parameters for call to function zclParseInReportCmd
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??zclParseInReportCmd::?relay`; Banked call to: zclParseInReportCmd
        MOV       ?V6,R2
        MOV       ?V7,R3
// 1040       if ( cmd )
        MOV       A,R2
        ORL       A,?V7
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_8 & 0xFFFF
// 1041       {
// 1042         zcl_SendReportCmd( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID, (zclReportCmd_t *)cmd,
// 1043                            ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
        ; Setup parameters for call to function zcl_SendReportCmd
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_34:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V2,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,#0x8
        LCALL     `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
??zclSampleDoorLock_ProcessFoundationMsg_9:
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 1044         osal_mem_free( cmd );
        ; Setup parameters for call to function osal_mem_free
??zclSampleDoorLock_ProcessFoundationMsg_11:
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zclSampleDoorLock_ProcessFoundationMsg_8
// 1045       }
// 1046       break;
// 1047 #endif // ZCL_REPORT
// 1048 #ifdef ZCL_DISCOVER
// 1049     case ZCL_CMD_DISCOVER_ATTRS:
// 1050       cmd = zclParseInDiscAttrsCmd( pParseCmd );
// 1051       if ( cmd )
// 1052       {
// 1053         zcl_SendDiscoverAttrsCmd( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID, (zclDiscoverAttrsCmd_t *)cmd,
// 1054                                   ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
// 1055         osal_mem_free( cmd );
// 1056       }
// 1057       break;
// 1058 #endif // ZCL_DISCOVER
// 1059 
// 1060     default:
// 1061       // Unsupported command -- just forward it.
// 1062       zcl_SendCommand( pParseCmd->endpoint, dstAddr, clusterID, hdr->commandID, FALSE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1063                        hdr->fc.disableDefaultRsp, 0, hdr->transSeqNum, pParseCmd->dataLen, pParseCmd->pData );
??zclSampleDoorLock_ProcessFoundationMsg_7:
        ; Setup parameters for call to function zcl_SendCommand
        MOV       DPL,?V6
        MOV       DPH,?V7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       DPL,?V6
        MOV       DPH,?V7
        INC       DPTR
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_35:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        CLR       A
        MOV       ?V4,A
        MOV       ?V5,A
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       ?V2,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       A,R1
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 1064       break;
// 1065   }
// 1066 }
??zclSampleDoorLock_ProcessFoundationMsg_8:
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock37

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond38 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessFoundationMsg
          CFI Conditional ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function zclSampleDoorLock_ProcessFoundationMsg
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function zclSampleDoorLock_ProcessFoundationMsg
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function zclSampleDoorLock_ProcessFoundationMsg
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function zclSampleDoorLock_ProcessFoundationMsg
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-2
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function zclSampleDoorLock_ProcessFoundationMsg
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function zclSampleDoorLock_ProcessFoundationMsg
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function zclSampleDoorLock_ProcessFoundationMsg
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker46 Using cfiCommon1
          CFI (cfiPicker46) NoFunction
          CFI (cfiPicker46) Picker
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       ?V4,A
        MOV       R0,#?V4
        RET
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiPicker46

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond47 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessFoundationMsg
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function zclSampleDoorLock_ProcessFoundationMsg
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function zclSampleDoorLock_ProcessFoundationMsg
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-2
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function zclSampleDoorLock_ProcessFoundationMsg
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function zclSampleDoorLock_ProcessFoundationMsg
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function zclSampleDoorLock_ProcessFoundationMsg
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function zclSampleDoorLock_ProcessFoundationMsg
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function zclSampleDoorLock_ProcessFoundationMsg
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker55 Using cfiCommon1
          CFI (cfiPicker55) NoFunction
          CFI (cfiPicker55) Picker
        MOV       DPL,?V2
        MOV       DPH,?V3
        LCALL     ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_65:
        MOV       ?V2,A
        MOV       R0,#?V2
        RET
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiPicker55
// 1067 
// 1068 /*********************************************************************
// 1069  * @fn      zclSampleDoorLock_ProcessGeneralMsg
// 1070  *
// 1071  * @brief   Process General Cluster message
// 1072  *
// 1073  * @param   srcEP - Sending Apps endpoint
// 1074  * @param   dstAddr - where to send the request
// 1075  * @param   clusterID - real cluster ID
// 1076  * @param   hdr - pointer to the message header
// 1077  * @param   len - length of the received message
// 1078  * @param   data - received message
// 1079  *
// 1080  * @return  none
// 1081  */
// 1082 static void zclSampleDoorLock_ProcessGeneralMsg( uint8 srcEP, afAddrType_t *dstAddr,
// 1083                   uint16 clusterID, zclFrameHdr_t *hdr, uint8 len, uint8 *data )
// 1084 {
// 1085   switch ( clusterID )
// 1086   {
// 1087 #ifdef ZCL_BASIC
// 1088     case ZCL_CLUSTER_ID_GEN_BASIC:
// 1089       if ( hdr->commandID == COMMAND_BASIC_RESET_FACT_DEFAULT )
// 1090       {
// 1091         zclGeneral_SendBasicResetFactoryDefaults( srcEP, dstAddr, hdr->fc.disableDefaultRsp,
// 1092                                                   hdr->transSeqNum );
// 1093       }
// 1094       break;
// 1095 #endif // ZCL_BASIC
// 1096 
// 1097 #ifdef ZCL_GROUPS
// 1098     case ZCL_CLUSTER_ID_GEN_GROUPS:
// 1099       zclSampleDoorLock_ProcessGroupCmd( srcEP, dstAddr, clusterID, hdr, len, data );
// 1100       break;
// 1101 #endif // ZCL_GROUPS
// 1102 
// 1103 #ifdef ZCL_SCENES
// 1104     case ZCL_CLUSTER_ID_GEN_SCENES:
// 1105       zclSampleDoorLock_ProcessSceneCmd( srcEP, dstAddr, clusterID, hdr, len, data  );
// 1106       break;
// 1107 #endif // ZCL_SCENES
// 1108 
// 1109     default:
// 1110       break;
// 1111   }
// 1112 }
// 1113 
// 1114 #ifdef ZCL_GROUPS
// 1115 /*********************************************************************
// 1116  * @fn      zclSampleDoorLock_ProcessGroupCmd
// 1117  *
// 1118  * @brief   Process Group Command
// 1119  *
// 1120  * @param   srcEP - Sending Apps endpoint
// 1121  * @param   dstAddr - where to send the request
// 1122  * @param   clusterID - real cluster ID
// 1123  * @param   hdr - pointer to the message header
// 1124  * @param   len - length of the received message
// 1125  * @param   data - received message
// 1126  *
// 1127  * @return  none
// 1128  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1129 static void zclSampleDoorLock_ProcessGroupCmd( uint8 srcEP, afAddrType_t *dstAddr,
zclSampleDoorLock_ProcessGroupCmd:
          CFI Block cfiBlock56 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessGroupCmd
        CODE
// 1130                   uint16 clusterID, zclFrameHdr_t *hdr, uint8 len, uint8 *data )
// 1131 {
        FUNCALL zclSampleDoorLock_ProcessGroupCmd, zclGeneral_SendAddGroupRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessGroupCmd, zclGeneral_SendGroupRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessGroupCmd, zclGeneral_SendGroupGetMembershipRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessGroupCmd, zclGeneral_SendGroupRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessGroupCmd, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessGroupCmd, zclGeneral_SendAddGroupRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessGroupCmd, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        MOV       A,#-0x11
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
        ; Saved register size: 17
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV       ?V0,R0
        MOV       ?V1,R1
// 1132   uint16 groupID;
// 1133   uint8 grpCnt;
// 1134   uint16 *grpList;
// 1135 
// 1136   switch ( hdr->commandID )
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V7,A
        MOV       DPL,?V6
        MOV       DPH,A
        INC       DPTR
        MOV       ?V4,DPL
        MOV       ?V5,DPH
        MOV       A,?V6
        ADD       A,#0x2
        MOV       ?V2,A
        CLR       A
        ADDC      A,?V7
        MOV       ?V3,A
        MOV       A,R1
        JZ        ??zclSampleDoorLock_ProcessGroupCmd_0
        DEC       A
        JZ        ??zclSampleDoorLock_ProcessGroupCmd_1
        DEC       A
        JZ        ??zclSampleDoorLock_ProcessGroupCmd_2
        DEC       A
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_ProcessGroupCmd_3 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_ProcessGroupCmd_4 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_ProcessGroupCmd_5 & 0xFFFF
        LJMP      ??zclSampleDoorLock_ProcessGroupCmd_6 & 0xFFFF
// 1137   {
// 1138     case COMMAND_GROUP_ADD:
// 1139       groupID =  BUILD_UINT16( data[0], data[1] );
// 1140       data += 2;
// 1141       zclGeneral_SendGroupAdd( srcEP, dstAddr, groupID, data,
// 1142                                hdr->fc.disableDefaultRsp, hdr->transSeqNum );
??zclSampleDoorLock_ProcessGroupCmd_0:
        ; Setup parameters for call to function zclGeneral_SendAddGroupRequest
        MOV       DPL,R0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V8,A
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_46:
        LJMP      ??zclSampleDoorLock_ProcessGroupCmd_7 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 17)
// 1143       break;
// 1144 
// 1145     case COMMAND_GROUP_VIEW:
// 1146       groupID =  BUILD_UINT16( data[0], data[1] );
// 1147       zclGeneral_SendGroupView( srcEP, dstAddr, groupID,
// 1148                                 hdr->fc.disableDefaultRsp, hdr->transSeqNum );
??zclSampleDoorLock_ProcessGroupCmd_1:
        ; Setup parameters for call to function zclGeneral_SendGroupRequest
        MOV       DPL,R0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_69:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV       R4,#0x1
        SJMP      ??zclSampleDoorLock_ProcessGroupCmd_8
          CFI CFA_XSP16 add(XSP16, 17)
// 1149       break;
// 1150 
// 1151     case COMMAND_GROUP_GET_MEMBERSHIP:
// 1152       grpCnt = data[0];
// 1153       grpList = (uint16 *)(&data[1]);
// 1154       zclGeneral_SendGroupGetMembership( srcEP, dstAddr, grpCnt, grpList,
// 1155                                          hdr->fc.disableDefaultRsp, hdr->transSeqNum );
??zclSampleDoorLock_ProcessGroupCmd_2:
        ; Setup parameters for call to function zclGeneral_SendGroupGetMembershipRequest
        MOV       DPL,R0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_70:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       DPL,?V6
        MOV       DPH,?V7
        LCALL     ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_90:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R5,#0x0
        MOV       R4,#0x2
        MOV       A,R6
        MOV       R1,A
        LCALL     `??zclGeneral_SendGroupGetMembershipRequest::?re`; Banked call to: zclGeneral_SendGroupGetMembershipRequest
        MOV       A,#0x7
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 1156       break;
        LJMP      ??zclSampleDoorLock_ProcessGroupCmd_9 & 0xFFFF
// 1157 
// 1158     case COMMAND_GROUP_REMOVE:
// 1159       groupID =  BUILD_UINT16( data[0], data[1] );
// 1160       zclGeneral_SendGroupRemove( srcEP,  dstAddr, groupID,
// 1161                                   hdr->fc.disableDefaultRsp, hdr->transSeqNum );
??zclSampleDoorLock_ProcessGroupCmd_3:
        ; Setup parameters for call to function zclGeneral_SendGroupRequest
        MOV       DPL,R0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_71:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_49:
        MOV       R4,#0x3
??zclSampleDoorLock_ProcessGroupCmd_8:
        MOV       A,R6
        MOV       R1,A
        LCALL     `??zclGeneral_SendGroupRequest::?relay`; Banked call to: zclGeneral_SendGroupRequest
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 1162       break;
        LJMP      ??zclSampleDoorLock_ProcessGroupCmd_9 & 0xFFFF
// 1163 
// 1164     case COMMAND_GROUP_REMOVE_ALL:
// 1165        zclGeneral_SendGroupRemoveAll( srcEP, dstAddr, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
??zclSampleDoorLock_ProcessGroupCmd_4:
        ; Setup parameters for call to function zcl_SendCommand
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_72:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        CLR       A
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       ?V0,#0x4
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R1,A
        SJMP      ??zclSampleDoorLock_ProcessGroupCmd_10
          CFI CFA_XSP16 add(XSP16, 17)
// 1166       break;
// 1167 
// 1168     case COMMAND_GROUP_ADD_IF_IDENTIFYING:
// 1169       groupID =  BUILD_UINT16( data[0], data[1] );
// 1170       data += 2;
// 1171       zclGeneral_SendGroupAddIfIdentifying( srcEP, dstAddr, groupID, data,
// 1172                                             hdr->fc.disableDefaultRsp,  hdr->transSeqNum );
??zclSampleDoorLock_ProcessGroupCmd_5:
        ; Setup parameters for call to function zclGeneral_SendAddGroupRequest
        MOV       DPL,R0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V8,A
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV       R4,#0x5
??zclSampleDoorLock_ProcessGroupCmd_7:
        MOV       A,R6
        MOV       R1,A
        LCALL     `??zclGeneral_SendAddGroupRequest::?relay`; Banked call to: zclGeneral_SendAddGroupRequest
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 1173       break;
        SJMP      ??zclSampleDoorLock_ProcessGroupCmd_9
// 1174 
// 1175     default:
// 1176       // Unsupported command -- just forward it.
// 1177       zcl_SendCommand( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID,
// 1178                        hdr->commandID, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1179                        hdr->fc.disableDefaultRsp, 0, hdr->transSeqNum, len, data );
??zclSampleDoorLock_ProcessGroupCmd_6:
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_73:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        CLR       A
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,R1
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R1,#0x8
??zclSampleDoorLock_ProcessGroupCmd_10:
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 1180       break;
// 1181   }
// 1182 }
??zclSampleDoorLock_ProcessGroupCmd_9:
          CFI EndBlock cfiBlock56
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock57 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x9
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock57

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond58 Using cfiCommon0
          CFI Function zclSampleDoorLock_event_loop
          CFI Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function zclSampleDoorLock_event_loop
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_41
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-4
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function zclSampleDoorLock_event_loop
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_55
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-4
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function zclSampleDoorLock_ProcessIdentifyTimeChange
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_56
          CFI (cfiCond61) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond61) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond61) CFA_SP SP+-9
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function zclSampleDoorLock_ProcessClosuresMsg
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_54
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+-4
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-2
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function zclSampleDoorLock_IdentifyCB
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond64) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond64) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond64) CFA_SP SP+-7
          CFI Block cfiPicker65 Using cfiCommon1
          CFI (cfiPicker65) NoFunction
          CFI (cfiPicker65) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiPicker65

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond66 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessGroupCmd
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-2
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-2
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-2
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker70 Using cfiCommon1
          CFI (cfiPicker70) NoFunction
          CFI (cfiPicker70) Picker
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R0,A
        CLR       A
        XCH       A,R0
        MOV       R1,A
        MOV       A,R4
        ADD       A,R0
        MOV       ?V2,A
        CLR       A
        ADDC      A,R1
        MOV       ?V3,A
        MOV       R0,#?V2
        RET
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiPicker70
// 1183 #endif // ZCL_GROUPS
// 1184 
// 1185 #ifdef ZCL_SCENES
// 1186 /*********************************************************************
// 1187  * @fn      zclSampleDoorLock_ProcessSceneCmd
// 1188  *
// 1189  * @brief   Process Scene Command
// 1190  *
// 1191  * @param   srcEP - Sending Apps endpoint
// 1192  * @param   dstAddr - where to send the request
// 1193  * @param   clusterID - real cluster ID
// 1194  * @param   hdr - pointer to the message header
// 1195  * @param   len - length of the received message
// 1196  * @param   data - received message
// 1197  *
// 1198  * @return  none
// 1199  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1200 static void zclSampleDoorLock_ProcessSceneCmd( uint8 srcEP, afAddrType_t *dstAddr,
zclSampleDoorLock_ProcessSceneCmd:
          CFI Block cfiBlock71 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessSceneCmd
        CODE
// 1201                   uint16 clusterID, zclFrameHdr_t *hdr, uint8 len, uint8 *data )
// 1202 {
        FUNCALL zclSampleDoorLock_ProcessSceneCmd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 77, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 77, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessSceneCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 80, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 80, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessSceneCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 80, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 80, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessSceneCmd, zclGeneral_SendAddSceneRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 80, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 80, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessSceneCmd, zclGeneral_SendSceneRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessSceneCmd, zclGeneral_SendSceneRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessSceneCmd, zclGeneral_SendSceneRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessSceneCmd, zclGeneral_SendSceneRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessSceneCmd, zclGeneral_SendSceneRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessSceneCmd, zclGeneral_SendSceneRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessSceneCmd, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 88, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 88, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV       A,#-0x16
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 55
        MOV       A,#-0x37
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 77)
        MOV       ?V7,R1
        MOV       ?V8,R2
        MOV       ?V9,R3
        MOV       ?V4,R4
        MOV       ?V5,R5
// 1203   zclGeneral_Scene_t scene;
// 1204   uint8 *pData = data;
// 1205   uint8 nameLen;
// 1206 
// 1207   osal_memset( (uint8*)&scene, 0, sizeof( zclGeneral_Scene_t ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x37
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
        MOV       A,#0x50
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V12,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V13,A
// 1208 
// 1209   scene.groupID = BUILD_UINT16( pData[0], pData[1] );
        MOV       DPL,?V12
        MOV       DPH,A
        LCALL     ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 1210   pData += 2;   // Move past group ID
        MOV       A,?V12
        ADD       A,#0x2
        MOV       R6,A
        CLR       A
        ADDC      A,?V13
        MOV       R7,A
// 1211   scene.ID = *pData++;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R5
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
        MOV       A,#0x4d
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine11 & 0xFFFF
// 1212 
// 1213   switch ( hdr->commandID )
??CrossCallReturnLabel_26:
        MOV       ?V2,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V3,A
        MOV       A,#0x4f
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V11,A
        MOV       A,R1
        JZ        ??zclSampleDoorLock_ProcessSceneCmd_0
        DEC       A
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_ProcessSceneCmd_1 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_ProcessSceneCmd_2 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_ProcessSceneCmd_3 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_ProcessSceneCmd_4 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_ProcessSceneCmd_5 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_ProcessSceneCmd_6 & 0xFFFF
        LJMP      ??zclSampleDoorLock_ProcessSceneCmd_7 & 0xFFFF
// 1214   {
// 1215     case COMMAND_SCENE_ADD:
// 1216       // Parse the rest of the incoming message
// 1217       scene.transTime = BUILD_UINT16( pData[0], pData[1] );
??zclSampleDoorLock_ProcessSceneCmd_0:
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV       R0,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine4 & 0xFFFF
// 1218       pData += 2;
// 1219       nameLen = *pData++; // Name length
??CrossCallReturnLabel_1:
        MOV       ?V10,A
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        JNC       ??zclSampleDoorLock_ProcessSceneCmd_8
        INC       R7
// 1220       if ( nameLen > (ZCL_SCENE_NAME_LEN-1) )
??zclSampleDoorLock_ProcessSceneCmd_8:
        MOV       A,?V10
        CLR       C
        SUBB      A,#0x10
        MOV       A,#0x7
        JC        ??zclSampleDoorLock_ProcessSceneCmd_9
// 1221       {
// 1222         scene.name[0] = ZCL_SCENE_NAME_LEN-1;
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xf
        SJMP      ??zclSampleDoorLock_ProcessSceneCmd_10
// 1223       }
// 1224       else
// 1225       {
// 1226         scene.name[0] = nameLen;
??zclSampleDoorLock_ProcessSceneCmd_9:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V10
??zclSampleDoorLock_ProcessSceneCmd_10:
        MOVX      @DPTR,A
// 1227       }
// 1228       osal_memcpy( &(scene.name[1]), pData, scene.name[0] );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 80)
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 77)
// 1229       pData += nameLen; // move past name, use original length
        MOV       R0,?V10
        MOV       A,R6
        ADD       A,R0
        MOV       R6,A
        CLR       A
        ADDC      A,R7
        MOV       R7,A
// 1230 
// 1231       // Add the extension field(s)
// 1232       scene.extLen = len - ( (uint8)( pData - data ) );
        MOV       A,R6
        MOV       R0,A
        MOV       A,?V11
        CLR       C
        SUBB      A,R0
        ADD       A,?V12
        MOV       R0,A
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
// 1233       if ( scene.extLen > 0 )
        JZ        ??zclSampleDoorLock_ProcessSceneCmd_11
// 1234       {
// 1235         // Copy the extention field(s)
// 1236         if ( scene.extLen > ZCL_GEN_SCENE_EXT_LEN )
        CLR       C
        SUBB      A,#0x20
        JC        ??zclSampleDoorLock_ProcessSceneCmd_12
// 1237         {
// 1238           scene.extLen = ZCL_GEN_SCENE_EXT_LEN;
        MOV       A,#0x1f
        MOVX      @DPTR,A
// 1239         }
// 1240         osal_memcpy( scene.extField, pData, scene.extLen );
??zclSampleDoorLock_ProcessSceneCmd_12:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 80)
        MOV       A,#0x1a
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,#0x1b
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 77)
// 1241       }
// 1242 
// 1243       zclGeneral_SendAddScene( srcEP, dstAddr, &scene,
// 1244                                hdr->fc.disableDefaultRsp, hdr->transSeqNum );
??zclSampleDoorLock_ProcessSceneCmd_11:
        ; Setup parameters for call to function zclGeneral_SendAddSceneRequest
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_75:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 80)
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV       R2,?V8
        MOV       R3,?V9
        MOV       R1,?V7
        LCALL     `??zclGeneral_SendAddSceneRequest::?relay`; Banked call to: zclGeneral_SendAddSceneRequest
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 77)
// 1245       break;
        LJMP      ??zclSampleDoorLock_ProcessSceneCmd_13 & 0xFFFF
// 1246 
// 1247     case COMMAND_SCENE_VIEW:
// 1248       zclGeneral_SendSceneView( srcEP, dstAddr, scene.groupID, scene.ID,
// 1249                                 hdr->fc.disableDefaultRsp, hdr->transSeqNum );
??zclSampleDoorLock_ProcessSceneCmd_1:
        ; Setup parameters for call to function zclGeneral_SendSceneRequest
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_76:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       R4,#0x1
        SJMP      ??zclSampleDoorLock_ProcessSceneCmd_14
          CFI CFA_XSP16 add(XSP16, 77)
// 1250       break;
// 1251 
// 1252     case COMMAND_SCENE_REMOVE:
// 1253       zclGeneral_SendSceneRemove( srcEP, dstAddr, scene.groupID, scene.ID,
// 1254                                   hdr->fc.disableDefaultRsp, hdr->transSeqNum );
??zclSampleDoorLock_ProcessSceneCmd_2:
        ; Setup parameters for call to function zclGeneral_SendSceneRequest
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_77:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       R4,#0x2
        SJMP      ??zclSampleDoorLock_ProcessSceneCmd_14
          CFI CFA_XSP16 add(XSP16, 77)
// 1255       break;
// 1256 
// 1257     case COMMAND_SCENE_REMOVE_ALL:
// 1258       zclGeneral_SendSceneRemoveAll( srcEP, dstAddr, scene.groupID,
// 1259                                      hdr->fc.disableDefaultRsp, hdr->transSeqNum );
??zclSampleDoorLock_ProcessSceneCmd_3:
        ; Setup parameters for call to function zclGeneral_SendSceneRequest
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_78:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       R5,#0x0
        MOV       R4,#0x3
        SJMP      ??zclSampleDoorLock_ProcessSceneCmd_14
          CFI CFA_XSP16 add(XSP16, 77)
// 1260       break;
// 1261 
// 1262     case COMMAND_SCENE_STORE:
// 1263       zclGeneral_SendSceneStore( srcEP, dstAddr, scene.groupID, scene.ID,
// 1264                                  hdr->fc.disableDefaultRsp, hdr->transSeqNum );
??zclSampleDoorLock_ProcessSceneCmd_4:
        ; Setup parameters for call to function zclGeneral_SendSceneRequest
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_79:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       R4,#0x4
        SJMP      ??zclSampleDoorLock_ProcessSceneCmd_14
          CFI CFA_XSP16 add(XSP16, 77)
// 1265       break;
// 1266 
// 1267     case COMMAND_SCENE_RECALL:
// 1268       zclGeneral_SendSceneRecall( srcEP, dstAddr, scene.groupID, scene.ID,
// 1269                                   hdr->fc.disableDefaultRsp, hdr->transSeqNum );
??zclSampleDoorLock_ProcessSceneCmd_5:
        ; Setup parameters for call to function zclGeneral_SendSceneRequest
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_80:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       R4,#0x5
        SJMP      ??zclSampleDoorLock_ProcessSceneCmd_14
          CFI CFA_XSP16 add(XSP16, 77)
// 1270       break;
// 1271 
// 1272     case COMMAND_SCENE_GET_MEMBERSHIP:
// 1273       zclGeneral_SendSceneGetMembership( srcEP, dstAddr, scene.groupID,
// 1274                                          hdr->fc.disableDefaultRsp, hdr->transSeqNum );
??zclSampleDoorLock_ProcessSceneCmd_6:
        ; Setup parameters for call to function zclGeneral_SendSceneRequest
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_81:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 78)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       R5,#0x0
        MOV       R4,#0x6
??zclSampleDoorLock_ProcessSceneCmd_14:
        MOV       R2,?V8
        MOV       R3,?V9
        MOV       R1,?V7
        LCALL     `??zclGeneral_SendSceneRequest::?relay`; Banked call to: zclGeneral_SendSceneRequest
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 77)
// 1275       break;
        SJMP      ??zclSampleDoorLock_ProcessSceneCmd_13
// 1276 
// 1277     default:
// 1278       // Unsupported command -- just forward it.
// 1279       zcl_SendCommand( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID,
// 1280                        hdr->commandID, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1281                        hdr->fc.disableDefaultRsp, 0, hdr->transSeqNum, len, data );
??zclSampleDoorLock_ProcessSceneCmd_7:
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,#?V12
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 79)
        MOV       A,?V11
        MOV       ?V10,A
        MOV       ?V11,#0x0
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 81)
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_82:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 82)
        CLR       A
        MOV       ?V2,A
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 84)
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 85)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 86)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 87)
        MOV       A,R1
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 88)
        MOV       R4,?V4
        MOV       R5,?V5
        MOV       R2,?V8
        MOV       R3,?V9
        MOV       R1,#0x8
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 77)
// 1282       break;
// 1283   }
// 1284 }
??zclSampleDoorLock_ProcessSceneCmd_13:
        MOV       A,#0x37
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R7,#0xe
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock71

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond72 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessGroupCmd
          CFI Conditional ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond73) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-2
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 80)
          CFI Block cfiPicker74 Using cfiCommon1
          CFI (cfiPicker74) NoFunction
          CFI (cfiPicker74) Picker
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_67:
        MOV       R5,A
        MOV       R4,#0x0
        RET
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiPicker74

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond75 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessGroupCmd
          CFI Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_47
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond76) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-4
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 80)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_4
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-4
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_5
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-4
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_6
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-4
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_7
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond80) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond80) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond80) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-4
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_8
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond81) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-4
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_9
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-4
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_10
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond83) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond83) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond83) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-4
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_11
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond84) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-4
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_12
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-4
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_13
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-4
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 84)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_48
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-4
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_49
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-4
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_50
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-4
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function zclSampleDoorLock_ProcessClosuresMsg
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_51
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-4
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker91 Using cfiCommon1
          CFI (cfiPicker91) NoFunction
          CFI (cfiPicker91) Picker
        MOV       DPL,?V0
        MOV       DPH,?V1
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiPicker91
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine27_0:
          CFI Block cfiCond92 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessAppMsg
          CFI Conditional ??CrossCallReturnLabel_64
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function zclSampleDoorLock_ProcessFoundationMsg
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_18
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-4
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function zclSampleDoorLock_ProcessFoundationMsg
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_19
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-4
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function zclSampleDoorLock_ProcessFoundationMsg
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_20
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-4
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function zclSampleDoorLock_ProcessFoundationMsg
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_21
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-4
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function zclSampleDoorLock_ProcessFoundationMsg
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_22
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-4
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function zclSampleDoorLock_ProcessFoundationMsg
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_23
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-4
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function zclSampleDoorLock_ProcessFoundationMsg
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_24
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-4
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function zclSampleDoorLock_ProcessFoundationMsg
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_25
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-4
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_46
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-4
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_47
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond102) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond102) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-4
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 80)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_4
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-4
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_5
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-4
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_6
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-4
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_7
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond106) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-4
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_8
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond107) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond107) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond107) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond107) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-4
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_9
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond108) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond108) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-4
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_10
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond109) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond109) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond109) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-4
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_11
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond110) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond110) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond110) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond110) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond110) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-4
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_12
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond111) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond111) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond111) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond111) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-4
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_13
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond112) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond112) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond112) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-4
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 84)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_48
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-4
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_49
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-4
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_50
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-4
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function zclSampleDoorLock_ProcessClosuresMsg
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_51
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-4
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker117 Using cfiCommon1
          CFI (cfiPicker117) NoFunction
          CFI (cfiPicker117) Picker
        MOVX      A,@DPTR
        SWAP      A
        ANL       A,#0xf
        ANL       A,#0x1
        RET
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiPicker117

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond118 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessGroupCmd
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-2
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-2
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond121) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond121) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond121) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond121) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-2
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond122) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-2
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-2
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond124) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond124) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond124) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond124) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond124) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-2
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond125) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-2
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond126) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond127) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond127) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond127) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond127) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond127) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond127) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond127) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond127) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-2
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 84)
          CFI Block cfiPicker128 Using cfiCommon1
          CFI (cfiPicker128) NoFunction
          CFI (cfiPicker128) Picker
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV       ?V0,A
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiPicker128

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond129 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessAppMsg
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-2
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiPicker131 Using cfiCommon1
          CFI (cfiPicker131) NoFunction
          CFI (cfiPicker131) Picker
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiPicker131
// 1285 #endif // ZCL_SCENES
// 1286 
// 1287 /*********************************************************************
// 1288  * @fn      zclSampleDoorLock_ProcessClosuresMsg
// 1289  *
// 1290  * @brief   Process Closures Cluster Command
// 1291  *
// 1292  * @param   srcEP - Sending Apps endpoint
// 1293  * @param   dstAddr - where to send the request
// 1294  * @param   clusterID - real cluster ID
// 1295  * @param   hdr - pointer to the message header
// 1296  * @param   len - length of the received message
// 1297  * @param   data - received message
// 1298  *
// 1299  * @return  none
// 1300  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1301 static void zclSampleDoorLock_ProcessClosuresMsg( uint8 srcEP, afAddrType_t *dstAddr,
zclSampleDoorLock_ProcessClosuresMsg:
          CFI Block cfiBlock132 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessClosuresMsg
        CODE
// 1302                                                   uint16 clusterID, zclFrameHdr_t *hdr,
// 1303                                                   uint8 len, uint8 *data )
// 1304 {
        FUNCALL zclSampleDoorLock_ProcessClosuresMsg, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessClosuresMsg, zclClosures_SendDoorLockRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessClosuresMsg, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessClosuresMsg, zclClosures_SendDoorLockStatusResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessClosuresMsg, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        MOV       A,#-0x11
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
        ; Saved register size: 17
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       ?V8,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine11 & 0xFFFF
// 1305 #ifdef ZCL_DOORLOCK
// 1306 
// 1307   uint8 i;
// 1308   uint16 calculatedArraySize;
// 1309 
// 1310   // Client-to-Server
// 1311   if ( zcl_ServerCmd( hdr->fc.direction ) )
??CrossCallReturnLabel_27:
        MOV       ?V4,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V5,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       A,R2
        ANL       A,#0x8
        JZ        $+5
        LJMP      ??zclSampleDoorLock_ProcessClosuresMsg_0 & 0xFFFF
// 1312   {
// 1313     switch( hdr->commandID )
        MOV       A,#0x2
        XRL       A,R1
        JZ        $+5
        LJMP      ??zclSampleDoorLock_ProcessClosuresMsg_1 & 0xFFFF
// 1314     {
// 1315       case COMMAND_CLOSURES_TOGGLE_DOOR:
// 1316       {
// 1317         zclDoorLock_t cmd;
// 1318 
// 1319         // first octet of PIN/RFID Code variable string identifies its length
// 1320         calculatedArraySize = data[0] + 1;
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOV       ?V6,A
        CLR       A
        ADDC      A,#0x0
        MOV       ?V7,A
// 1321 
// 1322         cmd.pPinRfidCode = osal_mem_alloc( calculatedArraySize );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,?V6
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1323         if( !cmd.pPinRfidCode )
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_54:
        JNZ       $+5
        LJMP      ??zclSampleDoorLock_ProcessClosuresMsg_2 & 0xFFFF
// 1324         {
// 1325           return;  // no memory
// 1326         }
// 1327 
// 1328         for( i = 0; i < calculatedArraySize; i++ )
        MOV       R2,#0x0
// 1329         {
// 1330           cmd.pPinRfidCode[i] = data[i];
??zclSampleDoorLock_ProcessClosuresMsg_3:
        MOV       A,R2
        MOV       R0,A
        MOV       A,?V2
        ADD       A,R0
        MOV       DPL,A
        CLR       A
        ADDC      A,?V3
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R3,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       DPL,R3
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1331         }
        INC       R2
        MOV       A,R2
        CLR       C
        SUBB      A,?V6
        CLR       A
        SUBB      A,?V7
        JC        ??zclSampleDoorLock_ProcessClosuresMsg_3
// 1332 
// 1333         zclClosures_SendDoorLockToggleDoor( srcEP, dstAddr, &cmd, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
        ; Setup parameters for call to function zclClosures_SendDoorLockRequest
        MOV       DPL,?V4
        MOV       DPH,?V5
        LCALL     ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_74:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_51:
        MOV       R4,#0x2
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,?V8
        LCALL     `??zclClosures_SendDoorLockRequest::?relay`; Banked call to: zclClosures_SendDoorLockRequest
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 1334         osal_mem_free( cmd.pPinRfidCode );
        ; Setup parameters for call to function osal_mem_free
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1335         break;
        SJMP      ??zclSampleDoorLock_ProcessClosuresMsg_2
// 1336       }
// 1337 
// 1338       default:
// 1339         // Unsupported command -- just forward it.
// 1340         zcl_SendCommand( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID,
// 1341                          hdr->commandID, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1342                          hdr->fc.disableDefaultRsp, 0, hdr->transSeqNum, len, data );
// 1343         break;
// 1344     }
// 1345   }
// 1346   // Server-to-Client
// 1347   else
// 1348   {
// 1349     switch( hdr->commandID )
??zclSampleDoorLock_ProcessClosuresMsg_0:
        MOV       A,#0x2
        XRL       A,R1
        JNZ       ??zclSampleDoorLock_ProcessClosuresMsg_1
// 1350     {
// 1351       case COMMAND_CLOSURES_TOGGLE_DOOR_RSP:
// 1352         zclClosures_SendDoorLockToggleDoorRsp( srcEP, dstAddr, data[0], hdr->fc.disableDefaultRsp, hdr->transSeqNum );
        ; Setup parameters for call to function zclClosures_SendDoorLockStatusResponse
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_91:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_52:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       R4,#0x2
        MOV       A,R6
        MOV       R2,A
        MOV       R1,?V8
        LCALL     `??zclClosures_SendDoorLockStatusResponse::?rela`; Banked call to: zclClosures_SendDoorLockStatusResponse
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 1353         break;
        SJMP      ??zclSampleDoorLock_ProcessClosuresMsg_2
// 1354 
// 1355       default:
// 1356         // Unsupported command -- just forward it.
// 1357         zcl_SendCommand( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID,
// 1358                          hdr->commandID, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1359                          hdr->fc.disableDefaultRsp, 0, hdr->transSeqNum, len, data );
??zclSampleDoorLock_ProcessClosuresMsg_1:
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_92:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       A,R1
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R6
        MOV       R2,A
        MOV       R1,#0x8
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 1360         break;
// 1361     }
// 1362   }
// 1363 
// 1364 #else
// 1365   // Unsupported command -- just forward it.
// 1366   zcl_SendCommand( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID,
// 1367                    hdr->commandID, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1368                    hdr->fc.disableDefaultRsp, 0, hdr->transSeqNum, len, data );
// 1369 #endif // ZCL_DOORLOCK
// 1370 }
??zclSampleDoorLock_ProcessClosuresMsg_2:
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock132

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond133 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessClosuresMsg
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function zclSampleDoorLock_ProcessClosuresMsg
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-2
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker135 Using cfiCommon1
          CFI (cfiPicker135) NoFunction
          CFI (cfiPicker135) Picker
        MOV       A,R2
        SWAP      A
        ANL       A,#0xf
        ANL       A,#0x1
        MOV       ?V0,A
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiPicker135

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond136 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessGroupCmd
          CFI Conditional ??CrossCallReturnLabel_48
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-2
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function zclSampleDoorLock_ProcessClosuresMsg
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-2
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker140 Using cfiCommon1
          CFI (cfiPicker140) NoFunction
          CFI (cfiPicker140) Picker
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_68:
        MOV       R5,A
        RET
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiPicker140

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond141 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessSceneCmd
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function zclSampleDoorLock_ProcessClosuresMsg
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-2
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker143 Using cfiCommon1
          CFI (cfiPicker143) NoFunction
          CFI (cfiPicker143) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       DPL,?V0
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,?V0
        ADD       A,#0x4
        RET
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiPicker143

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond144 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessSceneCmd
          CFI Conditional ??CrossCallReturnLabel_75
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond145) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-2
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond146) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond146) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-2
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond147) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond147) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond147) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond147) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-2
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond148) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-2
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond149) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-2
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond150) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond150) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond150) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-2
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond151) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond151) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-2
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker152 Using cfiCommon1
          CFI (cfiPicker152) NoFunction
          CFI (cfiPicker152) Picker
        MOV       DPL,?V2
        MOV       DPH,?V3
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiPicker152
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine28_0:
          CFI Block cfiCond153 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessGroupCmd
          CFI Conditional ??CrossCallReturnLabel_69
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-2
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-2
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-2
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function zclSampleDoorLock_ProcessGroupCmd
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-2
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function zclSampleDoorLock_ProcessClosuresMsg
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-2
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond159) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond159) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond159) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond159) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond159) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond159) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond159) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-2
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond160) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond160) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-2
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond161) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond161) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond161) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond161) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond161) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond161) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond161) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-2
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond162) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond162) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond162) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond162) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond162) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-2
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond163) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond163) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond163) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond163) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-2
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond164) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond164) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-2
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond165) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond165) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-2
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 77)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function zclSampleDoorLock_ProcessSceneCmd
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond166) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond166) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond166) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-2
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 81)
          CFI Block cfiPicker167 Using cfiCommon1
          CFI (cfiPicker167) NoFunction
          CFI (cfiPicker167) Picker
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       R0,#?V2
        RET
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiPicker167
// 1371 
// 1372 /*********************************************************************
// 1373  * @fn      zclSampleDoorLock_ProcessIdentifyTimeChange
// 1374  *
// 1375  * @brief   Called to process any change to the IdentifyTime attribute.
// 1376  *
// 1377  * @param   none
// 1378  *
// 1379  * @return  none
// 1380  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1381 static void zclSampleDoorLock_ProcessIdentifyTimeChange( void )
zclSampleDoorLock_ProcessIdentifyTimeChange:
          CFI Block cfiBlock168 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessIdentifyTimeChange
        CODE
// 1382 {
        FUNCALL zclSampleDoorLock_ProcessIdentifyTimeChange, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessIdentifyTimeChange, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_ProcessIdentifyTimeChange, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1383   if ( zclSampleDoorLock_IdentifyTime > 0 )
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_56:
        JZ        ??zclSampleDoorLock_ProcessIdentifyTimeChange_0
// 1384   {
// 1385     osal_start_timerEx( zclSampleDoorLock_TaskID, SAMPLEDOORLOCK_IDENTIFY_TIMEOUT_EVT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_3e8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 4)
        MOV       R2,#0x1
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleDoorLock_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
// 1386     HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
        ; Setup parameters for call to function HalLedBlink
        MOV       R4,#-0x18
        MOV       R5,#0x3
        MOV       R3,#0x5
        MOV       R2,#-0x1
        MOV       R1,#0x8
        LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
        SJMP      ??zclSampleDoorLock_ProcessIdentifyTimeChange_1
// 1387   }
// 1388   else
// 1389   {
// 1390     if ( zclSampleDoorLock_OnOff )
??zclSampleDoorLock_ProcessIdentifyTimeChange_0:
        MOV       DPTR,#zclSampleDoorLock_OnOff
        MOVX      A,@DPTR
        JZ        ??zclSampleDoorLock_ProcessIdentifyTimeChange_2
// 1391       HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x1
        SJMP      ??zclSampleDoorLock_ProcessIdentifyTimeChange_3
// 1392     else
// 1393       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
??zclSampleDoorLock_ProcessIdentifyTimeChange_2:
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x0
??zclSampleDoorLock_ProcessIdentifyTimeChange_3:
        MOV       R1,#0x8
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
// 1394     osal_stop_timerEx( zclSampleDoorLock_TaskID, SAMPLEDOORLOCK_IDENTIFY_TIMEOUT_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x1
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleDoorLock_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 1395   }
// 1396 }
??zclSampleDoorLock_ProcessIdentifyTimeChange_1:
        SJMP      ?Subroutine0
          CFI EndBlock cfiBlock168
// 1397 
// 1398 /*********************************************************************
// 1399  * @fn      zclSampleDoorLock_BasicResetCB
// 1400  *
// 1401  * @brief   Callback from the ZCL General Cluster Library
// 1402  *          to set all the Basic Cluster attributes to default values.
// 1403  *
// 1404  * @param   none
// 1405  *
// 1406  * @return  none
// 1407  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1408 static void zclSampleDoorLock_BasicResetCB( void )
zclSampleDoorLock_BasicResetCB:
          CFI Block cfiBlock169 Using cfiCommon0
          CFI Function zclSampleDoorLock_BasicResetCB
        CODE
// 1409 {
        FUNCALL zclSampleDoorLock_BasicResetCB, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_BasicResetCB, MT_SysCommandProcessing
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1410   // Put device back to factory default settings
// 1411   zgWriteStartupOptions( ZG_STARTUP_SET, 3 );   // bit set both default configuration and default network
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x3
        MOV       R1,#-0x1
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
// 1412 
// 1413   // restart device
// 1414   MT_SysCommandProcessing( aProcessCmd );
        ; Setup parameters for call to function MT_SysCommandProcessing
        MOV       R2,#aProcessCmd & 0xff
        MOV       R3,#(aProcessCmd >> 8) & 0xff
        LCALL     `??MT_SysCommandProcessing::?relay`; Banked call to: MT_SysCommandProcessing
// 1415 }
          CFI EndBlock cfiBlock169
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock170 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock170
// 1416 
// 1417 /*********************************************************************
// 1418  * @fn      zclSampleDoorLock_IdentifyCB
// 1419  *
// 1420  * @brief   Callback from the ZCL General Cluster Library when
// 1421  *          it received an Identity Command for this application.
// 1422  *
// 1423  * @param   srcAddr - source address and endpoint of the response message
// 1424  * @param   identifyTime - the number of seconds to identify yourself
// 1425  *
// 1426  * @return  none
// 1427  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1428 static void zclSampleDoorLock_IdentifyCB( zclIdentify_t *pCmd )
zclSampleDoorLock_IdentifyCB:
          CFI Block cfiBlock171 Using cfiCommon0
          CFI Function zclSampleDoorLock_IdentifyCB
        CODE
// 1429 {
        FUNCALL zclSampleDoorLock_IdentifyCB, zclSampleDoorLock_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1430   zclSampleDoorLock_IdentifyTime = pCmd->identifyTime;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV       DPTR,#zclSampleDoorLock_IdentifyTime
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 1431   zclSampleDoorLock_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleDoorLock_ProcessIdentifyTimeChange
        LCALL     `??zclSampleDoorLock_ProcessIdentifyTimeChange::`; Banked call to: zclSampleDoorLock_ProcessIdentifyTimeChange
// 1432 }
        SJMP      ?Subroutine0
          CFI EndBlock cfiBlock171
// 1433 
// 1434 /*********************************************************************
// 1435  * @fn      zclSampleDoorLock_IdentifyQueryRspCB
// 1436  *
// 1437  * @brief   Callback from the ZCL General Cluster Library when
// 1438  *          it received an Identity Query Response Command for this application.
// 1439  *
// 1440  * @param   srcAddr - requestor's address
// 1441  * @param   timeout - number of seconds to identify yourself (valid for query response)
// 1442  *
// 1443  * @return  none
// 1444  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1445 static void zclSampleDoorLock_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
zclSampleDoorLock_IdentifyQueryRspCB:
          CFI Block cfiBlock172 Using cfiCommon0
          CFI Function zclSampleDoorLock_IdentifyQueryRspCB
        CODE
// 1446 {
        FUNCALL zclSampleDoorLock_IdentifyQueryRspCB, zcl_EZModeAction
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
// 1447   // Query Response (with timeout value)
// 1448   (void)pRsp;
// 1449 #ifdef ZCL_EZMODE
// 1450   {
// 1451     zclEZMode_ActionData_t data;
// 1452     data.pIdentifyQueryRsp = pRsp;
        LCALL     ?Subroutine5 & 0xFFFF
// 1453     zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
// 1454   }
??CrossCallReturnLabel_2:
        MOV       R1,#0x4
        LCALL     `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
// 1455 #endif
// 1456 }
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        SJMP      ?Subroutine0
          CFI EndBlock cfiBlock172

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond173 Using cfiCommon0
          CFI Function zclSampleDoorLock_event_loop
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function zclSampleDoorLock_IdentifyQueryRspCB
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond174) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond174) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond174) CFA_SP SP+-7
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 2)
          CFI Block cfiPicker175 Using cfiCommon1
          CFI (cfiPicker175) NoFunction
          CFI (cfiPicker175) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        ; Setup parameters for call to function zcl_EZModeAction
        ; Setup parameters for call to function zcl_EZModeAction
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        RET
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiPicker175
// 1457 
// 1458 #if 0
// 1459 /*********************************************************************
// 1460  * @fn      zclSampleDoorLock_OnOffCB
// 1461  *
// 1462  * @brief   Callback from the ZCL General Cluster Library when
// 1463  *          it received an On/Off Command for this application.
// 1464  *
// 1465  * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
// 1466  *
// 1467  * @return  none
// 1468  */
// 1469 static void zclSampleDoorLock_OnOffCB( uint8 cmd )
// 1470 {
// 1471   // Turn on the light
// 1472   if ( cmd == COMMAND_ON )
// 1473     zclSampleDoorLock_OnOff = LIGHT_ON;
// 1474 
// 1475   // Turn off the light
// 1476   else if ( cmd == COMMAND_OFF )
// 1477     zclSampleDoorLock_OnOff = LIGHT_OFF;
// 1478 
// 1479   // Toggle the light
// 1480   else
// 1481   {
// 1482     if ( zclSampleDoorLock_OnOff == LIGHT_OFF )
// 1483       zclSampleDoorLock_OnOff = LIGHT_ON;
// 1484     else
// 1485       zclSampleDoorLock_OnOff = LIGHT_OFF;
// 1486   }
// 1487 
// 1488   // In this sample app, we use LED4 to simulate the DoorLock
// 1489   if ( zclSampleDoorLock_OnOff == LIGHT_ON )
// 1490     HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
// 1491   else
// 1492     HalLedSet( HAL_LED_4, HAL_LED_MODE_OFF );
// 1493 }
// 1494 #endif
// 1495 
// 1496 /******************************************************************************
// 1497  *
// 1498  *  Functions for processing ZCL Foundation incoming Command/Response messages
// 1499  *
// 1500  *****************************************************************************/
// 1501 
// 1502 /*********************************************************************
// 1503  * @fn      zclSampleDoorLock_ProcessIncomingMsg
// 1504  *
// 1505  * @brief   Process ZCL Foundation incoming message
// 1506  *
// 1507  * @param   pInMsg - pointer to the received message
// 1508  *
// 1509  * @return  none
// 1510  */
// 1511 static void zclSampleDoorLock_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
// 1512 {
// 1513   switch ( pInMsg->zclHdr.commandID )
// 1514   {
// 1515 #ifdef ZCL_READ
// 1516     case ZCL_CMD_READ_RSP:
// 1517       zclSampleDoorLock_ProcessInReadRspCmd( pInMsg );
// 1518       break;
// 1519 #endif
// 1520 #ifdef ZCL_WRITE
// 1521     case ZCL_CMD_WRITE_RSP:
// 1522       zclSampleDoorLock_ProcessInWriteRspCmd( pInMsg );
// 1523       break;
// 1524 #endif
// 1525 #ifdef ZCL_REPORT
// 1526     // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
// 1527     case ZCL_CMD_CONFIG_REPORT:
// 1528       //zclSampleDoorLock_ProcessInConfigReportCmd( pInMsg );
// 1529       break;
// 1530 
// 1531     case ZCL_CMD_CONFIG_REPORT_RSP:
// 1532       //zclSampleDoorLock_ProcessInConfigReportRspCmd( pInMsg );
// 1533       break;
// 1534 
// 1535     case ZCL_CMD_READ_REPORT_CFG:
// 1536       //zclSampleDoorLock_ProcessInReadReportCfgCmd( pInMsg );
// 1537       break;
// 1538 
// 1539     case ZCL_CMD_READ_REPORT_CFG_RSP:
// 1540       //zclSampleDoorLock_ProcessInReadReportCfgRspCmd( pInMsg );
// 1541       break;
// 1542 
// 1543     case ZCL_CMD_REPORT:
// 1544       //zclSampleDoorLock_ProcessInReportCmd( pInMsg );
// 1545       break;
// 1546 #endif
// 1547     case ZCL_CMD_DEFAULT_RSP:
// 1548       zclSampleDoorLock_ProcessInDefaultRspCmd( pInMsg );
// 1549       break;
// 1550 
// 1551     default:
// 1552       break;
// 1553   }
// 1554 
// 1555   if ( pInMsg->attrCmd )
// 1556     osal_mem_free( pInMsg->attrCmd );
// 1557 }
// 1558 
// 1559 #ifdef ZCL_READ
// 1560 /*********************************************************************
// 1561  * @fn      zclSampleDoorLock_ProcessInReadRspCmd
// 1562  *
// 1563  * @brief   Process the "Profile" Read Response Command
// 1564  *
// 1565  * @param   pInMsg - incoming message to process
// 1566  *
// 1567  * @return  none
// 1568  */
// 1569 static uint8 zclSampleDoorLock_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
// 1570 {
// 1571   zclReadRspCmd_t *readRspCmd;
// 1572   uint8 i;
// 1573 
// 1574   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
// 1575   for (i = 0; i < readRspCmd->numAttr; i++)
// 1576   {
// 1577     // Notify the originator of the results of the original read attributes
// 1578     // attempt and, for each successfull request, the value of the requested
// 1579     // attribute
// 1580   }
// 1581 
// 1582   return TRUE;
// 1583 }
// 1584 #endif // ZCL_READ
// 1585 
// 1586 #ifdef ZCL_WRITE
// 1587 /*********************************************************************
// 1588  * @fn      zclSampleDoorLock_ProcessInWriteRspCmd
// 1589  *
// 1590  * @brief   Process the "Profile" Write Response Command
// 1591  *
// 1592  * @param   pInMsg - incoming message to process
// 1593  *
// 1594  * @return  none
// 1595  */
// 1596 static uint8 zclSampleDoorLock_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
// 1597 {
// 1598   zclWriteRspCmd_t *writeRspCmd;
// 1599   uint8 i;
// 1600 
// 1601   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
// 1602   for (i = 0; i < writeRspCmd->numAttr; i++)
// 1603   {
// 1604     // Notify the device of the results of the its original write attributes
// 1605     // command.
// 1606   }
// 1607 
// 1608   return TRUE;
// 1609 }
// 1610 #endif // ZCL_WRITE
// 1611 
// 1612 /*********************************************************************
// 1613  * @fn      zclSampleDoorLock_ProcessInDefaultRspCmd
// 1614  *
// 1615  * @brief   Process the "Profile" Default Response Command
// 1616  *
// 1617  * @param   pInMsg - incoming message to process
// 1618  *
// 1619  * @return  none
// 1620  */
// 1621 static uint8 zclSampleDoorLock_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
// 1622 {
// 1623   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
// 1624 
// 1625   // Device is notified of the Default Response command.
// 1626   (void)pInMsg;
// 1627 
// 1628   return TRUE;
// 1629 }
// 1630 
// 1631 /*********************************************************************
// 1632  * @fn      zclSampleDoorLock_DoorLockCB
// 1633  *
// 1634  * @brief   Callback from the ZCL General Cluster Library when
// 1635  *          it received an Door Lock cluster Command for this application.
// 1636  *
// 1637  * @param   pInMsg - process incoming message
// 1638  * @param   pInCmd - PIN/RFID code of command
// 1639  *
// 1640  * @return  ZStatus_t
// 1641  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1642 static ZStatus_t zclSampleDoorLock_DoorLockCB ( zclIncoming_t *pInMsg, zclDoorLock_t *pInCmd )
zclSampleDoorLock_DoorLockCB:
          CFI Block cfiBlock176 Using cfiCommon0
          CFI Function zclSampleDoorLock_DoorLockCB
        CODE
// 1643 {
        FUNCALL zclSampleDoorLock_DoorLockCB, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_DoorLockCB, zclSampleDoorLock_DoorLockActuator
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_DoorLockCB, zclClosures_SendDoorLockStatusResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_DoorLockCB, zclClosures_SendDoorLockStatusResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_DoorLockCB, zclSampleDoorLock_DoorLockActuator
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_DoorLockCB, zclClosures_SendDoorLockStatusResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_DoorLockCB, zclClosures_SendDoorLockStatusResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_DoorLockCB, zclSampleDoorLock_DoorLockActuator
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_DoorLockCB, zclSampleDoorLock_DoorLockActuator
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_DoorLockCB, zclClosures_SendDoorLockStatusResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_DoorLockCB, zclClosures_SendDoorLockStatusResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_DoorLockCB, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_DoorLockCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_DoorLockCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_DoorLockCB, zclClosures_SendDoorLockStatusResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1644   if (  osal_memcmp( aiDoorLockMasterPINCode, pInCmd->pPinRfidCode, 5 ) == TRUE )
        MOV       A,R6
        ADD       A,#0x6
        MOV       ?V0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V1,A
        MOV       A,R6
        ADD       A,#0x7
        MOV       ?V2,A
        CLR       A
        ADDC      A,R7
        MOV       ?V3,A
        ; Setup parameters for call to function osal_memcmp
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x5
        MOV       R5,#0x0
        MOV       R1,#aiDoorLockMasterPINCode & 0xff
        MOV       R2,#(aiDoorLockMasterPINCode >> 8) & 0xff
        MOV       R3,#0x0
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,R1
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??zclSampleDoorLock_DoorLockCB_0 & 0xFFFF
// 1645   {
// 1646     // Lock the door
// 1647     if ( pInMsg->hdr.commandID == COMMAND_CLOSURES_LOCK_DOOR )
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R0,A
        JNZ       ??zclSampleDoorLock_DoorLockCB_1
// 1648     {
// 1649       if( zclSampleDoorLock_DoorLockActuator( CLOSURES_LOCK_STATE_LOCKED ) == ZSuccess )
        ; Setup parameters for call to function zclSampleDoorLock_DoorLockActuator
        MOV       R1,#0x1
        LCALL     `??zclSampleDoorLock_DoorLockActuator::?relay`; Banked call to: zclSampleDoorLock_DoorLockActuator
        MOV       A,R1
        MOV       DPL,R6
        MOV       DPH,R7
        JNZ       ??zclSampleDoorLock_DoorLockCB_2
// 1650       {
// 1651 
// 1652         zclClosures_SendDoorLockStatusResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1653                                                 COMMAND_CLOSURES_LOCK_DOOR,
// 1654                                                 ZCL_STATUS_SUCCESS,TRUE, pInMsg->hdr.transSeqNum );
        LCALL     ??Subroutine29_0 & 0xFFFF
// 1655       }
??CrossCallReturnLabel_83:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       R5,#0x0
??zclSampleDoorLock_DoorLockCB_3:
        MOV       R4,#0x0
??zclSampleDoorLock_DoorLockCB_4:
        LJMP      ??zclSampleDoorLock_DoorLockCB_5 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 15)
// 1656       else
// 1657       {
// 1658         zclClosures_SendDoorLockStatusResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1659                                                 COMMAND_CLOSURES_LOCK_DOOR,
// 1660                                                 ZCL_STATUS_FAILURE, TRUE, pInMsg->hdr.transSeqNum );
??zclSampleDoorLock_DoorLockCB_2:
        LCALL     ??Subroutine29_0 & 0xFFFF
// 1661       }
// 1662     }
??CrossCallReturnLabel_84:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       R5,#0x1
        SJMP      ??zclSampleDoorLock_DoorLockCB_3
          CFI CFA_XSP16 add(XSP16, 15)
// 1663     // Unlock the door
// 1664     else if ( pInMsg->hdr.commandID == COMMAND_CLOSURES_UNLOCK_DOOR )
??zclSampleDoorLock_DoorLockCB_1:
        MOV       A,#0x1
        XRL       A,R0
        JNZ       ??zclSampleDoorLock_DoorLockCB_6
// 1665     {
// 1666       if( zclSampleDoorLock_DoorLockActuator( CLOSURES_LOCK_STATE_UNLOCKED ) == ZSuccess )
        ; Setup parameters for call to function zclSampleDoorLock_DoorLockActuator
        MOV       R1,#0x2
        LCALL     `??zclSampleDoorLock_DoorLockActuator::?relay`; Banked call to: zclSampleDoorLock_DoorLockActuator
        MOV       A,R1
        MOV       DPL,R6
        MOV       DPH,R7
        JNZ       ??zclSampleDoorLock_DoorLockCB_7
// 1667       {
// 1668         zclClosures_SendDoorLockStatusResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1669                                                 COMMAND_CLOSURES_UNLOCK_DOOR,
// 1670                                                 ZCL_STATUS_SUCCESS, TRUE, pInMsg->hdr.transSeqNum );
        LCALL     ??Subroutine29_0 & 0xFFFF
// 1671       }
??CrossCallReturnLabel_85:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       R5,#0x0
??zclSampleDoorLock_DoorLockCB_8:
        MOV       R4,#0x1
        SJMP      ??zclSampleDoorLock_DoorLockCB_4
          CFI CFA_XSP16 add(XSP16, 15)
// 1672       else
// 1673       {
// 1674         zclClosures_SendDoorLockStatusResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1675                                                 COMMAND_CLOSURES_UNLOCK_DOOR,
// 1676                                                 ZCL_STATUS_FAILURE, TRUE, pInMsg->hdr.transSeqNum );
??zclSampleDoorLock_DoorLockCB_7:
        LCALL     ??Subroutine29_0 & 0xFFFF
// 1677       }
// 1678     }
??CrossCallReturnLabel_86:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       R5,#0x1
        SJMP      ??zclSampleDoorLock_DoorLockCB_8
          CFI CFA_XSP16 add(XSP16, 15)
// 1679     // Toggle the door
// 1680     else if ( pInMsg->hdr.commandID == COMMAND_CLOSURES_TOGGLE_DOOR )
??zclSampleDoorLock_DoorLockCB_6:
        MOV       A,#0x2
        XRL       A,R0
        MOV       R1,#0x1
        JNZ       ??zclSampleDoorLock_DoorLockCB_9
// 1681     {
// 1682       if( zclSampleDoorLock_DoorLockActuator( CLOSURES_LOCK_STATE_LOCKED ) == ZSuccess )
        ; Setup parameters for call to function zclSampleDoorLock_DoorLockActuator
        LCALL     `??zclSampleDoorLock_DoorLockActuator::?relay`; Banked call to: zclSampleDoorLock_DoorLockActuator
        MOV       A,R1
        JZ        ??zclSampleDoorLock_DoorLockCB_10
// 1683       {
// 1684 
// 1685         zclClosures_SendDoorLockStatusResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1686                                                 COMMAND_CLOSURES_TOGGLE_DOOR,
// 1687                                                 ZCL_STATUS_SUCCESS, TRUE, pInMsg->hdr.transSeqNum );
// 1688       }
// 1689       else if( zclSampleDoorLock_DoorLockActuator( CLOSURES_LOCK_STATE_UNLOCKED ) == ZSuccess )
        ; Setup parameters for call to function zclSampleDoorLock_DoorLockActuator
        MOV       R1,#0x2
        LCALL     `??zclSampleDoorLock_DoorLockActuator::?relay`; Banked call to: zclSampleDoorLock_DoorLockActuator
        MOV       A,R1
        JNZ       ??zclSampleDoorLock_DoorLockCB_11
// 1690       {
// 1691         zclClosures_SendDoorLockStatusResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1692                                                 COMMAND_CLOSURES_TOGGLE_DOOR,
// 1693                                                 ZCL_STATUS_SUCCESS, TRUE, pInMsg->hdr.transSeqNum );
??zclSampleDoorLock_DoorLockCB_10:
        LCALL     ?Subroutine6 & 0xFFFF
// 1694       }
??CrossCallReturnLabel_87:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       R5,#0x0
??zclSampleDoorLock_DoorLockCB_12:
        MOV       R4,#0x2
        SJMP      ??zclSampleDoorLock_DoorLockCB_5
          CFI CFA_XSP16 add(XSP16, 15)
// 1695       else
// 1696       {
// 1697         zclClosures_SendDoorLockStatusResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1698                                                 COMMAND_CLOSURES_TOGGLE_DOOR,
// 1699                                                 ZCL_STATUS_FAILURE, TRUE, pInMsg->hdr.transSeqNum );
??zclSampleDoorLock_DoorLockCB_11:
        LCALL     ?Subroutine6 & 0xFFFF
// 1700       }
// 1701     }
??CrossCallReturnLabel_88:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       R5,#0x1
        SJMP      ??zclSampleDoorLock_DoorLockCB_12
          CFI CFA_XSP16 add(XSP16, 15)
// 1702     else
// 1703     {
// 1704       return ( ZCL_STATUS_FAILURE );  // invalid command
??zclSampleDoorLock_DoorLockCB_9:
        SJMP      ??zclSampleDoorLock_DoorLockCB_13
// 1705     }
// 1706 
// 1707     return ( ZCL_STATUS_CMD_HAS_RSP );
// 1708   }
// 1709   else
// 1710   {
// 1711     // incorrect PIN received
// 1712 
// 1713 #ifdef LCD_SUPPORTED
// 1714     if ( giDoorLockScreenMode == DOORLOCK_MAINMODE )
??zclSampleDoorLock_DoorLockCB_0:
        MOV       DPTR,#giDoorLockScreenMode
        MOVX      A,@DPTR
        JNZ       ??zclSampleDoorLock_DoorLockCB_14
// 1715     {
// 1716       HalLcdWriteString( (char *)sInvalidPIN, HAL_LCD_LINE_2);
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x2
        MOV       R2,#sInvalidPIN & 0xff
        MOV       R3,#(sInvalidPIN >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
// 1717     }
// 1718 #endif //LCD_SUPPORTED
// 1719 
// 1720     HalLedSet( HAL_LED_1, HAL_LED_MODE_BLINK );
??zclSampleDoorLock_DoorLockCB_14:
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x2
        MOV       R1,#0x1
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
// 1721     HalLedSet( HAL_LED_2, HAL_LED_MODE_BLINK );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x2
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
// 1722 
// 1723     zclClosures_SendDoorLockStatusResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1724                                             pInMsg->hdr.commandID,
// 1725                                             ZCL_STATUS_INVALID_VALUE, FALSE, pInMsg->hdr.transSeqNum );
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_89:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       R5,#-0x79
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       R4,A
??zclSampleDoorLock_DoorLockCB_5:
        MOV       A,R6
        ADD       A,#0x6
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        MOV       A,R6
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??zclClosures_SendDoorLockStatusResponse::?rela`; Banked call to: zclClosures_SendDoorLockStatusResponse
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
// 1726 
// 1727     return ( ZCL_STATUS_CMD_HAS_RSP );
        MOV       R1,#-0x1
??zclSampleDoorLock_DoorLockCB_13:
        MOV       R7,#0x7
        LJMP      ?BANKED_LEAVE_XDATA
// 1728   }
// 1729 }
          CFI EndBlock cfiBlock176

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond177 Using cfiCommon0
          CFI Function zclSampleDoorLock_DoorLockCB
          CFI Conditional ??CrossCallReturnLabel_87
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function zclSampleDoorLock_DoorLockCB
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-2
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function zclSampleDoorLock_DoorLockCB
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-2
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker180 Using cfiCommon1
          CFI (cfiPicker180) NoFunction
          CFI (cfiPicker180) Picker
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiPicker180
        REQUIRE ??Subroutine29_0
        ; // Fall through to label ??Subroutine29_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine29_0:
          CFI Block cfiCond181 Using cfiCommon0
          CFI Function zclSampleDoorLock_DoorLockCB
          CFI Conditional ??CrossCallReturnLabel_83
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function zclSampleDoorLock_DoorLockCB
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-2
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function zclSampleDoorLock_DoorLockCB
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-2
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function zclSampleDoorLock_DoorLockCB
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-2
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function zclSampleDoorLock_DoorLockCB
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+-2
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond186 Using cfiCommon0
          CFI (cfiCond186) Function zclSampleDoorLock_DoorLockCB
          CFI (cfiCond186) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond186) CFA_SP SP+-2
          CFI (cfiCond186) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function zclSampleDoorLock_DoorLockCB
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond187) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-2
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker188 Using cfiCommon1
          CFI (cfiPicker188) NoFunction
          CFI (cfiPicker188) Picker
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        ; Setup parameters for call to function zclClosures_SendDoorLockStatusResponse
        ; Setup parameters for call to function zclClosures_SendDoorLockStatusResponse
        ; Setup parameters for call to function zclClosures_SendDoorLockStatusResponse
        ; Setup parameters for call to function zclClosures_SendDoorLockStatusResponse
        ; Setup parameters for call to function zclClosures_SendDoorLockStatusResponse
        ; Setup parameters for call to function zclClosures_SendDoorLockStatusResponse
        ; Setup parameters for call to function zclClosures_SendDoorLockStatusResponse
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_93:
        RET
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiPicker188

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond189 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessClosuresMsg
          CFI Conditional ??CrossCallReturnLabel_91
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function zclSampleDoorLock_ProcessClosuresMsg
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond190) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond190) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-2
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiPicker191 Using cfiCommon1
          CFI (cfiPicker191) NoFunction
          CFI (cfiPicker191) Picker
        MOV       DPL,?V4
        MOV       DPH,?V5
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiPicker191
        REQUIRE ??Subroutine30_0
        ; // Fall through to label ??Subroutine30_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine30_0:
          CFI Block cfiCond192 Using cfiCommon0
          CFI Function zclSampleDoorLock_ProcessGroupCmd
          CFI Conditional ??CrossCallReturnLabel_90
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function zclSampleDoorLock_DoorLockCB
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_87
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-4
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function zclSampleDoorLock_DoorLockCB
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_88
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+-4
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function zclSampleDoorLock_DoorLockCB
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_89
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-4
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function zclSampleDoorLock_DoorLockCB
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_83
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond196) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond196) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+-4
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond197 Using cfiCommon0
          CFI (cfiCond197) Function zclSampleDoorLock_DoorLockCB
          CFI (cfiCond197) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_84
          CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond197) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond197) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond197) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond197) CFA_SP SP+-4
          CFI (cfiCond197) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond198 Using cfiCommon0
          CFI (cfiCond198) Function zclSampleDoorLock_DoorLockCB
          CFI (cfiCond198) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_85
          CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond198) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond198) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond198) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond198) CFA_SP SP+-4
          CFI (cfiCond198) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function zclSampleDoorLock_DoorLockCB
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_86
          CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond199) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond199) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond199) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond199) CFA_SP SP+-4
          CFI (cfiCond199) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond200 Using cfiCommon0
          CFI (cfiCond200) Function zclSampleDoorLock_ProcessClosuresMsg
          CFI (cfiCond200) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond200) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond200) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond200) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond200) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond200) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond200) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond200) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond200) CFA_SP SP+-2
          CFI (cfiCond200) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond201 Using cfiCommon0
          CFI (cfiCond201) Function zclSampleDoorLock_ProcessClosuresMsg
          CFI (cfiCond201) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond201) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond201) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond201) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond201) CFA_SP SP+-2
          CFI (cfiCond201) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiPicker202 Using cfiCommon1
          CFI (cfiPicker202) NoFunction
          CFI (cfiPicker202) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiCond197
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiCond200
          CFI EndBlock cfiCond201
          CFI EndBlock cfiPicker202
// 1730 
// 1731 /*********************************************************************
// 1732  * @fn      zclSampleDoorLock_DoorLockRspCB
// 1733  *
// 1734  * @brief   Callback from the ZCL General Cluster Library when
// 1735  *          it received an Door Lock response for this application.
// 1736  *
// 1737  * @param   cmd - Command ID
// 1738  * @param   srcAddr - Requestor's address
// 1739  * @param   transSeqNum - Transaction sequence number
// 1740  * @param   status - status response from server's door lock cmd
// 1741  *
// 1742  * @return  ZStatus_t
// 1743  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1744 static ZStatus_t zclSampleDoorLock_DoorLockRspCB ( zclIncoming_t *pInMsg, uint8 status )
zclSampleDoorLock_DoorLockRspCB:
          CFI Block cfiBlock203 Using cfiCommon0
          CFI Function zclSampleDoorLock_DoorLockRspCB
        CODE
// 1745 {
        ; Saved register size: 0
        ; Auto size: 0
// 1746   return ( ZCL_STATUS_SUCCESS );
        MOV       R1,#0x0
        LJMP      ?BRET
// 1747 }
          CFI EndBlock cfiBlock203
// 1748 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1749 static ZStatus_t zclSampleDoorLock_DoorLockActuator ( uint8 newDoorLockState )
zclSampleDoorLock_DoorLockActuator:
          CFI Block cfiBlock204 Using cfiCommon0
          CFI Function zclSampleDoorLock_DoorLockActuator
        CODE
// 1750 {
        FUNCALL zclSampleDoorLock_DoorLockActuator, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_DoorLockActuator, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_DoorLockActuator, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_DoorLockActuator, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_DoorLockActuator, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_DoorLockActuator, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 1751   // In this sample app, we use LED1 and LED2 to simulate the Door Lock/Unlock states
// 1752   if ( newDoorLockState == CLOSURES_LOCK_STATE_LOCKED )
        MOV       A,#0x1
        XRL       A,R6
        JNZ       ??zclSampleDoorLock_DoorLockActuator_0
// 1753   {
// 1754     if ( zclSampleDoorLock_LockState == CLOSURES_LOCK_STATE_LOCKED )
        MOV       DPTR,#zclSampleDoorLock_LockState
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??zclSampleDoorLock_DoorLockActuator_1
// 1755     {
// 1756       return ZFailure;
// 1757     }
// 1758 
// 1759 #ifdef LCD_SUPPORTED
// 1760     if ( giDoorLockScreenMode == DOORLOCK_MAINMODE )
        MOV       DPTR,#giDoorLockScreenMode
        MOVX      A,@DPTR
        JNZ       ??zclSampleDoorLock_DoorLockActuator_2
// 1761     {
// 1762       HalLcdWriteString( (char *)sDoorLocked, HAL_LCD_LINE_2);
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x2
        MOV       R2,#sDoorLocked & 0xff
        MOV       R3,#(sDoorLocked >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
// 1763     }
// 1764 #endif //LCD_SUPPORTED
// 1765 
// 1766     HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
??zclSampleDoorLock_DoorLockActuator_2:
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x0
        MOV       R1,#0x1
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
// 1767     HalLedSet( HAL_LED_2, HAL_LED_MODE_BLINK );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x2
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
// 1768     zclSampleDoorLock_LockState = CLOSURES_LOCK_STATE_LOCKED;
        MOV       DPTR,#zclSampleDoorLock_LockState
        MOV       A,#0x1
        SJMP      ??zclSampleDoorLock_DoorLockActuator_3
// 1769   }
// 1770   else if ( newDoorLockState == CLOSURES_LOCK_STATE_UNLOCKED )
??zclSampleDoorLock_DoorLockActuator_0:
        MOV       A,#0x2
        XRL       A,R6
        JNZ       ??zclSampleDoorLock_DoorLockActuator_4
// 1771   {
// 1772     if ( zclSampleDoorLock_LockState == CLOSURES_LOCK_STATE_UNLOCKED )
        MOV       DPTR,#zclSampleDoorLock_LockState
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??zclSampleDoorLock_DoorLockActuator_5
// 1773     {
// 1774       return ZFailure;
??zclSampleDoorLock_DoorLockActuator_1:
        MOV       R1,#0x1
        SJMP      ??zclSampleDoorLock_DoorLockActuator_6
// 1775     }
// 1776 
// 1777 #ifdef LCD_SUPPORTED
// 1778     if ( giDoorLockScreenMode == DOORLOCK_MAINMODE )
??zclSampleDoorLock_DoorLockActuator_5:
        MOV       DPTR,#giDoorLockScreenMode
        MOVX      A,@DPTR
        JNZ       ??zclSampleDoorLock_DoorLockActuator_7
// 1779     {
// 1780       HalLcdWriteString( (char *)sDoorUnlocked, HAL_LCD_LINE_2);
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x2
        MOV       R2,#sDoorUnlocked & 0xff
        MOV       R3,#(sDoorUnlocked >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
// 1781     }
// 1782 #endif //LCD_SUPPORTED
// 1783 
// 1784     HalLedSet( HAL_LED_1, HAL_LED_MODE_BLINK );
??zclSampleDoorLock_DoorLockActuator_7:
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x2
        MOV       R1,#0x1
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
// 1785     HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV       R2,#0x0
        MOV       R1,#0x2
        LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
// 1786     zclSampleDoorLock_LockState = CLOSURES_LOCK_STATE_UNLOCKED;
        MOV       DPTR,#zclSampleDoorLock_LockState
        MOV       A,#0x2
??zclSampleDoorLock_DoorLockActuator_3:
        MOVX      @DPTR,A
// 1787   }
// 1788 
// 1789   return ZSuccess;
??zclSampleDoorLock_DoorLockActuator_4:
        MOV       R1,#0x0
??zclSampleDoorLock_DoorLockActuator_6:
          CFI EndBlock cfiBlock204
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
// 1790 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock205 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock205
// 1791 
// 1792 #if ZCL_EZMODE
// 1793 /*********************************************************************
// 1794  * @fn      zclSampleDoorLock_ProcessZDOMsgs
// 1795  *
// 1796  * @brief   Called when this node receives a ZDO/ZDP response.
// 1797  *
// 1798  * @param   none
// 1799  *
// 1800  * @return  status
// 1801  */
// 1802 static void zclSampleDoorLock_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
// 1803 {
// 1804   zclEZMode_ActionData_t data;
// 1805   ZDO_MatchDescRsp_t *pMatchDescRsp;
// 1806 
// 1807   // Let EZ-Mode know of the Match Descriptor Response
// 1808   if ( pMsg->clusterID == Match_Desc_rsp )
// 1809   {
// 1810     pMatchDescRsp = ZDO_ParseEPListRsp( pMsg );
// 1811     data.pMatchDescRsp = pMatchDescRsp;
// 1812     zcl_EZModeAction( EZMODE_ACTION_MATCH_DESC_RSP, &data );
// 1813     osal_mem_free( pMatchDescRsp );
// 1814   }
// 1815 }
// 1816 
// 1817 /*********************************************************************
// 1818  * @fn      zclSampleDoorLock_EZModeCB
// 1819  *
// 1820  * @brief   The Application is informed of events. This can be used to show on the UI what is
// 1821 *           going on during EZ-Mode steering/finding/binding.
// 1822  *
// 1823  * @param   state - an
// 1824  *
// 1825  * @return  none
// 1826  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1827 static void zclSampleDoorLock_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
zclSampleDoorLock_EZModeCB:
          CFI Block cfiBlock206 Using cfiCommon0
          CFI Function zclSampleDoorLock_EZModeCB
        CODE
// 1828 {
        FUNCALL zclSampleDoorLock_EZModeCB, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_EZModeCB, zclSampleDoorLock_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_EZModeCB, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_EZModeCB, zclSampleDoorLock_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_EZModeCB, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleDoorLock_EZModeCB, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       ?V0,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1829 #ifdef LCD_SUPPORTED
// 1830   char *pStr;
// 1831   uint8 err;
// 1832 #endif
// 1833 
// 1834   // time to go into identify mode
// 1835   if ( state == EZMODE_STATE_IDENTIFYING )
        MOV       A,#0x4
        XRL       A,?V0
        JNZ       ??zclSampleDoorLock_EZModeCB_0
// 1836   {
// 1837 #ifdef LCD_SUPPORTED
// 1838     HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x2
        MOV       R2,#`?<Constant "EZMode">` & 0xff
        MOV       R3,#(`?<Constant "EZMode">` >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
// 1839 #endif
// 1840 
// 1841     zclSampleDoorLock_IdentifyTime = (EZMODE_TIME / 1000);  // convert to seconds
        MOV       DPTR,#zclSampleDoorLock_IdentifyTime
        MOV       A,#-0x4c
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
// 1842     zclSampleDoorLock_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleDoorLock_ProcessIdentifyTimeChange
        LCALL     `??zclSampleDoorLock_ProcessIdentifyTimeChange::`; Banked call to: zclSampleDoorLock_ProcessIdentifyTimeChange
        LJMP      ??zclSampleDoorLock_EZModeCB_1 & 0xFFFF
// 1843   }
// 1844 
// 1845   // autoclosing, show what happened (success, cancelled, etc...)
// 1846   if( state == EZMODE_STATE_AUTOCLOSE )
??zclSampleDoorLock_EZModeCB_0:
        MOV       A,#0x7
        XRL       A,?V0
        JNZ       ??zclSampleDoorLock_EZModeCB_2
// 1847   {
// 1848 #ifdef LCD_SUPPORTED
// 1849     pStr = NULL;
// 1850     err = pData->sAutoClose.err;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
// 1851     if ( err == EZMODE_ERR_SUCCESS )
        JNZ       ??zclSampleDoorLock_EZModeCB_3
// 1852     {
// 1853       pStr = "EZMode: Success";
        MOV       R2,#`?<Constant "EZMode: Success">` & 0xff
        MOV       R3,#(`?<Constant "EZMode: Success">` >> 8) & 0xff
        SJMP      ??zclSampleDoorLock_EZModeCB_4
// 1854     }
// 1855     else if ( err == EZMODE_ERR_NOMATCH )
??zclSampleDoorLock_EZModeCB_3:
        MOV       A,#0x4
        XRL       A,R0
        JNZ       ??zclSampleDoorLock_EZModeCB_1
// 1856     {
// 1857       pStr = "EZMode: NoMatch"; // not a match made in heaven
        MOV       R2,#`?<Constant "EZMode: NoMatch">` & 0xff
        MOV       R3,#(`?<Constant "EZMode: NoMatch">` >> 8) & 0xff
// 1858     }
// 1859     if ( pStr )
??zclSampleDoorLock_EZModeCB_4:
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclSampleDoorLock_EZModeCB_1
// 1860     {
// 1861       if ( giDoorLockScreenMode == DOORLOCK_MAINMODE )
        MOV       DPTR,#giDoorLockScreenMode
        MOVX      A,@DPTR
        JNZ       ??zclSampleDoorLock_EZModeCB_1
// 1862         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x2
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
        SJMP      ??zclSampleDoorLock_EZModeCB_1
// 1863     }
// 1864 #endif
// 1865   }
// 1866 
// 1867   // finished, either show DstAddr/EP, or nothing (depending on success or not)
// 1868   if( state == EZMODE_STATE_FINISH )
??zclSampleDoorLock_EZModeCB_2:
        MOV       A,#0x63
        XRL       A,?V0
        JNZ       ??zclSampleDoorLock_EZModeCB_1
// 1869   {
// 1870     // turn off identify mode
// 1871     zclSampleDoorLock_IdentifyTime = 0;
        MOV       DPTR,#zclSampleDoorLock_IdentifyTime
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1872     zclSampleDoorLock_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleDoorLock_ProcessIdentifyTimeChange
        LCALL     `??zclSampleDoorLock_ProcessIdentifyTimeChange::`; Banked call to: zclSampleDoorLock_ProcessIdentifyTimeChange
// 1873 
// 1874 #ifdef LCD_SUPPORTED
// 1875     // if successful, inform user which nwkaddr/ep we bound to
// 1876     pStr = NULL;
// 1877     err = pData->sFinish.err;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
// 1878     if( err == EZMODE_ERR_SUCCESS )
        JZ        ??zclSampleDoorLock_EZModeCB_5
// 1879     {
// 1880       // already stated on autoclose
// 1881     }
// 1882     else if ( err == EZMODE_ERR_CANCELLED )
        MOV       A,#0x2
        XRL       A,R0
        JNZ       ??zclSampleDoorLock_EZModeCB_6
// 1883     {
// 1884       pStr = "EZMode: Cancel";
        MOV       R2,#`?<Constant "EZMode: Cancel">` & 0xff
        MOV       R3,#(`?<Constant "EZMode: Cancel">` >> 8) & 0xff
        SJMP      ??zclSampleDoorLock_EZModeCB_7
// 1885     }
// 1886     else if ( err == EZMODE_ERR_BAD_PARAMETER )
??zclSampleDoorLock_EZModeCB_6:
        MOV       A,#0x1
        XRL       A,R0
        JNZ       ??zclSampleDoorLock_EZModeCB_8
// 1887     {
// 1888       pStr = "EZMode: BadParm";
        MOV       R2,#`?<Constant "EZMode: BadParm">` & 0xff
        MOV       R3,#(`?<Constant "EZMode: BadParm">` >> 8) & 0xff
        SJMP      ??zclSampleDoorLock_EZModeCB_7
// 1889     }
// 1890     else if ( err == EZMODE_ERR_TIMEDOUT )
??zclSampleDoorLock_EZModeCB_8:
        MOV       A,#0x3
        XRL       A,R0
        JNZ       ??zclSampleDoorLock_EZModeCB_5
// 1891     {
// 1892       pStr = "EZMode: TimeOut";
        MOV       R2,#`?<Constant "EZMode: TimeOut">` & 0xff
        MOV       R3,#(`?<Constant "EZMode: TimeOut">` >> 8) & 0xff
// 1893     }
// 1894     if ( pStr )
??zclSampleDoorLock_EZModeCB_7:
        MOV       A,R2
        ORL       A,R3
        JZ        ??zclSampleDoorLock_EZModeCB_5
// 1895     {
// 1896       if ( giDoorLockScreenMode == DOORLOCK_MAINMODE )
        MOV       DPTR,#giDoorLockScreenMode
        MOVX      A,@DPTR
        JNZ       ??zclSampleDoorLock_EZModeCB_5
// 1897         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x2
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
// 1898     }
// 1899 #endif
// 1900 
// 1901     // show main UI screen 3 seconds after binding
// 1902     osal_start_timerEx( zclSampleDoorLock_TaskID, SAMPLEDOORLOCK_MAIN_SCREEN_EVT, 3000 );
??zclSampleDoorLock_EZModeCB_5:
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_bb8
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       R2,#0x10
        MOV       R3,#0x0
        MOV       DPTR,#zclSampleDoorLock_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
// 1903   }
// 1904 
// 1905 }
??zclSampleDoorLock_EZModeCB_1:
        LJMP      ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock206

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleDoorLock_ActuatorEn`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleDoorLock_RequirePin`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleDoorLock_NwkState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for aProcessCmd>`:
        DATA8
        DB 1
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for aiDoorLockMasterPINCode>`:
        DATA8
        DB 4
        DB 49
        DB 50
        DB 51
        DB 52

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sampleDoorLock_TestEp>`:
        DATA8
        DB 20
        DATA16
        DW zclSampleDoorLock_TaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleDoorLock_CmdCallbac`:
        DATA16
        DW `??zclSampleDoorLock_BasicResetCB::?relay`
        DW `??zclSampleDoorLock_IdentifyCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW `??zclSampleDoorLock_IdentifyQueryRspCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleDoorLock_DoorLockCm`:
        DATA16
        DW `??zclSampleDoorLock_DoorLockCB::?relay`
        DW `??zclSampleDoorLock_DoorLockRspCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleDoorLock_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleDoorLock_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleDoorLock_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleDoorLock_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleDoorLock_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleDoorLock_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleDoorLock_LcdDisplayUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleDoorLock_LcdDisplayUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleDoorLock_LcdDisplayMainMode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleDoorLock_LcdDisplayMainMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleDoorLock_LcdDisplayHelpMode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleDoorLock_LcdDisplayHelpMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleDoorLock_LcdDisplayPINMode::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleDoorLock_LcdDisplayPINMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleDoorLock_ProcessAppMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleDoorLock_ProcessAppMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleDoorLock_ProcessFoundationMsg::?rela`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleDoorLock_ProcessFoundationMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleDoorLock_ProcessGroupCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleDoorLock_ProcessGroupCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleDoorLock_ProcessSceneCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleDoorLock_ProcessSceneCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleDoorLock_ProcessClosuresMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleDoorLock_ProcessClosuresMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleDoorLock_ProcessIdentifyTimeChange::`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleDoorLock_ProcessIdentifyTimeChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleDoorLock_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleDoorLock_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleDoorLock_IdentifyCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleDoorLock_IdentifyCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleDoorLock_IdentifyQueryRspCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleDoorLock_IdentifyQueryRspCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleDoorLock_DoorLockCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleDoorLock_DoorLockCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleDoorLock_DoorLockRspCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleDoorLock_DoorLockRspCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleDoorLock_DoorLockActuator::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleDoorLock_DoorLockActuator

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleDoorLock_EZModeCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleDoorLock_EZModeCB

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode">`:
        DB "EZMode"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SW5: Help      *">`:
        DB "SW5: Help      *"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SW5: Help       ">`:
        DB "SW5: Help       "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Enter PIN: ">`:
        DB "Enter PIN: "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Enter PIN: *">`:
        DB "Enter PIN: *"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Enter PIN: **">`:
        DB "Enter PIN: **"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Enter PIN: ***">`:
        DB "Enter PIN: ***"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Enter PIN: **** ">`:
        DB "Enter PIN: **** "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode: Success">`:
        DB "EZMode: Success"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode: NoMatch">`:
        DB "EZMode: NoMatch"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode: Cancel">`:
        DB "EZMode: Cancel"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode: BadParm">`:
        DB "EZMode: BadParm"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EZMode: TimeOut">`:
        DB "EZMode: TimeOut"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_bb8:
        DD 3000

        END
// 1906 
// 1907 #endif // ZCL_EZMODE
// 1908 
// 1909 /****************************************************************************
// 1910 ****************************************************************************/
// 
// 5 223 bytes in segment BANKED_CODE
//   120 bytes in segment BANK_RELAYS
//   150 bytes in segment XDATA_I
//   150 bytes in segment XDATA_ID
//   360 bytes in segment XDATA_ROM_C
//    23 bytes in segment XDATA_Z
// 
//   270 bytes of CODE     memory
//   352 bytes of CONST    memory (+ 8 bytes shared)
// 5 223 bytes of HUGECODE memory
//   173 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
