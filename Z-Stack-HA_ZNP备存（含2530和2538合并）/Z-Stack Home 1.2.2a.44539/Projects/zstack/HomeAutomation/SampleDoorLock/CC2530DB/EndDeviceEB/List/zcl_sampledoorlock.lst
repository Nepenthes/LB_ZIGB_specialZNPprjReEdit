###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               09/May/2018  15:32:38
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\Source\zcl_sampledoorlock.c
#    Command line       =  
#        -f C:\Users\NEPENT~1\AppData\Local\Temp\EW5643.tmp
#        ("D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\Source\zcl_sampledoorlock.c"
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D xNV_RESTORE -D
#        xPOWER_SAVING -D NWK_AUTO_POLL -D HOLD_AUTO_START -D ZTOOL_P1 -D
#        MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
#        ZCL_WRITE -D ZCL_REPORT -D ZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D
#        ZCL_DOORLOCK -D ZCL_SCENES -D ZCL_GROUPS -lC
#        "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\EndDeviceEB\List"
#        -lA "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "D:\Zigbee\Software\Z-Stack
#        Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\Source\"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\Source\"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\EndDeviceEB\List\zcl_sampledoorlock.lst
#    Object file        =  
#        D:\Zigbee\Software\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\CC2530DB\EndDeviceEB\Obj\zcl_sampledoorlock.r51
#
###############################################################################

D:\Zigbee\Software\Z-Stack Home 1.2.2a.44539\Projects\zstack\HomeAutomation\SampleDoorLock\Source\zcl_sampledoorlock.c
      1          /**************************************************************************************************
      2            Filename:       zcl_sampledoorlock.c
      3            Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
      4            Revision:       $Revision: 40796 $
      5          
      6          
      7            Description:    Zigbee Cluster Library - sample device application.
      8          
      9          
     10            Copyright 2013-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42            This device is a door lock.
     43          
     44            SCREEN MODES
     45            ----------------------------------------
     46            Main:
     47              - SW1: Toggle door lock
     48              - SW2: Invoke EZMode
     49              - SW3: Go to Master PIN screen
     50              - SW4: Enable/Disable Permit Join
     51              - SW5: Go to Help screen
     52          
     53            PIN:
     54              - SW1: Increase PIN number
     55              - SW3: Decrease PIN number
     56              - SW5: Enter PIN number
     57            ----------------------------------------
     58          *********************************************************************/
     59          
     60          /*********************************************************************
     61           * INCLUDES
     62           */
     63          #include "ZComDef.h"
     64          #include "OSAL.h"
     65          #include "AF.h"
     66          #include "ZDApp.h"
     67          #include "ZDObject.h"
     68          #include "MT_APP.h"
     69          #include "OSAL_Nv.h"
     70          #include "MT_SYS.h"
     71          
     72          #include "zcl.h"
     73          #include "zcl_general.h"
     74          #include "zcl_ha.h"
     75          #include "zcl_ezmode.h"
     76          #include "zcl_closures.h"
     77          
     78          #include "zcl_sampledoorlock.h"
     79          
     80          #include "onboard.h"
     81          
     82          /* HAL */
     83          #include "hal_lcd.h"
     84          #include "hal_led.h"
     85          #include "hal_key.h"
     86          
     87          
     88          /*********************************************************************
     89           * MACROS
     90           */
     91          
     92          /*********************************************************************
     93           * CONSTANTS
     94           */
     95          /*********************************************************************
     96           * TYPEDEFS
     97           */
     98          
     99          /*********************************************************************
    100           * GLOBAL VARIABLES
    101           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          byte zclSampleDoorLock_TaskID;
   \                     zclSampleDoorLock_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    103          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          uint8 zclSampleDoorLockSeqNum;
   \                     zclSampleDoorLockSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    105          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          uint8  zclSampleDoorLock_OnOff;
   \                     zclSampleDoorLock_OnOff:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    107          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    108          uint8 zclSampleDoorLock_LockState;
   \                     zclSampleDoorLock_LockState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    109          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    110          uint8 zclSampleDoorLock_LockType = CLOSURES_LOCK_TYPE_DEADBOLT;
   \                     zclSampleDoorLock_LockType:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    111          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    112          bool zclSampleDoorLock_ActuatorEnabled = TRUE;
   \                     zclSampleDoorLock_ActuatorEnabled:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleDoorLock_ActuatorEn`
   \   000001                REQUIRE __INIT_XDATA_I
    113          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          bool zclSampleDoorLock_SendPinOta = FALSE;
   \                     zclSampleDoorLock_SendPinOta:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    115          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    116          bool zclSampleDoorLock_RequirePinForRfOperation = TRUE;
   \                     zclSampleDoorLock_RequirePinForRfOperation:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleDoorLock_RequirePin`
   \   000001                REQUIRE __INIT_XDATA_I
    117          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          static byte gPermitDuration = 0;
   \                     gPermitDuration:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    119          
    120          /*********************************************************************
    121           * GLOBAL FUNCTIONS
    122           */
    123          
    124          /*********************************************************************
    125           * LOCAL VARIABLES
    126           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          afAddrType_t zclSampleDoorLock_DstAddr;
   \                     zclSampleDoorLock_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    128          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    129          uint8 iToggleBuff = LIGHT_OFF;
   \                     iToggleBuff:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    130          
    131          #ifdef ZCL_EZMODE
    132          static void zclSampleDoorLock_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
    133          static void zclSampleDoorLock_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
    134          

   \                                 In  segment XDATA_ROM_C, align 1
    135          static const zclEZMode_RegisterData_t zclSampleDoorLock_RegisterEZModeData =
   \                     zclSampleDoorLock_RegisterEZModeData:
   \   000000   ....         DW zclSampleDoorLock_TaskID
   \   000002   0400         DW 4
   \   000004   0800         DW 8
   \   000006   ....         DW zclSampleDoorLockSeqNum
   \   000008   ....         DW `??zclSampleDoorLock_EZModeCB::?relay`
    136          {
    137            &zclSampleDoorLock_TaskID,
    138            SAMPLEDOORLOCK_EZMODE_NEXTSTATE_EVT,
    139            SAMPLEDOORLOCK_EZMODE_TIMEOUT_EVT,
    140            &zclSampleDoorLockSeqNum,
    141            zclSampleDoorLock_EZModeCB
    142          };
    143          
    144          // NOT ZCL_EZMODE, use EndDeviceBind
    145          #else
    146          
    147          static cId_t bindingInClusters[] =
    148          {
    149            ZCL_CLUSTER_ID_GEN_ON_OFF,
    150            ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK
    151          };
    152          #define ZCLSAMPLEDOORLOCK_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
    153          #endif
    154          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    155          devStates_t zclSampleDoorLock_NwkState = DEV_INIT;
   \                     zclSampleDoorLock_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleDoorLock_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          uint8 giDoorLockScreenMode = DOORLOCK_MAINMODE;   // display main screen mode first
   \                     giDoorLockScreenMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    158          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    159          static uint8 aProcessCmd[] = { 1, 0, 0, 0 }; // used for reset command, { length + cmd0 + cmd1 + data }
   \                     aProcessCmd:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for aProcessCmd>`
   \   000004                REQUIRE __INIT_XDATA_I
    160          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          uint8 giDoorLockPINCount = 0;
   \                     giDoorLockPINCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    162          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          uint8 giDoorLockPINColumnCount = 0;
   \                     giDoorLockPINColumnCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    164          
    165          // Master PIN code for DoorLock

   \                                 In  segment XDATA_I, align 1, keep-with-next
    166          static uint8 aiDoorLockMasterPINCode[] = {4,0x31,0x32,0x33,0x34};
   \                     aiDoorLockMasterPINCode:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for aiDoorLockMasterPINCode>`
   \   000005                REQUIRE __INIT_XDATA_I
    167          
    168          // Test Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
    169          static endPointDesc_t sampleDoorLock_TestEp =
   \                     sampleDoorLock_TestEp:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for sampleDoorLock_TestEp>`
   \   000006                REQUIRE __INIT_XDATA_I
    170          {
    171            20,                                 // Test endpoint
    172            &zclSampleDoorLock_TaskID,
    173            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    174            (afNetworkLatencyReq_t)0            // No Network Latency req
    175          };
    176          
    177          /*********************************************************************
    178           * LOCAL FUNCTIONS
    179           */
    180          static void zclSampleDoorLock_HandleKeys( byte shift, byte keys );
    181          static void zclSampleDoorLock_BasicResetCB( void );
    182          static void zclSampleDoorLock_IdentifyCB( zclIdentify_t *pCmd );
    183          static void zclSampleDoorLock_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
    184          //static void zclSampleDoorLock_OnOffCB( uint8 cmd );
    185          static void zclSampleDoorLock_ProcessIdentifyTimeChange( void );
    186          
    187          void zclSampleDoorLock_LcdDisplayUpdate(void);
    188          void zclSampleDoorLock_LcdDisplayMainMode(void);
    189          void zclSampleDoorLock_LcdDisplayPINMode(void);
    190          void zclSampleDoorLock_LcdDisplayHelpMode(void);
    191          
    192          static void zclSampleDoorLock_ProcessAppMsg( uint8 srcEP, uint8 len, uint8 *msg );
    193          static void zclSampleDoorLock_ProcessFoundationMsg( afAddrType_t *dstAddr, uint16 clusterID,
    194                                                              zclFrameHdr_t *hdr, zclParseCmd_t *pParseCmd );
    195          static void zclSampleDoorLock_ProcessGeneralMsg( uint8 srcEP, afAddrType_t *dstAddr,
    196                                              uint16 clusterID, zclFrameHdr_t *hdr, uint8 len, uint8 *data );
    197          static void zclSampleDoorLock_ProcessGroupCmd( uint8 srcEP, afAddrType_t *dstAddr,
    198                                            uint16 clusterID, zclFrameHdr_t *hdr, uint8 len, uint8 *data );
    199          static void zclSampleDoorLock_ProcessSceneCmd( uint8 srcEP, afAddrType_t *dstAddr,
    200                                          uint16 clusterID, zclFrameHdr_t *hdr, uint8 len, uint8 *data );
    201          static void zclSampleDoorLock_ProcessClosuresMsg( uint8 srcEP, afAddrType_t *dstAddr,
    202                                              uint16 clusterID, zclFrameHdr_t *hdr, uint8 len, uint8 *data );
    203          ZStatus_t zclSampleDoorLock_DoorLockToggleDoorCB( zclDoorLock_t *pCmd );
    204          
    205          // Functions to process ZCL Foundation incoming Command/Response messages
    206          static void zclSampleDoorLock_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    207          #ifdef ZCL_READ
    208          static uint8 zclSampleDoorLock_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    209          #endif
    210          #ifdef ZCL_WRITE
    211          static uint8 zclSampleDoorLock_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    212          #endif
    213          static uint8 zclSampleDoorLock_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    214          
    215          static ZStatus_t zclSampleDoorLock_DoorLockCB ( zclIncoming_t *pInMsg, zclDoorLock_t *pInCmd );
    216          static ZStatus_t zclSampleDoorLock_DoorLockRspCB ( zclIncoming_t *pInMsg, uint8 status );
    217          ZStatus_t zclSampleDoorLock_DoorLockActuator ( uint8 newDoorLockState );
    218          
    219          /*********************************************************************
    220           * STATUS STRINGS
    221           */
    222          #ifdef LCD_SUPPORTED

   \                                 In  segment XDATA_ROM_C, align 1
    223          const char sClearLine[]    = " ";
   \                     sClearLine:
   \   000000   2000         DB " "

   \                                 In  segment XDATA_ROM_C, align 1
    224          const char sDeviceName[]   = "    DoorLock";
   \                     sDeviceName:
   \   000000   20202020     DB "    DoorLock"
   \            446F6F72
   \            4C6F636B
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    225          const char sSwDoorLock[]   = "SW1: Lock/Unlock";
   \                     sSwDoorLock:
   \   000000   5357313A     DB "SW1: Lock/Unlock"
   \            204C6F63
   \            6B2F556E
   \            6C6F636B
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    226          const char sSwEZMode[]     = "SW2: EZ-Mode";
   \                     sSwEZMode:
   \   000000   5357323A     DB "SW2: EZ-Mode"
   \            20455A2D
   \            4D6F6465
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    227          const char sSwPIN[]        = "SW3: Master PIN";
   \                     sSwPIN:
   \   000000   5357333A     DB "SW3: Master PIN"
   \            204D6173
   \            74657220
   \            50494E00

   \                                 In  segment XDATA_ROM_C, align 1
    228          const char sPINLine2[]     = "SW1:+";
   \                     sPINLine2:
   \   000000   5357313A     DB "SW1:+"
   \            2B00    

   \                                 In  segment XDATA_ROM_C, align 1
    229          const char sPINLine3[]     = "SW3:-  SW5:Enter";
   \                     sPINLine3:
   \   000000   5357333A     DB "SW3:-  SW5:Enter"
   \            2D202053
   \            57353A45
   \            6E746572
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    230          const char sSwHelp[]       = "SW5: Help";
   \                     sSwHelp:
   \   000000   5357353A     DB "SW5: Help"
   \            2048656C
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
    231          const char sStorePIN[]     = "   PIN SAVED";
   \                     sStorePIN:
   \   000000   20202050     DB "   PIN SAVED"
   \            494E2053
   \            41564544
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    232          const char sDoorLocked[]   = "  Door Locked";
   \                     sDoorLocked:
   \   000000   2020446F     DB "  Door Locked"
   \            6F72204C
   \            6F636B65
   \            6400    

   \                                 In  segment XDATA_ROM_C, align 1
    233          const char sDoorUnlocked[] = "  Door Unlocked";
   \                     sDoorUnlocked:
   \   000000   2020446F     DB "  Door Unlocked"
   \            6F722055
   \            6E6C6F63
   \            6B656400

   \                                 In  segment XDATA_ROM_C, align 1
    234          const char sInvalidPIN[]   = "  Invalid PIN";
   \                     sInvalidPIN:
   \   000000   2020496E     DB "  Invalid PIN"
   \            76616C69
   \            64205049
   \            4E00    
    235          #endif
    236          
    237          /*********************************************************************
    238           * ZCL General Profile Callback table
    239           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    240          static zclGeneral_AppCallbacks_t zclSampleDoorLock_CmdCallbacks =
   \                     zclSampleDoorLock_CmdCallbacks:
   \   000000                DS 32
   \   000020                REQUIRE `?<Initializer for zclSampleDoorLock_CmdCallbac`
   \   000020                REQUIRE __INIT_XDATA_I
    241          {
    242            zclSampleDoorLock_BasicResetCB,         // Basic Cluster Reset command
    243            zclSampleDoorLock_IdentifyCB,           // Identify command
    244          #ifdef ZCL_EZMODE
    245            NULL,                                   // Identify EZ-Mode Invoke command
    246            NULL,                                   // Identify Update Commission State command
    247          #endif
    248            NULL,                                   // Identify Trigger Effect command
    249            zclSampleDoorLock_IdentifyQueryRspCB,   // Identify Query Response command
    250            NULL,                                   // On/Off cluster commands
    251            NULL,                                   // On/Off cluster enhanced command Off with Effect
    252            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    253            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    254          #ifdef ZCL_LEVEL_CTRL
    255            NULL,                                   // Level Control Move to Level command
    256            NULL,                                   // Level Control Move command
    257            NULL,                                   // Level Control Step command
    258            NULL,                                   // Level Control Stop command
    259          #endif
    260          #ifdef ZCL_GROUPS
    261            NULL,                                   // Group Response commands
    262          #endif
    263          #ifdef ZCL_SCENES
    264            NULL,                                   // Scene Store Request command
    265            NULL,                                   // Scene Recall Request command
    266            NULL,                                   // Scene Response command
    267          #endif
    268          #if ZCL_ALARMS
    269            NULL,                                   // Alarm (Response) commands
    270          #endif
    271          #ifdef SE_UK_EXT
    272            NULL,                                   // Get Event Log command
    273            NULL,                                   // Publish Event Log command
    274          #endif
    275            NULL,                                   // RSSI Location command
    276            NULL                                    // RSSI Location Response command
    277          };
    278          
    279          /*********************************************************************
    280           * ZCL Closure cluster Callback table
    281           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    282          static zclClosures_DoorLockAppCallbacks_t zclSampleDoorLock_DoorLockCmdCallbacks =
   \                     zclSampleDoorLock_DoorLockCmdCallbacks:
   \   000000                DS 100
   \   000064                REQUIRE `?<Initializer for zclSampleDoorLock_DoorLockCm`
   \   000064                REQUIRE __INIT_XDATA_I
    283          {
    284            zclSampleDoorLock_DoorLockCB,                           // DoorLock cluster command
    285            zclSampleDoorLock_DoorLockRspCB,                        // DoorLock Response
    286            NULL,
    287            NULL,
    288            NULL,
    289            NULL,
    290            NULL,
    291            NULL,
    292            NULL,
    293            NULL,
    294            NULL,
    295            NULL,
    296            NULL,
    297            NULL,
    298            NULL,
    299            NULL,
    300            NULL,
    301            NULL,
    302            NULL,
    303            NULL,
    304            NULL,
    305            NULL,
    306            NULL,
    307            NULL,
    308            NULL,
    309            NULL,
    310            NULL,
    311            NULL,
    312            NULL,
    313            NULL,
    314            NULL,
    315            NULL,
    316            NULL,
    317            NULL,
    318            NULL,
    319            NULL,
    320            NULL,
    321            NULL,
    322            NULL,
    323            NULL,
    324            NULL,
    325            NULL,
    326            NULL,
    327            NULL,
    328            NULL,
    329            NULL,
    330            NULL,
    331            NULL,
    332            NULL,
    333            NULL
    334          };
    335          
    336          /*********************************************************************
    337           * @fn          zclSampleDoorLock_Init
    338           *
    339           * @brief       Initialization function for the zclGeneral layer.
    340           *
    341           * @param       none
    342           *
    343           * @return      none
    344           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    345          void zclSampleDoorLock_Init( byte task_id )
   \                     zclSampleDoorLock_Init:
    346          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    347            zclSampleDoorLock_TaskID = task_id;
   \   000007   90....       MOV       DPTR,#zclSampleDoorLock_TaskID
   \   00000A   F0           MOVX      @DPTR,A
    348          
    349            // Set destination address to indirect
    350            zclSampleDoorLock_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000B   90....       MOV       DPTR,#zclSampleDoorLock_DstAddr + 8
   \   00000E   E4           CLR       A
   \   00000F   F0           MOVX      @DPTR,A
    351            zclSampleDoorLock_DstAddr.endPoint = 0;
   \   000010   A3           INC       DPTR
   \   000011   F0           MOVX      @DPTR,A
    352            zclSampleDoorLock_DstAddr.addr.shortAddr = 0;
   \   000012   90....       MOV       DPTR,#zclSampleDoorLock_DstAddr
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   F0           MOVX      @DPTR,A
    353          
    354            // This app is part of the Home Automation Profile
    355            zclHA_Init( &zclSampleDoorLock_SimpleDesc );
   \   000018                ; Setup parameters for call to function zclHA_Init
   \   000018   7A..         MOV       R2,#zclSampleDoorLock_SimpleDesc & 0xff
   \   00001A   7B..         MOV       R3,#(zclSampleDoorLock_SimpleDesc >> 8) & 0xff
   \   00001C   12....       LCALL     `??zclHA_Init::?relay`; Banked call to: zclHA_Init
    356          
    357            // Register the ZCL General Cluster Library callback functions
    358            zclGeneral_RegisterCmdCallbacks( SAMPLEDOORLOCK_ENDPOINT, &zclSampleDoorLock_CmdCallbacks );
   \   00001F                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00001F   7A..         MOV       R2,#zclSampleDoorLock_CmdCallbacks & 0xff
   \   000021   7B..         MOV       R3,#(zclSampleDoorLock_CmdCallbacks >> 8) & 0xff
   \   000023   7908         MOV       R1,#0x8
   \   000025   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    359          
    360            // Register the application's attribute list
    361            zcl_registerAttrList( SAMPLEDOORLOCK_ENDPOINT, SAMPLEDOORLOCK_MAX_ATTRIBUTES, zclSampleDoorLock_Attrs );
   \   000028                ; Setup parameters for call to function zcl_registerAttrList
   \   000028   7C..         MOV       R4,#zclSampleDoorLock_Attrs & 0xff
   \   00002A   7D..         MOV       R5,#(zclSampleDoorLock_Attrs >> 8) & 0xff
   \   00002C   7A16         MOV       R2,#0x16
   \   00002E   7908         MOV       R1,#0x8
   \   000030   12....       LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    362          
    363            // Register the Application to receive the unprocessed Foundation command/response messages
    364            zcl_registerForMsg( zclSampleDoorLock_TaskID );
   \   000033                ; Setup parameters for call to function zcl_registerForMsg
   \   000033   90....       MOV       DPTR,#zclSampleDoorLock_TaskID
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F9           MOV       R1,A
   \   000038   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    365          
    366            // Register for all key events - This app will handle all key events
    367            RegisterForKeys( zclSampleDoorLock_TaskID );
   \   00003B                ; Setup parameters for call to function RegisterForKeys
   \   00003B   90....       MOV       DPTR,#zclSampleDoorLock_TaskID
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F9           MOV       R1,A
   \   000040   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    368          
    369            //Register the ZCL DoorLock Cluster Library callback function
    370            zclClosures_RegisterDoorLockCmdCallbacks( SAMPLEDOORLOCK_ENDPOINT, &zclSampleDoorLock_DoorLockCmdCallbacks );
   \   000043                ; Setup parameters for call to function zclClosures_RegisterDoorLockCmdCallbacks
   \   000043   7A..         MOV       R2,#zclSampleDoorLock_DoorLockCmdCallbacks & 0xff
   \   000045   7B..         MOV       R3,#(zclSampleDoorLock_DoorLockCmdCallbacks >> 8) & 0xff
   \   000047   7908         MOV       R1,#0x8
   \   000049   12....       LCALL     `??zclClosures_RegisterDoorLockCmdCallbacks::?re`; Banked call to: zclClosures_RegisterDoorLockCmdCallbacks
    371          
    372            // Register for a test endpoint
    373            afRegister( &sampleDoorLock_TestEp );
   \   00004C                ; Setup parameters for call to function afRegister
   \   00004C   7A..         MOV       R2,#sampleDoorLock_TestEp & 0xff
   \   00004E   7B..         MOV       R3,#(sampleDoorLock_TestEp >> 8) & 0xff
   \   000050   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    374          
    375          #ifdef ZCL_EZMODE
    376            // Register EZ-Mode
    377            zcl_RegisterEZMode( &zclSampleDoorLock_RegisterEZModeData );
   \   000053                ; Setup parameters for call to function zcl_RegisterEZMode
   \   000053   7A..         MOV       R2,#zclSampleDoorLock_RegisterEZModeData & 0xff
   \   000055   7B..         MOV       R3,#(zclSampleDoorLock_RegisterEZModeData >> 8) & 0xff
   \   000057   12....       LCALL     `??zcl_RegisterEZMode::?relay`; Banked call to: zcl_RegisterEZMode
    378          
    379            // Register with the ZDO to receive Match Descriptor Responses
    380            ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
   \   00005A                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00005A   7A06         MOV       R2,#0x6
   \   00005C   7B80         MOV       R3,#-0x80
   \   00005E   EE           MOV       A,R6
   \   00005F   F9           MOV       R1,A
   \   000060   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    381          #endif
    382          
    383          #ifdef LCD_SUPPORTED
    384            // display the device name
    385            HalLcdWriteString( (char *)sDeviceName, HAL_LCD_LINE_3 );
   \   000063                ; Setup parameters for call to function HalLcdWriteString
   \   000063   7903         MOV       R1,#0x3
   \   000065   7A..         MOV       R2,#sDeviceName & 0xff
   \   000067   7B..         MOV       R3,#(sDeviceName >> 8) & 0xff
   \   000069   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    386          #endif
    387          
    388            // initialize NVM for storing PIN information
    389            if ( SUCCESS == osal_nv_item_init( ZCD_NV_APS_DOORLOCK_PIN, 5, aiDoorLockMasterPINCode ) )
   \   00006C                ; Setup parameters for call to function osal_nv_item_init
   \   00006C   75....       MOV       ?V0,#aiDoorLockMasterPINCode & 0xff
   \   00006F   75....       MOV       ?V1,#(aiDoorLockMasterPINCode >> 8) & 0xff
   \   000072   78..         MOV       R0,#?V0
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000077   7C05         MOV       R4,#0x5
   \   000079   7D00         MOV       R5,#0x0
   \   00007B   7A02         MOV       R2,#0x2
   \   00007D   7B04         MOV       R3,#0x4
   \   00007F   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000082   7402         MOV       A,#0x2
   \   000084   12....       LCALL     ?DEALLOC_XSTACK8
   \   000087   E9           MOV       A,R1
   \   000088   7020         JNZ       ??zclSampleDoorLock_Init_0
    390              // use NVM PIN number in APP
    391              osal_nv_read( ZCD_NV_APS_DOORLOCK_PIN, 0, 5, aiDoorLockMasterPINCode );
   \   00008A                ; Setup parameters for call to function osal_nv_read
   \   00008A   78..         MOV       R0,#?V0
   \   00008C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008F   75..05       MOV       ?V0,#0x5
   \   000092   75..00       MOV       ?V1,#0x0
   \   000095   78..         MOV       R0,#?V0
   \   000097   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009A   7C00         MOV       R4,#0x0
   \   00009C   7D00         MOV       R5,#0x0
   \   00009E   7A02         MOV       R2,#0x2
   \   0000A0   7B04         MOV       R3,#0x4
   \   0000A2   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000A5   7404         MOV       A,#0x4
   \   0000A7   12....       LCALL     ?DEALLOC_XSTACK8
    392          }
   \                     ??zclSampleDoorLock_Init_0:
   \   0000AA   7F02         MOV       R7,#0x2
   \   0000AC   02....       LJMP      ?BANKED_LEAVE_XDATA
    393          
    394          /*********************************************************************
    395           * @fn          zclSample_event_loop
    396           *
    397           * @brief       Event Loop Processor for zclGeneral.
    398           *
    399           * @param       none
    400           *
    401           * @return      none
    402           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    403          uint16 zclSampleDoorLock_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleDoorLock_event_loop:
    404          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    405            afIncomingMSGPacket_t *MSGpkt;
    406          
    407            (void)task_id;  // Intentionally unreferenced parameter
    408          
    409            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL       A,#0x80
   \   000010   7046         JNZ       ??zclSampleDoorLock_event_loop_0
    410            {
    411              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleDoorLock_TaskID )) )
    412              {
    413                switch ( MSGpkt->hdr.event )
    414                {
    415          #ifdef ZCL_EZMODE
    416                  case ZDO_CB_MSG:
    417                    zclSampleDoorLock_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    418                    break;
    419          #endif
    420          
    421                  case MT_SYS_APP_MSG:
    422                    // Message received from MT
    423                    zclSampleDoorLock_ProcessAppMsg( ((mtSysAppMsg_t *)MSGpkt)->endpoint,
    424                                                    ((mtSysAppMsg_t *)MSGpkt)->appDataLen,
    425                                                    ((mtSysAppMsg_t *)MSGpkt)->appData );
    426                    break;
    427          
    428                  case ZCL_INCOMING_MSG:
    429                    // Incoming ZCL Foundation command/response messages
    430                    zclSampleDoorLock_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    431                    break;
    432          
    433                  case KEY_CHANGE:
    434                    zclSampleDoorLock_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    435                    break;
    436          
    437                  case ZDO_STATE_CHANGE:
    438                    zclSampleDoorLock_NwkState = (devStates_t)(MSGpkt->hdr.status);
    439          
    440                    // now on the network
    441                    if ( (zclSampleDoorLock_NwkState == DEV_ZB_COORD) ||
    442                         (zclSampleDoorLock_NwkState == DEV_ROUTER)   ||
    443                         (zclSampleDoorLock_NwkState == DEV_END_DEVICE) )
    444                    {
    445          #ifndef HOLD_AUTO_START
    446                      giDoorLockScreenMode = DOORLOCK_MAINMODE;
    447                      zclSampleDoorLock_LcdDisplayUpdate();
    448          #endif
    449          #ifdef ZCL_EZMODE
    450                      zcl_EZModeAction( EZMODE_ACTION_NETWORK_STARTED, NULL );
    451          #endif
    452                    }
    453                    break;
    454          
    455                  default:
    456                    break;
    457                }
    458          
    459                // Release the memory
    460                osal_msg_deallocate( (uint8 *)MSGpkt );
    461              }
    462          
    463              // return unprocessed events
    464              return (events ^ SYS_EVENT_MSG);
    465            }
    466          
    467            if ( events & SAMPLEDOORLOCK_IDENTIFY_TIMEOUT_EVT )
   \   000012   EE           MOV       A,R6
   \   000013   A2E0         MOV       C,0xE0 /* A   */.0
   \   000015   4003         JC        $+5
   \   000017   02....       LJMP      ??zclSampleDoorLock_event_loop_1 & 0xFFFF
    468            {
    469              if ( zclSampleDoorLock_IdentifyTime > 0 )
   \   00001A   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00001D   600C         JZ        ??zclSampleDoorLock_event_loop_2
    470                zclSampleDoorLock_IdentifyTime--;
   \   00001F   90....       MOV       DPTR,#zclSampleDoorLock_IdentifyTime
   \   000022   E0           MOVX      A,@DPTR
   \   000023   24FF         ADD       A,#-0x1
   \   000025   F0           MOVX      @DPTR,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   34FF         ADDC      A,#-0x1
   \   00002A   F0           MOVX      @DPTR,A
    471              zclSampleDoorLock_ProcessIdentifyTimeChange();
   \                     ??zclSampleDoorLock_event_loop_2:
   \   00002B                ; Setup parameters for call to function zclSampleDoorLock_ProcessIdentifyTimeChange
   \   00002B   12....       LCALL     `??zclSampleDoorLock_ProcessIdentifyTimeChange::`; Banked call to: zclSampleDoorLock_ProcessIdentifyTimeChange
    472          
    473              return ( events ^ SAMPLEDOORLOCK_IDENTIFY_TIMEOUT_EVT );
   \   00002E   EE           MOV       A,R6
   \   00002F   6401         XRL       A,#0x1
   \   000031   02....       LJMP      ??zclSampleDoorLock_event_loop_3 & 0xFFFF
    474            }
   \                     ??zclSampleDoorLock_event_loop_4:
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   90....       MOV       DPTR,#zclSampleDoorLock_NwkState
   \   000039   F0           MOVX      @DPTR,A
   \   00003A   6409         XRL       A,#0x9
   \   00003C   600A         JZ        ??zclSampleDoorLock_event_loop_5
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   6407         XRL       A,#0x7
   \   000041   6005         JZ        ??zclSampleDoorLock_event_loop_5
   \   000043   E0           MOVX      A,@DPTR
   \   000044   6406         XRL       A,#0x6
   \   000046   7009         JNZ       ??zclSampleDoorLock_event_loop_6
   \                     ??zclSampleDoorLock_event_loop_5:
   \   000048                ; Setup parameters for call to function zcl_EZModeAction
   \   000048   7A00         MOV       R2,#0x0
   \   00004A   7B00         MOV       R3,#0x0
   \   00004C   7902         MOV       R1,#0x2
   \   00004E   12....       LCALL     `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
   \                     ??zclSampleDoorLock_event_loop_6:
   \   000051                ; Setup parameters for call to function osal_msg_deallocate
   \   000051   AA..         MOV       R2,?V0
   \   000053   AB..         MOV       R3,?V1
   \   000055   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclSampleDoorLock_event_loop_0:
   \   000058                ; Setup parameters for call to function osal_msg_receive
   \   000058   90....       MOV       DPTR,#zclSampleDoorLock_TaskID
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F9           MOV       R1,A
   \   00005D   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000060   8A..         MOV       ?V0,R2
   \   000062   8B..         MOV       ?V1,R3
   \   000064   EA           MOV       A,R2
   \   000065   45..         ORL       A,?V1
   \   000067   7003         JNZ       $+5
   \   000069   02....       LJMP      ??zclSampleDoorLock_event_loop_7 & 0xFFFF
   \   00006C   8A82         MOV       DPL,R2
   \   00006E   8B83         MOV       DPH,R3
   \   000070   E0           MOVX      A,@DPTR
   \   000071   24DD         ADD       A,#-0x23
   \   000073   6040         JZ        ??zclSampleDoorLock_event_loop_8
   \   000075   24EF         ADD       A,#-0x11
   \   000077   6051         JZ        ??zclSampleDoorLock_event_loop_9
   \   000079   2474         ADD       A,#0x74
   \   00007B   7003         JNZ       $+5
   \   00007D   02....       LJMP      ??zclSampleDoorLock_event_loop_10 & 0xFFFF
   \   000080   24EF         ADD       A,#-0x11
   \   000082   60B0         JZ        ??zclSampleDoorLock_event_loop_4
   \   000084   24FE         ADD       A,#-0x2
   \   000086   70C9         JNZ       ??zclSampleDoorLock_event_loop_6
   \   000088   EA           MOV       A,R2
   \   000089   240C         ADD       A,#0xc
   \   00008B   F582         MOV       DPL,A
   \   00008D   E4           CLR       A
   \   00008E   35..         ADDC      A,?V1
   \   000090   F583         MOV       DPH,A
   \   000092   E0           MOVX      A,@DPTR
   \   000093   6406         XRL       A,#0x6
   \   000095   7004         JNZ       ??zclSampleDoorLock_event_loop_11
   \   000097   A3           INC       DPTR
   \   000098   E0           MOVX      A,@DPTR
   \   000099   6480         XRL       A,#0x80
   \                     ??zclSampleDoorLock_event_loop_11:
   \   00009B   70B4         JNZ       ??zclSampleDoorLock_event_loop_6
   \   00009D                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   00009D   12....       LCALL     `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   0000A0   8A..         MOV       ?V2,R2
   \   0000A2   8B..         MOV       ?V3,R3
   \   0000A4   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000A7   7905         MOV       R1,#0x5
   \   0000A9   12....       LCALL     `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
   \   0000AC                ; Setup parameters for call to function osal_mem_free
   \   0000AC   AA..         MOV       R2,?V2
   \   0000AE   AB..         MOV       R3,?V3
   \                     ??zclSampleDoorLock_event_loop_12:
   \   0000B0   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000B3   809C         SJMP      ??zclSampleDoorLock_event_loop_6
   \                     ??zclSampleDoorLock_event_loop_8:
   \   0000B5                ; Setup parameters for call to function zclSampleDoorLock_ProcessAppMsg
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   FC           MOV       R4,A
   \   0000BB   A3           INC       DPTR
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   FD           MOV       R5,A
   \   0000BE   8A82         MOV       DPL,R2
   \   0000C0   8B83         MOV       DPH,R3
   \   0000C2   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000C5   12....       LCALL     `??zclSampleDoorLock_ProcessAppMsg::?relay`; Banked call to: zclSampleDoorLock_ProcessAppMsg
   \   0000C8   8087         SJMP      ??zclSampleDoorLock_event_loop_6
   \                     ??zclSampleDoorLock_event_loop_9:
   \   0000CA   EA           MOV       A,R2
   \   0000CB   2417         ADD       A,#0x17
   \   0000CD   F8           MOV       R0,A
   \   0000CE   E4           CLR       A
   \   0000CF   35..         ADDC      A,?V1
   \   0000D1   F9           MOV       R1,A
   \   0000D2   E8           MOV       A,R0
   \   0000D3   FA           MOV       R2,A
   \   0000D4   E9           MOV       A,R1
   \   0000D5   FB           MOV       R3,A
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   A3           INC       DPTR
   \   0000DC   A3           INC       DPTR
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   14           DEC       A
   \   0000DF   6011         JZ        ??zclSampleDoorLock_event_loop_13
   \   0000E1   24FD         ADD       A,#-0x3
   \   0000E3   701A         JNZ       ??zclSampleDoorLock_event_loop_14
   \   0000E5   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   F9           MOV       R1,A
   \   0000EA   E8           MOV       A,R0
   \   0000EB   C3           CLR       C
   \   0000EC   99           SUBB      A,R1
   \   0000ED   5010         JNC       ??zclSampleDoorLock_event_loop_14
   \   0000EF   08           INC       R0
   \   0000F0   80F6         SJMP      ??CrossCallReturnLabel_40
   \                     ??zclSampleDoorLock_event_loop_13:
   \   0000F2   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000F5   8001         SJMP      ??zclSampleDoorLock_event_loop_15
   \                     ??zclSampleDoorLock_event_loop_16:
   \   0000F7   08           INC       R0
   \                     ??zclSampleDoorLock_event_loop_15:
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   F9           MOV       R1,A
   \   0000FA   E8           MOV       A,R0
   \   0000FB   C3           CLR       C
   \   0000FC   99           SUBB      A,R1
   \   0000FD   40F8         JC        ??zclSampleDoorLock_event_loop_16
   \                     ??zclSampleDoorLock_event_loop_14:
   \   0000FF   8A82         MOV       DPL,R2
   \   000101   8B83         MOV       DPH,R3
   \   000103   E0           MOVX      A,@DPTR
   \   000104   FA           MOV       R2,A
   \   000105   A3           INC       DPTR
   \   000106   E0           MOVX      A,@DPTR
   \   000107   FB           MOV       R3,A
   \   000108   EA           MOV       A,R2
   \   000109   4B           ORL       A,R3
   \   00010A   7003         JNZ       $+5
   \   00010C   02....       LJMP      ??zclSampleDoorLock_event_loop_6 & 0xFFFF
   \   00010F                ; Setup parameters for call to function osal_mem_free
   \   00010F   809F         SJMP      ??zclSampleDoorLock_event_loop_12
   \                     ??zclSampleDoorLock_event_loop_10:
   \   000111                ; Setup parameters for call to function zclSampleDoorLock_HandleKeys
   \   000111   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000114   12....       LCALL     `??zclSampleDoorLock_HandleKeys::?relay`; Banked call to: zclSampleDoorLock_HandleKeys
   \   000117   02....       LJMP      ??zclSampleDoorLock_event_loop_6 & 0xFFFF
   \                     ??zclSampleDoorLock_event_loop_7:
   \   00011A   EE           MOV       A,R6
   \   00011B   FA           MOV       R2,A
   \   00011C   EF           MOV       A,R7
   \   00011D   6480         XRL       A,#0x80
   \   00011F   8037         SJMP      ??zclSampleDoorLock_event_loop_17
    475          
    476            if ( events & SAMPLEDOORLOCK_MAIN_SCREEN_EVT )
   \                     ??zclSampleDoorLock_event_loop_1:
   \   000121   5410         ANL       A,#0x10
   \   000123   600D         JZ        ??zclSampleDoorLock_event_loop_18
    477            {
    478              giDoorLockScreenMode = DOORLOCK_MAINMODE;
   \   000125   90....       MOV       DPTR,#giDoorLockScreenMode
   \   000128   E4           CLR       A
   \   000129   F0           MOVX      @DPTR,A
    479          
    480              zclSampleDoorLock_LcdDisplayMainMode();
   \   00012A                ; Setup parameters for call to function zclSampleDoorLock_LcdDisplayMainMode
   \   00012A   12....       LCALL     `??zclSampleDoorLock_LcdDisplayMainMode::?relay`; Banked call to: zclSampleDoorLock_LcdDisplayMainMode
    481          
    482              return ( events ^ SAMPLEDOORLOCK_MAIN_SCREEN_EVT );
   \   00012D   EE           MOV       A,R6
   \   00012E   6410         XRL       A,#0x10
   \   000130   8024         SJMP      ??zclSampleDoorLock_event_loop_3
    483            }
    484          
    485          #ifdef ZCL_EZMODE
    486            // going on to next state
    487            if ( events & SAMPLEDOORLOCK_EZMODE_NEXTSTATE_EVT )
   \                     ??zclSampleDoorLock_event_loop_18:
   \   000132   EE           MOV       A,R6
   \   000133   5404         ANL       A,#0x4
   \   000135   600E         JZ        ??zclSampleDoorLock_event_loop_19
    488            {
    489              zcl_EZModeAction ( EZMODE_ACTION_PROCESS, NULL );   // going on to next state
   \   000137                ; Setup parameters for call to function zcl_EZModeAction
   \   000137   7A00         MOV       R2,#0x0
   \   000139   7B00         MOV       R3,#0x0
   \   00013B   7901         MOV       R1,#0x1
   \   00013D   12....       LCALL     `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
    490              return ( events ^ SAMPLEDOORLOCK_EZMODE_NEXTSTATE_EVT );
   \   000140   EE           MOV       A,R6
   \   000141   6404         XRL       A,#0x4
   \   000143   8011         SJMP      ??zclSampleDoorLock_event_loop_3
    491            }
    492          
    493            // the overall EZMode timer expired, so we timed out
    494            if ( events & SAMPLEDOORLOCK_EZMODE_TIMEOUT_EVT )
   \                     ??zclSampleDoorLock_event_loop_19:
   \   000145   EE           MOV       A,R6
   \   000146   5408         ANL       A,#0x8
   \   000148   7A00         MOV       R2,#0x0
   \   00014A   7B00         MOV       R3,#0x0
   \   00014C   600B         JZ        ??zclSampleDoorLock_event_loop_20
    495            {
    496              zcl_EZModeAction ( EZMODE_ACTION_TIMED_OUT, NULL ); // EZ-Mode timed out
   \   00014E                ; Setup parameters for call to function zcl_EZModeAction
   \   00014E   7963         MOV       R1,#0x63
   \   000150   12....       LCALL     `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
    497              return ( events ^ SAMPLEDOORLOCK_EZMODE_TIMEOUT_EVT );
   \   000153   EE           MOV       A,R6
   \   000154   6408         XRL       A,#0x8
   \                     ??zclSampleDoorLock_event_loop_3:
   \   000156   FA           MOV       R2,A
   \   000157   EF           MOV       A,R7
   \                     ??zclSampleDoorLock_event_loop_17:
   \   000158   FB           MOV       R3,A
    498            }
    499          #endif // ZLC_EZMODE
    500          
    501            // Discard unknown events
    502            return 0;
   \                     ??zclSampleDoorLock_event_loop_20:
   \   000159   7402         MOV       A,#0x2
   \   00015B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00015E   7F06         MOV       R7,#0x6
   \   000160   02....       LJMP      ?BANKED_LEAVE_XDATA
    503          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000007   8882         MOV       DPL,R0
   \   000009   8983         MOV       DPH,R1
   \   00000B   7800         MOV       R0,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FA           MOV       R2,A
   \   000005   85..82       MOV       DPL,?V0
   \   000008   8B83         MOV       DPH,R3
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F9           MOV       R1,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   90....       MOV       DPTR,#zclSampleDoorLock_IdentifyTime
   \   000003                REQUIRE ??Subroutine25_0
   \   000003                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   EA           MOV       A,R2
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   EB           MOV       A,R3
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B                ; Setup parameters for call to function zcl_EZModeAction
   \   00000B                ; Setup parameters for call to function zcl_EZModeAction
   \   00000B   AA..         MOV       R2,?XSP + 0
   \   00000D   AB..         MOV       R3,?XSP + 1
   \   00000F   22           RET
    504          
    505          /*********************************************************************
    506           * @fn      zclSampleDoorLock_HandleKeys
    507           *
    508           * @brief   Handles all key events for this device.
    509           *
    510           * @param   shift - true if in shift/alt.
    511           * @param   keys - bit field for key events. Valid entries:
    512           *                 HAL_KEY_SW_5
    513           *                 HAL_KEY_SW_4
    514           *                 HAL_KEY_SW_3
    515           *                 HAL_KEY_SW_2
    516           *                 HAL_KEY_SW_1
    517           *
    518           * @return  none
    519           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    520          static void zclSampleDoorLock_HandleKeys( byte shift, byte keys )
   \                     zclSampleDoorLock_HandleKeys:
    521          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   8A..         MOV       ?V1,R2
    522            uint8 numBuff;    // used to convert decimal to ASCII
    523          
    524            if ( keys & HAL_KEY_SW_1 )
   \   00000E   EA           MOV       A,R2
   \   00000F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000011   5077         JNC       ??zclSampleDoorLock_HandleKeys_0
    525            {
    526              // increase PIN number
    527              if ( giDoorLockScreenMode == DOORLOCK_PINMODE )
   \   000013   90....       MOV       DPTR,#giDoorLockScreenMode
   \   000016   E0           MOVX      A,@DPTR
   \   000017   6402         XRL       A,#0x2
   \   000019   7019         JNZ       ??zclSampleDoorLock_HandleKeys_1
    528              {
    529                if ( giDoorLockPINColumnCount < 4 )
   \   00001B   90....       MOV       DPTR,#giDoorLockPINColumnCount
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   C3           CLR       C
   \   000020   9404         SUBB      A,#0x4
   \   000022   5066         JNC       ??zclSampleDoorLock_HandleKeys_0
    530                {
    531                  if(giDoorLockPINCount > 8)
   \   000024   90....       MOV       DPTR,#giDoorLockPINCount
   \   000027   E0           MOVX      A,@DPTR
   \   000028   C3           CLR       C
   \   000029   9409         SUBB      A,#0x9
   \   00002B   4003         JC        ??zclSampleDoorLock_HandleKeys_2
    532                  {
    533                    giDoorLockPINCount = 0;
   \   00002D   E4           CLR       A
   \   00002E   8059         SJMP      ??zclSampleDoorLock_HandleKeys_3
    534                  }
    535                  else
    536                  {
    537                    giDoorLockPINCount++;
   \                     ??zclSampleDoorLock_HandleKeys_2:
   \   000030   E0           MOVX      A,@DPTR
   \   000031   04           INC       A
   \   000032   8055         SJMP      ??zclSampleDoorLock_HandleKeys_3
    538                  }
    539                }
    540              }
    541              // toggle door lock
    542              else
    543              {
    544                if ( zclSampleDoorLock_LockState == CLOSURES_LOCK_STATE_LOCKED )
   \                     ??zclSampleDoorLock_HandleKeys_1:
   \   000034   90....       MOV       DPTR,#zclSampleDoorLock_LockState
   \   000037   E0           MOVX      A,@DPTR
   \   000038   6401         XRL       A,#0x1
   \   00003A   7014         JNZ       ??zclSampleDoorLock_HandleKeys_4
    545                {
    546          #ifdef LCD_SUPPORTED
    547                  HalLcdWriteString( (char *)sDoorUnlocked, HAL_LCD_LINE_2);
   \   00003C                ; Setup parameters for call to function HalLcdWriteString
   \   00003C   7902         MOV       R1,#0x2
   \   00003E   7A..         MOV       R2,#sDoorUnlocked & 0xff
   \   000040   7B..         MOV       R3,#(sDoorUnlocked >> 8) & 0xff
   \   000042   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    548          #endif //LCD_SUPPORTED
    549                  HalLedSet( HAL_LED_1, HAL_LED_MODE_BLINK );
   \   000045                ; Setup parameters for call to function HalLedSet
   \   000045   7A02         MOV       R2,#0x2
   \   000047   7901         MOV       R1,#0x1
   \   000049   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    550                  HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
   \   00004C                ; Setup parameters for call to function HalLedSet
   \   00004C   7A00         MOV       R2,#0x0
   \   00004E   802F         SJMP      ??zclSampleDoorLock_HandleKeys_5
    551          
    552                  zclSampleDoorLock_LockState = CLOSURES_LOCK_STATE_UNLOCKED;
    553                }
    554                else if ( zclSampleDoorLock_LockState == CLOSURES_LOCK_STATE_UNLOCKED )
   \                     ??zclSampleDoorLock_HandleKeys_4:
   \   000050   7A..         MOV       R2,#sDoorLocked & 0xff
   \   000052   7B..         MOV       R3,#(sDoorLocked >> 8) & 0xff
   \   000054   E0           MOVX      A,@DPTR
   \   000055   6402         XRL       A,#0x2
   \   000057   7902         MOV       R1,#0x2
   \   000059   7018         JNZ       ??zclSampleDoorLock_HandleKeys_6
    555                {
    556          #ifdef LCD_SUPPORTED
    557                  HalLcdWriteString( (char *)sDoorLocked, HAL_LCD_LINE_2);
   \   00005B                ; Setup parameters for call to function HalLcdWriteString
   \   00005B   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    558          #endif //LCD_SUPPORTED
    559                  HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
   \   00005E                ; Setup parameters for call to function HalLedSet
   \   00005E   7A00         MOV       R2,#0x0
   \   000060   7901         MOV       R1,#0x1
   \   000062   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    560                  HalLedSet( HAL_LED_2, HAL_LED_MODE_BLINK );
   \   000065                ; Setup parameters for call to function HalLedSet
   \   000065   7A02         MOV       R2,#0x2
   \   000067   7902         MOV       R1,#0x2
   \   000069   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    561                  zclSampleDoorLock_LockState = CLOSURES_LOCK_STATE_LOCKED;
   \   00006C   90....       MOV       DPTR,#zclSampleDoorLock_LockState
   \   00006F   7401         MOV       A,#0x1
   \   000071   8016         SJMP      ??zclSampleDoorLock_HandleKeys_3
    562                }
    563                else
    564                {
    565          #ifdef LCD_SUPPORTED
    566                  HalLcdWriteString( (char *)sDoorLocked, HAL_LCD_LINE_2);
   \                     ??zclSampleDoorLock_HandleKeys_6:
   \   000073                ; Setup parameters for call to function HalLcdWriteString
   \   000073   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    567          #endif //LCD_SUPPORTED
    568                  HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
   \   000076                ; Setup parameters for call to function HalLedSet
   \   000076   7A00         MOV       R2,#0x0
   \   000078   7901         MOV       R1,#0x1
   \   00007A   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    569                  HalLedSet( HAL_LED_2, HAL_LED_MODE_BLINK );
   \   00007D                ; Setup parameters for call to function HalLedSet
   \   00007D   7A02         MOV       R2,#0x2
   \                     ??zclSampleDoorLock_HandleKeys_5:
   \   00007F   7902         MOV       R1,#0x2
   \   000081   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    570          
    571                  zclSampleDoorLock_LockState = CLOSURES_LOCK_STATE_UNLOCKED;
   \   000084   90....       MOV       DPTR,#zclSampleDoorLock_LockState
   \   000087   7402         MOV       A,#0x2
   \                     ??zclSampleDoorLock_HandleKeys_3:
   \   000089   F0           MOVX      @DPTR,A
    572                }
    573              }
    574            }
    575          
    576            if ( keys & HAL_KEY_SW_2 )
   \                     ??zclSampleDoorLock_HandleKeys_0:
   \   00008A   E5..         MOV       A,?V1
   \   00008C   A2E1         MOV       C,0xE0 /* A   */.1
   \   00008E   504C         JNC       ??zclSampleDoorLock_HandleKeys_7
    577            {
    578              if ( ( giDoorLockScreenMode == DOORLOCK_MAINMODE ) ||
    579                   ( giDoorLockScreenMode == DOORLOCK_HELPMODE ) )
   \   000090   90....       MOV       DPTR,#giDoorLockScreenMode
   \   000093   E0           MOVX      A,@DPTR
   \   000094   6004         JZ        ??zclSampleDoorLock_HandleKeys_8
   \   000096   6401         XRL       A,#0x1
   \   000098   7042         JNZ       ??zclSampleDoorLock_HandleKeys_7
    580              {
    581                giDoorLockScreenMode = DOORLOCK_MAINMODE;
   \                     ??zclSampleDoorLock_HandleKeys_8:
   \   00009A   E4           CLR       A
   \   00009B   F0           MOVX      @DPTR,A
    582          
    583          #ifdef ZCL_EZMODE
    584                {
    585                  // Invoke EZ-Mode
    586                  zclEZMode_InvokeData_t ezModeData;
    587          
    588                  // Invoke EZ-Mode
    589                  ezModeData.endpoint = SAMPLEDOORLOCK_ENDPOINT; // endpoint on which to invoke EZ-Mode
   \   00009C   04           INC       A
   \   00009D   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A0   7408         MOV       A,#0x8
   \   0000A2   F0           MOVX      @DPTR,A
    590                  if ( ( zclSampleDoorLock_NwkState == DEV_ZB_COORD ) ||
    591                       ( zclSampleDoorLock_NwkState == DEV_ROUTER )   ||
    592                       ( zclSampleDoorLock_NwkState == DEV_END_DEVICE ) )
   \   0000A3   90....       MOV       DPTR,#zclSampleDoorLock_NwkState
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   6409         XRL       A,#0x9
   \   0000A9   600A         JZ        ??zclSampleDoorLock_HandleKeys_9
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   6407         XRL       A,#0x7
   \   0000AE   6005         JZ        ??zclSampleDoorLock_HandleKeys_9
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   6406         XRL       A,#0x6
   \   0000B3   7009         JNZ       ??zclSampleDoorLock_HandleKeys_10
    593                  {
    594                    ezModeData.onNetwork = TRUE;      // node is already on the network
   \                     ??zclSampleDoorLock_HandleKeys_9:
   \   0000B5   7402         MOV       A,#0x2
   \   0000B7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BA   7401         MOV       A,#0x1
   \   0000BC   8006         SJMP      ??zclSampleDoorLock_HandleKeys_11
    595                  }
    596                  else
    597                  {
    598                    ezModeData.onNetwork = FALSE;     // node is not yet on the network
   \                     ??zclSampleDoorLock_HandleKeys_10:
   \   0000BE   7402         MOV       A,#0x2
   \   0000C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C3   E4           CLR       A
   \                     ??zclSampleDoorLock_HandleKeys_11:
   \   0000C4   F0           MOVX      @DPTR,A
    599                  }
    600                  ezModeData.initiator = FALSE;        // DoorLock Device is a target
   \   0000C5   7403         MOV       A,#0x3
   \   0000C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CA   E4           CLR       A
   \   0000CB   F0           MOVX      @DPTR,A
    601                  zcl_InvokeEZMode( &ezModeData );
   \   0000CC                ; Setup parameters for call to function zcl_InvokeEZMode
   \   0000CC   04           INC       A
   \   0000CD   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D0   12....       LCALL     `??zcl_InvokeEZMode::?relay`; Banked call to: zcl_InvokeEZMode
    602          
    603           #ifdef LCD_SUPPORTED
    604                  HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
   \   0000D3                ; Setup parameters for call to function HalLcdWriteString
   \   0000D3   7902         MOV       R1,#0x2
   \   0000D5   7A..         MOV       R2,#`?<Constant "EZMode">` & 0xff
   \   0000D7   7B..         MOV       R3,#(`?<Constant "EZMode">` >> 8) & 0xff
   \   0000D9   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    605           #endif
    606                }
    607          
    608          // NOT ZCL_EZMODE, Use EndDeviceBind
    609          #else
    610                {
    611                  zAddrType_t dstAddr;
    612                  // Initiate an End Device Bind Request, this bind request will
    613                  // only use a cluster list that is important to binding.
    614                  dstAddr.addrMode = afAddr16Bit;
    615                  dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
    616                  ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    617                                       SAMPLEDOORLOCK_ENDPOINT,
    618                                       ZCL_HA_PROFILE_ID,
    619                                       ZCLSAMPLEDOORLOCK_BINDINGLIST, bindingInClusters,
    620                                       0, NULL,   // No Outgoing clusters to bind
    621                                       TRUE );
    622                }
    623          #endif // ZCL_EZMODE
    624              }
    625            }
    626          
    627            if ( keys & HAL_KEY_SW_3 )
   \                     ??zclSampleDoorLock_HandleKeys_7:
   \   0000DC   E5..         MOV       A,?V1
   \   0000DE   A2E4         MOV       C,0xE0 /* A   */.4
   \   0000E0   5026         JNC       ??zclSampleDoorLock_HandleKeys_12
    628            {
    629              // decrease PIN number
    630              if ( giDoorLockScreenMode == DOORLOCK_PINMODE )
   \   0000E2   90....       MOV       DPTR,#giDoorLockScreenMode
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   6402         XRL       A,#0x2
   \   0000E8   90....       MOV       DPTR,#giDoorLockPINColumnCount
   \   0000EB   7013         JNZ       ??zclSampleDoorLock_HandleKeys_13
    631              {
    632                if ( giDoorLockPINColumnCount < 4 )
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   C3           CLR       C
   \   0000EF   9404         SUBB      A,#0x4
   \   0000F1   5015         JNC       ??zclSampleDoorLock_HandleKeys_12
    633                {
    634                  if ( giDoorLockPINCount < 1 )
   \   0000F3   90....       MOV       DPTR,#giDoorLockPINCount
   \   0000F6   E0           MOVX      A,@DPTR
   \   0000F7   7004         JNZ       ??zclSampleDoorLock_HandleKeys_14
    635                  {
    636                    giDoorLockPINCount = 9;
   \   0000F9   7409         MOV       A,#0x9
   \   0000FB   800A         SJMP      ??zclSampleDoorLock_HandleKeys_15
    637                  }
    638                  else
    639                  {
    640                    giDoorLockPINCount--;
   \                     ??zclSampleDoorLock_HandleKeys_14:
   \   0000FD   14           DEC       A
   \   0000FE   8007         SJMP      ??zclSampleDoorLock_HandleKeys_15
    641                  }
    642                }
    643              }
    644              else
    645              {
    646                giDoorLockPINColumnCount = 0;
   \                     ??zclSampleDoorLock_HandleKeys_13:
   \   000100   E4           CLR       A
   \   000101   F0           MOVX      @DPTR,A
    647                giDoorLockScreenMode = DOORLOCK_PINMODE;   // set to PIN screen
   \   000102   90....       MOV       DPTR,#giDoorLockScreenMode
   \   000105   7402         MOV       A,#0x2
   \                     ??zclSampleDoorLock_HandleKeys_15:
   \   000107   F0           MOVX      @DPTR,A
    648              }
    649            }
    650          
    651            if ( keys & HAL_KEY_SW_4 )
   \                     ??zclSampleDoorLock_HandleKeys_12:
   \   000108   E5..         MOV       A,?V1
   \   00010A   A2E3         MOV       C,0xE0 /* A   */.3
   \   00010C   5045         JNC       ??zclSampleDoorLock_HandleKeys_16
    652            {
    653              if ( giDoorLockScreenMode == DOORLOCK_HELPMODE )
   \   00010E   90....       MOV       DPTR,#giDoorLockScreenMode
   \   000111   E0           MOVX      A,@DPTR
   \   000112   6401         XRL       A,#0x1
   \   000114   7002         JNZ       ??zclSampleDoorLock_HandleKeys_17
    654              {
    655                giDoorLockScreenMode = DOORLOCK_MAINMODE;
   \   000116   E4           CLR       A
   \   000117   F0           MOVX      @DPTR,A
    656              }
    657          
    658              if ( ( zclSampleDoorLock_NwkState == DEV_ZB_COORD ) ||
    659                   ( zclSampleDoorLock_NwkState == DEV_ROUTER ) )
   \                     ??zclSampleDoorLock_HandleKeys_17:
   \   000118   90....       MOV       DPTR,#zclSampleDoorLock_NwkState
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   6409         XRL       A,#0x9
   \   00011E   6005         JZ        ??zclSampleDoorLock_HandleKeys_18
   \   000120   E0           MOVX      A,@DPTR
   \   000121   6407         XRL       A,#0x7
   \   000123   702E         JNZ       ??zclSampleDoorLock_HandleKeys_16
    660              {
    661                zAddrType_t tmpAddr;
    662          
    663                tmpAddr.addrMode = Addr16Bit;
   \                     ??zclSampleDoorLock_HandleKeys_18:
   \   000125   7409         MOV       A,#0x9
   \   000127   12....       LCALL     ?XSTACK_DISP0_8
   \   00012A   7402         MOV       A,#0x2
   \   00012C   F0           MOVX      @DPTR,A
    664                tmpAddr.addr.shortAddr = NLME_GetShortAddr();
   \   00012D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00012D   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000130   7401         MOV       A,#0x1
   \   000132   12....       LCALL     ?XSTACK_DISP0_8
   \   000135   EA           MOV       A,R2
   \   000136   F0           MOVX      @DPTR,A
   \   000137   A3           INC       DPTR
   \   000138   EB           MOV       A,R3
   \   000139   F0           MOVX      @DPTR,A
    665          
    666                // toggle permit join
    667                gPermitDuration = gPermitDuration ? 0 : 0xff;
   \   00013A   90....       MOV       DPTR,#gPermitDuration
   \   00013D   E0           MOVX      A,@DPTR
   \   00013E   6003         JZ        ??zclSampleDoorLock_HandleKeys_19
   \   000140   E4           CLR       A
   \   000141   8002         SJMP      ??zclSampleDoorLock_HandleKeys_20
   \                     ??zclSampleDoorLock_HandleKeys_19:
   \   000143   74FF         MOV       A,#-0x1
   \                     ??zclSampleDoorLock_HandleKeys_20:
   \   000145   F0           MOVX      @DPTR,A
    668          
    669                // Trust Center significance is always true
    670                ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
   \   000146                ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
   \   000146   7D00         MOV       R5,#0x0
   \   000148   7C01         MOV       R4,#0x1
   \   00014A   E0           MOVX      A,@DPTR
   \   00014B   F9           MOV       R1,A
   \   00014C   EC           MOV       A,R4
   \   00014D   12....       LCALL     ?XSTACK_DISP101_8
   \   000150   12....       LCALL     `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
    671              }
    672            }
    673          
    674            if ( shift && ( keys & HAL_KEY_SW_5 ) )
   \                     ??zclSampleDoorLock_HandleKeys_16:
   \   000153   E5..         MOV       A,?V0
   \   000155   600F         JZ        ??zclSampleDoorLock_HandleKeys_21
   \   000157   E5..         MOV       A,?V1
   \   000159   A2E2         MOV       C,0xE0 /* A   */.2
   \   00015B   4003         JC        $+5
   \   00015D   02....       LJMP      ??zclSampleDoorLock_HandleKeys_22 & 0xFFFF
    675            {
    676              zclSampleDoorLock_BasicResetCB();
   \   000160                ; Setup parameters for call to function zclSampleDoorLock_BasicResetCB
   \   000160   12....       LCALL     `??zclSampleDoorLock_BasicResetCB::?relay`; Banked call to: zclSampleDoorLock_BasicResetCB
   \   000163   02....       LJMP      ??zclSampleDoorLock_HandleKeys_22 & 0xFFFF
    677            }
    678            else if ( keys & HAL_KEY_SW_5 )
   \                     ??zclSampleDoorLock_HandleKeys_21:
   \   000166   E5..         MOV       A,?V1
   \   000168   A2E2         MOV       C,0xE0 /* A   */.2
   \   00016A   4003         JC        $+5
   \   00016C   02....       LJMP      ??zclSampleDoorLock_HandleKeys_22 & 0xFFFF
    679            {
    680              // for Master PIN screen
    681              if ( giDoorLockScreenMode == DOORLOCK_PINMODE )
   \   00016F   90....       MOV       DPTR,#giDoorLockScreenMode
   \   000172   E0           MOVX      A,@DPTR
   \   000173   6402         XRL       A,#0x2
   \   000175   707B         JNZ       ??zclSampleDoorLock_HandleKeys_23
    682              {
    683                if ( giDoorLockPINCount > 0 )
   \   000177   90....       MOV       DPTR,#giDoorLockPINCount
   \   00017A   E0           MOVX      A,@DPTR
   \   00017B   601C         JZ        ??zclSampleDoorLock_HandleKeys_24
    684                {
    685                  _itoa(giDoorLockPINCount, &numBuff, 10);  // convert number to ASCII
   \   00017D                ; Setup parameters for call to function _itoa
   \   00017D   790A         MOV       R1,#0xa
   \   00017F   AC..         MOV       R4,?XSP + 0
   \   000181   AD..         MOV       R5,?XSP + 1
   \   000183   FA           MOV       R2,A
   \   000184   7B00         MOV       R3,#0x0
   \   000186   12....       LCALL     `??_itoa::?relay`; Banked call to: _itoa
    686          
    687                  aiDoorLockMasterPINCode[giDoorLockPINColumnCount + 1] = numBuff;   // copy current PIN number
   \   000189   85..82       MOV       DPL,?XSP + 0
   \   00018C   85..83       MOV       DPH,?XSP + 1
   \   00018F   E0           MOVX      A,@DPTR
   \   000190   C0E0         PUSH      A
   \   000192   12....       LCALL     ?Subroutine13 & 0xFFFF
    688                }
   \                     ??CrossCallReturnLabel_36:
   \   000195   D0E0         POP       A
   \   000197   8005         SJMP      ??zclSampleDoorLock_HandleKeys_25
    689                else
    690                {
    691                  // make sure '0' is copied into PIN variable
    692                  aiDoorLockMasterPINCode[giDoorLockPINColumnCount + 1] = 0x30;   // ASCII '0'
   \                     ??zclSampleDoorLock_HandleKeys_24:
   \   000199   12....       LCALL     ?Subroutine13 & 0xFFFF
    693                }
   \                     ??CrossCallReturnLabel_37:
   \   00019C   7430         MOV       A,#0x30
   \                     ??zclSampleDoorLock_HandleKeys_25:
   \   00019E   F0           MOVX      @DPTR,A
    694          
    695                if(giDoorLockPINColumnCount < 3)
   \   00019F   90....       MOV       DPTR,#giDoorLockPINColumnCount
   \   0001A2   E0           MOVX      A,@DPTR
   \   0001A3   C3           CLR       C
   \   0001A4   9403         SUBB      A,#0x3
   \   0001A6   5004         JNC       ??zclSampleDoorLock_HandleKeys_26
    696                {
    697                  giDoorLockPINColumnCount++;   // adjust PIN column
   \   0001A8   E0           MOVX      A,@DPTR
   \   0001A9   04           INC       A
   \   0001AA   804B         SJMP      ??zclSampleDoorLock_HandleKeys_27
    698                }
    699                else
    700                {
    701                  giDoorLockPINColumnCount = 4;   // hold here until PIN screen reset
   \                     ??zclSampleDoorLock_HandleKeys_26:
   \   0001AC   7404         MOV       A,#0x4
   \   0001AE   F0           MOVX      @DPTR,A
    702                  giDoorLockPINCount = 0;   // reset PIN count
   \   0001AF   90....       MOV       DPTR,#giDoorLockPINCount
   \   0001B2   E4           CLR       A
   \   0001B3   F0           MOVX      @DPTR,A
    703          
    704                  // store PIN to NVM
    705                  osal_nv_write( ZCD_NV_APS_DOORLOCK_PIN, 0, 5, aiDoorLockMasterPINCode );
   \   0001B4                ; Setup parameters for call to function osal_nv_write
   \   0001B4   75....       MOV       ?V2,#aiDoorLockMasterPINCode & 0xff
   \   0001B7   75....       MOV       ?V3,#(aiDoorLockMasterPINCode >> 8) & 0xff
   \   0001BA   78..         MOV       R0,#?V2
   \   0001BC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BF   75..05       MOV       ?V2,#0x5
   \   0001C2   75..00       MOV       ?V3,#0x0
   \   0001C5   78..         MOV       R0,#?V2
   \   0001C7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001CA   7C00         MOV       R4,#0x0
   \   0001CC   7D00         MOV       R5,#0x0
   \   0001CE   7A02         MOV       R2,#0x2
   \   0001D0   7B04         MOV       R3,#0x4
   \   0001D2   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0001D5   7404         MOV       A,#0x4
   \   0001D7   12....       LCALL     ?DEALLOC_XSTACK8
    706          #ifdef LCD_SUPPORTED
    707                  HalLcdWriteString( (char *)sStorePIN, HAL_LCD_LINE_2 );
   \   0001DA                ; Setup parameters for call to function HalLcdWriteString
   \   0001DA   7902         MOV       R1,#0x2
   \   0001DC   7A..         MOV       R2,#sStorePIN & 0xff
   \   0001DE   7B..         MOV       R3,#(sStorePIN >> 8) & 0xff
   \   0001E0   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    708                  HalLcdWriteString( (char *)sClearLine, HAL_LCD_LINE_3 );
   \   0001E3                ; Setup parameters for call to function HalLcdWriteString
   \   0001E3   7903         MOV       R1,#0x3
   \   0001E5   7A..         MOV       R2,#sClearLine & 0xff
   \   0001E7   7B..         MOV       R3,#(sClearLine >> 8) & 0xff
   \   0001E9   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    709          #endif
    710                  giDoorLockScreenMode = DOORLOCK_MAINMODE;
   \   0001EC   90....       MOV       DPTR,#giDoorLockScreenMode
   \   0001EF   E4           CLR       A
   \   0001F0   8005         SJMP      ??zclSampleDoorLock_HandleKeys_27
    711                }
    712              }
    713              else if ( giDoorLockScreenMode == DOORLOCK_MAINMODE )
   \                     ??zclSampleDoorLock_HandleKeys_23:
   \   0001F2   E0           MOVX      A,@DPTR
   \   0001F3   7005         JNZ       ??zclSampleDoorLock_HandleKeys_28
    714              {
    715                giDoorLockScreenMode = DOORLOCK_HELPMODE;
   \   0001F5   7401         MOV       A,#0x1
   \                     ??zclSampleDoorLock_HandleKeys_27:
   \   0001F7   F0           MOVX      @DPTR,A
   \   0001F8   800B         SJMP      ??zclSampleDoorLock_HandleKeys_22
    716              }
    717              else
    718              {
    719                giDoorLockScreenMode = DOORLOCK_MAINMODE;
   \                     ??zclSampleDoorLock_HandleKeys_28:
   \   0001FA   E4           CLR       A
   \   0001FB   F0           MOVX      @DPTR,A
    720          #ifdef LCD_SUPPORTED
    721                HalLcdWriteString( (char *)sClearLine, HAL_LCD_LINE_2 );
   \   0001FC                ; Setup parameters for call to function HalLcdWriteString
   \   0001FC   7902         MOV       R1,#0x2
   \   0001FE   7A..         MOV       R2,#sClearLine & 0xff
   \   000200   7B..         MOV       R3,#(sClearLine >> 8) & 0xff
   \   000202   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    722          #endif
    723              }
    724            }
    725          
    726            // update display
    727            zclSampleDoorLock_LcdDisplayUpdate();
   \                     ??zclSampleDoorLock_HandleKeys_22:
   \   000205                ; Setup parameters for call to function zclSampleDoorLock_LcdDisplayUpdate
   \   000205   12....       LCALL     `??zclSampleDoorLock_LcdDisplayUpdate::?relay`; Banked call to: zclSampleDoorLock_LcdDisplayUpdate
    728          }
   \   000208   740A         MOV       A,#0xa
   \   00020A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00020D   7F04         MOV       R7,#0x4
   \   00020F   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV       DPTR,#giDoorLockPINColumnCount
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   74..         MOV       A,#(aiDoorLockMasterPINCode + 1) & 0xff
   \   000007   28           ADD       A,R0
   \   000008   F582         MOV       DPL,A
   \   00000A   E4           CLR       A
   \   00000B   34..         ADDC      A,#((aiDoorLockMasterPINCode + 1) >> 8) & 0xff
   \   00000D   F583         MOV       DPH,A
   \   00000F   22           RET
    729          
    730          /*********************************************************************
    731           * @fn      zclSampleDoorLock_LcdDisplayUpdate
    732           *
    733           * @brief   Called to update the LCD display.
    734           *
    735           * @param   none
    736           *
    737           * @return  none
    738           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    739          void zclSampleDoorLock_LcdDisplayUpdate(void)
   \                     zclSampleDoorLock_LcdDisplayUpdate:
    740          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    741            if ( giDoorLockScreenMode == DOORLOCK_PINMODE )
   \   000004   90....       MOV       DPTR,#giDoorLockScreenMode
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6402         XRL       A,#0x2
   \   00000A   7005         JNZ       ??zclSampleDoorLock_LcdDisplayUpdate_0
    742            {
    743              zclSampleDoorLock_LcdDisplayPINMode();
   \   00000C                ; Setup parameters for call to function zclSampleDoorLock_LcdDisplayPINMode
   \   00000C   12....       LCALL     `??zclSampleDoorLock_LcdDisplayPINMode::?relay`; Banked call to: zclSampleDoorLock_LcdDisplayPINMode
   \   00000F   800D         SJMP      ??zclSampleDoorLock_LcdDisplayUpdate_1
    744            }
    745            else if ( giDoorLockScreenMode == DOORLOCK_HELPMODE )
   \                     ??zclSampleDoorLock_LcdDisplayUpdate_0:
   \   000011   E0           MOVX      A,@DPTR
   \   000012   6401         XRL       A,#0x1
   \   000014   7005         JNZ       ??zclSampleDoorLock_LcdDisplayUpdate_2
    746            {
    747              zclSampleDoorLock_LcdDisplayHelpMode();
   \   000016                ; Setup parameters for call to function zclSampleDoorLock_LcdDisplayHelpMode
   \   000016   12....       LCALL     `??zclSampleDoorLock_LcdDisplayHelpMode::?relay`; Banked call to: zclSampleDoorLock_LcdDisplayHelpMode
   \   000019   8003         SJMP      ??zclSampleDoorLock_LcdDisplayUpdate_1
    748            }
    749            else
    750            {
    751              zclSampleDoorLock_LcdDisplayMainMode();
   \                     ??zclSampleDoorLock_LcdDisplayUpdate_2:
   \   00001B                ; Setup parameters for call to function zclSampleDoorLock_LcdDisplayMainMode
   \   00001B   12....       LCALL     `??zclSampleDoorLock_LcdDisplayMainMode::?relay`; Banked call to: zclSampleDoorLock_LcdDisplayMainMode
    752            }
    753          }
   \                     ??zclSampleDoorLock_LcdDisplayUpdate_1:
   \   00001E   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    754          
    755          /*********************************************************************
    756           * @fn      zclSampleDoorLock_LcdDisplayMainMode
    757           *
    758           * @brief   Called to display the main screen on the LCD.
    759           *
    760           * @param   none
    761           *
    762           * @return  none
    763           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    764          void zclSampleDoorLock_LcdDisplayMainMode(void)
   \                     zclSampleDoorLock_LcdDisplayMainMode:
    765          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    766            char sPermitJoinStatus[16];
    767          
    768            if ( zclSampleDoorLock_NwkState == DEV_ZB_COORD )
   \   00000A   90....       MOV       DPTR,#zclSampleDoorLock_NwkState
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6409         XRL       A,#0x9
   \   000010   7004         JNZ       ??zclSampleDoorLock_LcdDisplayMainMode_0
    769            {
    770              zclHA_LcdStatusLine1( ZCL_HA_DEVICE_COORDINATOR );
   \   000012                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   000012   7900         MOV       R1,#0x0
   \   000014   8010         SJMP      ??zclSampleDoorLock_LcdDisplayMainMode_1
    771            }
    772            else if ( zclSampleDoorLock_NwkState == DEV_ROUTER )
   \                     ??zclSampleDoorLock_LcdDisplayMainMode_0:
   \   000016   E0           MOVX      A,@DPTR
   \   000017   6407         XRL       A,#0x7
   \   000019   7004         JNZ       ??zclSampleDoorLock_LcdDisplayMainMode_2
    773            {
    774              zclHA_LcdStatusLine1( ZCL_HA_DEVICE_ROUTER );
   \   00001B                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   00001B   7901         MOV       R1,#0x1
   \   00001D   8007         SJMP      ??zclSampleDoorLock_LcdDisplayMainMode_1
    775            }
    776            else if ( zclSampleDoorLock_NwkState == DEV_END_DEVICE )
   \                     ??zclSampleDoorLock_LcdDisplayMainMode_2:
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6406         XRL       A,#0x6
   \   000022   7047         JNZ       ??zclSampleDoorLock_LcdDisplayMainMode_3
    777            {
    778              zclHA_LcdStatusLine1( ZCL_HA_DEVICE_END_DEVICE );
   \   000024                ; Setup parameters for call to function zclHA_LcdStatusLine1
   \   000024   7902         MOV       R1,#0x2
   \                     ??zclSampleDoorLock_LcdDisplayMainMode_1:
   \   000026   12....       LCALL     `??zclHA_LcdStatusLine1::?relay`; Banked call to: zclHA_LcdStatusLine1
    779            }
    780          
    781          #ifdef LCD_SUPPORTED
    782            if ( ( zclSampleDoorLock_NwkState == DEV_ZB_COORD ) ||
    783                 ( zclSampleDoorLock_NwkState == DEV_ROUTER ) )
   \   000029   90....       MOV       DPTR,#zclSampleDoorLock_NwkState
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   6409         XRL       A,#0x9
   \   00002F   6005         JZ        ??zclSampleDoorLock_LcdDisplayMainMode_4
   \   000031   E0           MOVX      A,@DPTR
   \   000032   6407         XRL       A,#0x7
   \   000034   7035         JNZ       ??zclSampleDoorLock_LcdDisplayMainMode_3
    784            {
    785              if ( gPermitDuration )
   \                     ??zclSampleDoorLock_LcdDisplayMainMode_4:
   \   000036   90....       MOV       DPTR,#gPermitDuration
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   6008         JZ        ??zclSampleDoorLock_LcdDisplayMainMode_5
    786              {
    787                osal_memcpy(sPermitJoinStatus, "SW5: Help      *", 16);
   \   00003C                ; Setup parameters for call to function osal_memcpy
   \   00003C   75....       MOV       ?V0,#`?<Constant "SW5: Help      *">` & 0xff
   \   00003F   75....       MOV       ?V1,#(`?<Constant "SW5: Help      *">` >> 8) & 0xff
   \   000042   8006         SJMP      ??zclSampleDoorLock_LcdDisplayMainMode_6
    788              }
    789              else
    790              {
    791                osal_memcpy(sPermitJoinStatus, "SW5: Help       ", 16);
   \                     ??zclSampleDoorLock_LcdDisplayMainMode_5:
   \   000044                ; Setup parameters for call to function osal_memcpy
   \   000044   75....       MOV       ?V0,#`?<Constant "SW5: Help       ">` & 0xff
   \   000047   75....       MOV       ?V1,#(`?<Constant "SW5: Help       ">` >> 8) & 0xff
   \                     ??zclSampleDoorLock_LcdDisplayMainMode_6:
   \   00004A   75..00       MOV       ?V2,#0x0
   \   00004D   78..         MOV       R0,#?V0
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000052   7C10         MOV       R4,#0x10
   \   000054   7D00         MOV       R5,#0x0
   \   000056   7403         MOV       A,#0x3
   \   000058   12....       LCALL     ?XSTACK_DISP101_8
   \   00005B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00005E   7403         MOV       A,#0x3
   \   000060   12....       LCALL     ?DEALLOC_XSTACK8
    792              }
    793              // display help key with permit join status
    794              HalLcdWriteString( (char *)sPermitJoinStatus, HAL_LCD_LINE_3 );
   \   000063                ; Setup parameters for call to function HalLcdWriteString
   \   000063   7903         MOV       R1,#0x3
   \   000065   AA..         MOV       R2,?XSP + 0
   \   000067   AB..         MOV       R3,?XSP + 1
   \   000069   8006         SJMP      ??zclSampleDoorLock_LcdDisplayMainMode_7
    795            }
    796            else
    797            {
    798              // display help key
    799              HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
   \                     ??zclSampleDoorLock_LcdDisplayMainMode_3:
   \   00006B                ; Setup parameters for call to function HalLcdWriteString
   \   00006B   7903         MOV       R1,#0x3
   \   00006D   7A..         MOV       R2,#sSwHelp & 0xff
   \   00006F   7B..         MOV       R3,#(sSwHelp >> 8) & 0xff
    800            }
   \                     ??zclSampleDoorLock_LcdDisplayMainMode_7:
   \   000071                REQUIRE ?Subroutine1
   \   000071                ; // Fall through to label ?Subroutine1
    801          #endif
    802          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000003   7410         MOV       A,#0x10
   \   000005   12....       LCALL     ?DEALLOC_XSTACK8
   \   000008   7F03         MOV       R7,#0x3
   \   00000A   02....       LJMP      ?BANKED_LEAVE_XDATA
    803          
    804          /*********************************************************************
    805           * @fn      zclSampleDoorLock_LcdDisplayHelpMode
    806           *
    807           * @brief   Called to update the LCD display with permit join information.
    808           *
    809           * @param   none
    810           *
    811           * @return  none
    812           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    813          void zclSampleDoorLock_LcdDisplayHelpMode(void)
   \                     zclSampleDoorLock_LcdDisplayHelpMode:
    814          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    815          #ifdef LCD_SUPPORTED
    816            HalLcdWriteString( (char *)sSwDoorLock, HAL_LCD_LINE_1 );
   \   000004                ; Setup parameters for call to function HalLcdWriteString
   \   000004   7901         MOV       R1,#0x1
   \   000006   7A..         MOV       R2,#sSwDoorLock & 0xff
   \   000008   7B..         MOV       R3,#(sSwDoorLock >> 8) & 0xff
   \   00000A   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    817            HalLcdWriteString( (char *)sSwEZMode, HAL_LCD_LINE_2 );
   \   00000D                ; Setup parameters for call to function HalLcdWriteString
   \   00000D   7902         MOV       R1,#0x2
   \   00000F   7A..         MOV       R2,#sSwEZMode & 0xff
   \   000011   7B..         MOV       R3,#(sSwEZMode >> 8) & 0xff
   \   000013   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    818            HalLcdWriteString( (char *)sSwPIN, HAL_LCD_LINE_3 );
   \   000016                ; Setup parameters for call to function HalLcdWriteString
   \   000016   7903         MOV       R1,#0x3
   \   000018   7A..         MOV       R2,#sSwPIN & 0xff
   \   00001A   7B..         MOV       R3,#(sSwPIN >> 8) & 0xff
   \   00001C   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    819          #endif
    820          }
   \   00001F   02....       LJMP      ?Subroutine0 & 0xFFFF
    821          
    822          /*********************************************************************
    823           * @fn      zclSampleDoorLock_LcdDisplayPINMode
    824           *
    825           * @brief   Called to display the PIN screen on the LCD.
    826           *
    827           * @param   none
    828           *
    829           * @return  none
    830           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    831          void zclSampleDoorLock_LcdDisplayPINMode(void)
   \                     zclSampleDoorLock_LcdDisplayPINMode:
    832          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    833            char sDisplayPIN[16];
    834          
    835            // cover appropriate columns with security '*'
    836            if ( giDoorLockPINColumnCount == 0 )
   \   00000A   90....       MOV       DPTR,#giDoorLockPINColumnCount
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   7012         JNZ       ??zclSampleDoorLock_LcdDisplayPINMode_0
    837            {
    838              osal_memcpy(sDisplayPIN, "Enter PIN: ", 11);
   \   000010                ; Setup parameters for call to function osal_memcpy
   \   000010   75....       MOV       ?V0,#`?<Constant "Enter PIN: ">` & 0xff
   \   000013   75....       MOV       ?V1,#(`?<Constant "Enter PIN: ">` >> 8) & 0xff
   \   000016   75..00       MOV       ?V2,#0x0
   \   000019   78..         MOV       R0,#?V0
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00001E   7C0B         MOV       R4,#0xb
   \   000020   8042         SJMP      ??zclSampleDoorLock_LcdDisplayPINMode_1
    839              _ltoa(giDoorLockPINCount, (void *)(&sDisplayPIN[11 + giDoorLockPINColumnCount]), 10);
    840            }
    841            else if ( giDoorLockPINColumnCount == 1 )
   \                     ??zclSampleDoorLock_LcdDisplayPINMode_0:
   \   000022   6401         XRL       A,#0x1
   \   000024   7012         JNZ       ??zclSampleDoorLock_LcdDisplayPINMode_2
    842            {
    843              osal_memcpy(sDisplayPIN, "Enter PIN: *", 12);
   \   000026                ; Setup parameters for call to function osal_memcpy
   \   000026   75....       MOV       ?V0,#`?<Constant "Enter PIN: *">` & 0xff
   \   000029   75....       MOV       ?V1,#(`?<Constant "Enter PIN: *">` >> 8) & 0xff
   \   00002C   75..00       MOV       ?V2,#0x0
   \   00002F   78..         MOV       R0,#?V0
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000034   7C0C         MOV       R4,#0xc
   \   000036   802C         SJMP      ??zclSampleDoorLock_LcdDisplayPINMode_1
    844              _ltoa(giDoorLockPINCount, (void *)(&sDisplayPIN[11 + giDoorLockPINColumnCount]), 10);
    845            }
    846            else if ( giDoorLockPINColumnCount == 2 )
   \                     ??zclSampleDoorLock_LcdDisplayPINMode_2:
   \   000038   E0           MOVX      A,@DPTR
   \   000039   6402         XRL       A,#0x2
   \   00003B   7012         JNZ       ??zclSampleDoorLock_LcdDisplayPINMode_3
    847            {
    848              osal_memcpy(sDisplayPIN, "Enter PIN: **", 13);
   \   00003D                ; Setup parameters for call to function osal_memcpy
   \   00003D   75....       MOV       ?V0,#`?<Constant "Enter PIN: **">` & 0xff
   \   000040   75....       MOV       ?V1,#(`?<Constant "Enter PIN: **">` >> 8) & 0xff
   \   000043   75..00       MOV       ?V2,#0x0
   \   000046   78..         MOV       R0,#?V0
   \   000048   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00004B   7C0D         MOV       R4,#0xd
   \   00004D   8015         SJMP      ??zclSampleDoorLock_LcdDisplayPINMode_1
    849              _ltoa(giDoorLockPINCount, (void *)(&sDisplayPIN[11 + giDoorLockPINColumnCount]), 10);
    850            }
    851            else if ( giDoorLockPINColumnCount == 3 )
   \                     ??zclSampleDoorLock_LcdDisplayPINMode_3:
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   6403         XRL       A,#0x3
   \   000052   7055         JNZ       ??zclSampleDoorLock_LcdDisplayPINMode_4
    852            {
    853              osal_memcpy(sDisplayPIN, "Enter PIN: ***", 14);
   \   000054                ; Setup parameters for call to function osal_memcpy
   \   000054   75....       MOV       ?V0,#`?<Constant "Enter PIN: ***">` & 0xff
   \   000057   75....       MOV       ?V1,#(`?<Constant "Enter PIN: ***">` >> 8) & 0xff
   \   00005A   75..00       MOV       ?V2,#0x0
   \   00005D   78..         MOV       R0,#?V0
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000062   7C0E         MOV       R4,#0xe
   \                     ??zclSampleDoorLock_LcdDisplayPINMode_1:
   \   000064   7D00         MOV       R5,#0x0
   \   000066   7403         MOV       A,#0x3
   \   000068   12....       LCALL     ?XSTACK_DISP101_8
   \   00006B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006E   7403         MOV       A,#0x3
   \   000070   12....       LCALL     ?DEALLOC_XSTACK8
    854              _ltoa(giDoorLockPINCount, (void *)(&sDisplayPIN[11 + giDoorLockPINColumnCount]), 10);
   \   000073                ; Setup parameters for call to function _ltoa
   \   000073   90....       MOV       DPTR,#giDoorLockPINColumnCount
   \   000076   E0           MOVX      A,@DPTR
   \   000077   F8           MOV       R0,A
   \   000078   85..82       MOV       DPL,?XSP + 0
   \   00007B   85..83       MOV       DPH,?XSP + 1
   \   00007E   E582         MOV       A,DPL
   \   000080   28           ADD       A,R0
   \   000081   F8           MOV       R0,A
   \   000082   E4           CLR       A
   \   000083   3583         ADDC      A,DPH
   \   000085   F9           MOV       R1,A
   \   000086   E8           MOV       A,R0
   \   000087   240B         ADD       A,#0xb
   \   000089   F5..         MOV       ?V0,A
   \   00008B   E4           CLR       A
   \   00008C   39           ADDC      A,R1
   \   00008D   F5..         MOV       ?V1,A
   \   00008F   78..         MOV       R0,#?V0
   \   000091   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000094   790A         MOV       R1,#0xa
   \   000096   90....       MOV       DPTR,#giDoorLockPINCount
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   FA           MOV       R2,A
   \   00009B   E4           CLR       A
   \   00009C   FB           MOV       R3,A
   \   00009D   FC           MOV       R4,A
   \   00009E   FD           MOV       R5,A
   \   00009F   12....       LCALL     `??_ltoa::?relay`; Banked call to: _ltoa
   \   0000A2   7402         MOV       A,#0x2
   \   0000A4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A7   8025         SJMP      ??zclSampleDoorLock_LcdDisplayPINMode_5
    855            }
    856            else if ( giDoorLockPINColumnCount > 3 )
   \                     ??zclSampleDoorLock_LcdDisplayPINMode_4:
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   C3           CLR       C
   \   0000AB   9404         SUBB      A,#0x4
   \   0000AD   401F         JC        ??zclSampleDoorLock_LcdDisplayPINMode_5
    857            {
    858              osal_memcpy(sDisplayPIN, "Enter PIN: **** ", 16);
   \   0000AF                ; Setup parameters for call to function osal_memcpy
   \   0000AF   75....       MOV       ?V0,#`?<Constant "Enter PIN: **** ">` & 0xff
   \   0000B2   75....       MOV       ?V1,#(`?<Constant "Enter PIN: **** ">` >> 8) & 0xff
   \   0000B5   75..00       MOV       ?V2,#0x0
   \   0000B8   78..         MOV       R0,#?V0
   \   0000BA   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000BD   7C10         MOV       R4,#0x10
   \   0000BF   7D00         MOV       R5,#0x0
   \   0000C1   7403         MOV       A,#0x3
   \   0000C3   12....       LCALL     ?XSTACK_DISP101_8
   \   0000C6   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000C9   7403         MOV       A,#0x3
   \   0000CB   12....       LCALL     ?DEALLOC_XSTACK8
    859            }
    860          #ifdef LCD_SUPPORTED
    861            HalLcdWriteString( (char *)sDisplayPIN, HAL_LCD_LINE_1 );
   \                     ??zclSampleDoorLock_LcdDisplayPINMode_5:
   \   0000CE                ; Setup parameters for call to function HalLcdWriteString
   \   0000CE   7901         MOV       R1,#0x1
   \   0000D0   AA..         MOV       R2,?XSP + 0
   \   0000D2   AB..         MOV       R3,?XSP + 1
   \   0000D4   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    862            HalLcdWriteString( (char *)sPINLine2, HAL_LCD_LINE_2 );
   \   0000D7                ; Setup parameters for call to function HalLcdWriteString
   \   0000D7   7902         MOV       R1,#0x2
   \   0000D9   7A..         MOV       R2,#sPINLine2 & 0xff
   \   0000DB   7B..         MOV       R3,#(sPINLine2 >> 8) & 0xff
   \   0000DD   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    863            HalLcdWriteString( (char *)sPINLine3, HAL_LCD_LINE_3 );
   \   0000E0                ; Setup parameters for call to function HalLcdWriteString
   \   0000E0   7903         MOV       R1,#0x3
   \   0000E2   7A..         MOV       R2,#sPINLine3 & 0xff
   \   0000E4   7B..         MOV       R3,#(sPINLine3 >> 8) & 0xff
   \   0000E6   02....       LJMP      ?Subroutine1 & 0xFFFF
    864          #endif
    865          }
    866          
    867          /*********************************************************************
    868           * @fn      zclSampleDoorLock_ProcessAppMsg
    869           *
    870           * @brief   Process DoorLock messages
    871           *
    872           * @param   srcEP - Sending Apps endpoint
    873           * @param   len - number of bytes
    874           * @param   msg - pointer to message
    875           *          0 - lo byte destination address
    876           *          1 - hi byte destination address
    877           *          2 - destination endpoint
    878           *          3 - lo byte cluster ID
    879           *          4 - hi byte cluster ID
    880           *          5 - message length
    881           *          6 - destination address mode (first byte of data)
    882           *          7 - zcl command frame
    883           *
    884           * @return  none
    885           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    886          static void zclSampleDoorLock_ProcessAppMsg( uint8 srcEP, uint8 len, uint8 *msg )
   \                     zclSampleDoorLock_ProcessAppMsg:
    887          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV       A,#-0x17
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   EC           MOV       A,R4
   \   00000D   FE           MOV       R6,A
   \   00000E   ED           MOV       A,R5
   \   00000F   FF           MOV       R7,A
    888            afAddrType_t dstAddr;
    889            uint16 clusterID;
    890            zclFrameHdr_t hdr;
    891            uint8 *pData;
    892            uint8 dataLen;
    893          
    894            dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000010   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000013   F8           MOV       R0,A
   \   000014   740B         MOV       A,#0xb
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine4 & 0xFFFF
    895            msg += 2;
    896            dstAddr.endPoint = *msg++;
   \                     ??CrossCallReturnLabel_0:
   \   00001C   C0E0         PUSH      A
   \   00001E   7414         MOV       A,#0x14
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   D0E0         POP       A
   \   000025   F0           MOVX      @DPTR,A
   \   000026   EE           MOV       A,R6
   \   000027   2403         ADD       A,#0x3
   \   000029   FE           MOV       R6,A
   \   00002A   5001         JNC       ??zclSampleDoorLock_ProcessAppMsg_0
   \   00002C   0F           INC       R7
    897            clusterID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??zclSampleDoorLock_ProcessAppMsg_0:
   \   00002D   8E82         MOV       DPL,R6
   \   00002F   8F83         MOV       DPH,R7
   \   000031   E0           MOVX      A,@DPTR
   \   000032   FA           MOV       R2,A
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F8           MOV       R0,A
   \   000036   E4           CLR       A
   \   000037   C8           XCH       A,R0
   \   000038   F9           MOV       R1,A
   \   000039   EA           MOV       A,R2
   \   00003A   28           ADD       A,R0
   \   00003B   F5..         MOV       ?V4,A
   \   00003D   E4           CLR       A
   \   00003E   39           ADDC      A,R1
   \   00003F   F5..         MOV       ?V5,A
    898            msg += 2;
    899            dataLen = *msg++; // Length of message (Z-Tool can support up to 255 octets)
   \   000041   8E82         MOV       DPL,R6
   \   000043   8F83         MOV       DPH,R7
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F5..         MOV       ?V1,A
    900            dstAddr.addrMode = (afAddrMode_t)(*msg++);
   \   00004A   8E82         MOV       DPL,R6
   \   00004C   8F83         MOV       DPH,R7
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   E0           MOVX      A,@DPTR
   \   000052   C0E0         PUSH      A
   \   000054   7413         MOV       A,#0x13
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   D0E0         POP       A
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   EE           MOV       A,R6
   \   00005D   2404         ADD       A,#0x4
   \   00005F   FE           MOV       R6,A
   \   000060   5001         JNC       ??zclSampleDoorLock_ProcessAppMsg_1
   \   000062   0F           INC       R7
    901            dataLen--; // Length of ZCL frame
    902          
    903            // Begining of ZCL frame
    904            pData = zclParseHdr( &hdr, msg );
   \                     ??zclSampleDoorLock_ProcessAppMsg_1:
   \   000063                ; Setup parameters for call to function zclParseHdr
   \   000063   FC           MOV       R4,A
   \   000064   EF           MOV       A,R7
   \   000065   FD           MOV       R5,A
   \   000066   AA..         MOV       R2,?XSP + 0
   \   000068   AB..         MOV       R3,?XSP + 1
   \   00006A   12....       LCALL     `??zclParseHdr::?relay`; Banked call to: zclParseHdr
   \   00006D   8A..         MOV       ?V2,R2
   \   00006F   8B..         MOV       ?V3,R3
    905            dataLen -= (uint8)( pData - msg );
   \   000071   A8..         MOV       R0,?V2
   \   000073   74FF         MOV       A,#-0x1
   \   000075   25..         ADD       A,?V1
   \   000077   C3           CLR       C
   \   000078   98           SUBB      A,R0
   \   000079   2E           ADD       A,R6
   \   00007A   F5..         MOV       ?V1,A
    906          
    907            // Is this a foundation type message?
    908            if ( zcl_ProfileCmd( hdr.fc.type ) )
   \   00007C   85..82       MOV       DPL,?XSP + 0
   \   00007F   85..83       MOV       DPH,?XSP + 1
   \   000082   12....       LCALL     ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000085   F9           MOV       R1,A
   \   000086   E5..         MOV       A,?V1
   \   000088   F5..         MOV       ?V6,A
   \   00008A   75..00       MOV       ?V7,#0x0
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   5403         ANL       A,#0x3
   \   000090   6003         JZ        $+5
   \   000092   02....       LJMP      ??zclSampleDoorLock_ProcessAppMsg_2 & 0xFFFF
    909            {
    910              if ( hdr.fc.manuSpecific )
   \   000095   E0           MOVX      A,@DPTR
   \   000096   5404         ANL       A,#0x4
   \   000098   6030         JZ        ??zclSampleDoorLock_ProcessAppMsg_3
    911              {
    912                // We don't support any manufacturer specific command -- just forward it.
    913                zcl_SendCommand( srcEP, &dstAddr, clusterID, hdr.commandID, FALSE, ZCL_FRAME_CLIENT_SERVER_DIR,
    914                                 hdr.fc.disableDefaultRsp, hdr.manuCode, hdr.transSeqNum, dataLen, pData );
   \   00009A                ; Setup parameters for call to function zcl_SendCommand
   \   00009A   78..         MOV       R0,#?V2
   \   00009C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009F   78..         MOV       R0,#?V6
   \   0000A1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A4   7408         MOV       A,#0x8
   \   0000A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A9   12....       LCALL     ?Subroutine18 & 0xFFFF
    915              }
   \                     ??CrossCallReturnLabel_42:
   \   0000AC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AF   7407         MOV       A,#0x7
   \   0000B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B4   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000B7   E9           MOV       A,R1
   \   0000B8   F5..         MOV       ?V1,A
   \   0000BA   78..         MOV       R0,#?V1
   \   0000BC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BF   75..00       MOV       ?V1,#0x0
   \   0000C2   78..         MOV       R0,#?V1
   \   0000C4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C7   02....       LJMP      ??zclSampleDoorLock_ProcessAppMsg_4 & 0xFFFF
    916              else
    917              {
    918                zclParseCmd_t cmd;
    919          
    920                cmd.endpoint = srcEP;
   \                     ??zclSampleDoorLock_ProcessAppMsg_3:
   \   0000CA   7406         MOV       A,#0x6
   \   0000CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CF   E5..         MOV       A,?V0
   \   0000D1   F0           MOVX      @DPTR,A
    921                cmd.dataLen = dataLen;
   \   0000D2   7407         MOV       A,#0x7
   \   0000D4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D7   E5..         MOV       A,?V6
   \   0000D9   F0           MOVX      @DPTR,A
   \   0000DA   A3           INC       DPTR
   \   0000DB   E4           CLR       A
   \   0000DC   F0           MOVX      @DPTR,A
    922                cmd.pData = pData;
   \   0000DD   7409         MOV       A,#0x9
   \   0000DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E2   E8           MOV       A,R0
   \   0000E3   F0           MOVX      @DPTR,A
   \   0000E4   A3           INC       DPTR
   \   0000E5   EB           MOV       A,R3
   \   0000E6   F0           MOVX      @DPTR,A
    923          
    924                zclSampleDoorLock_ProcessFoundationMsg( &dstAddr, clusterID, &hdr, &cmd );
   \   0000E7                ; Setup parameters for call to function zclSampleDoorLock_ProcessFoundationMsg
   \   0000E7   7406         MOV       A,#0x6
   \   0000E9   12....       LCALL     ?XSTACK_DISP100_8
   \   0000EC   88..         MOV       ?V2,R0
   \   0000EE   89..         MOV       ?V3,R1
   \   0000F0   78..         MOV       R0,#?V2
   \   0000F2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F5   7402         MOV       A,#0x2
   \   0000F7   12....       LCALL     ?XSTACK_DISP100_8
   \   0000FA   88..         MOV       ?V2,R0
   \   0000FC   89..         MOV       ?V3,R1
   \   0000FE   78..         MOV       R0,#?V2
   \   000100   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000103   AC..         MOV       R4,?V4
   \   000105   AD..         MOV       R5,?V5
   \   000107   740F         MOV       A,#0xf
   \   000109   12....       LCALL     ?XSTACK_DISP101_8
   \   00010C   12....       LCALL     `??zclSampleDoorLock_ProcessFoundationMsg::?rela`; Banked call to: zclSampleDoorLock_ProcessFoundationMsg
   \   00010F   7404         MOV       A,#0x4
   \   000111   12....       LCALL     ?DEALLOC_XSTACK8
   \   000114   02....       LJMP      ??zclSampleDoorLock_ProcessAppMsg_5 & 0xFFFF
    925              }
    926            }
    927            else
    928            {
    929              // Nope, must be specific to the cluster ID
    930              if ( hdr.fc.manuSpecific )
   \                     ??zclSampleDoorLock_ProcessAppMsg_2:
   \   000117   E0           MOVX      A,@DPTR
   \   000118   5404         ANL       A,#0x4
   \   00011A   6047         JZ        ??zclSampleDoorLock_ProcessAppMsg_6
    931              {
    932                // We don't support any manufacturer specific command -- just forward it.
    933                zcl_SendCommand( srcEP, &dstAddr, clusterID, hdr.commandID, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    934                                 hdr.fc.disableDefaultRsp, hdr.manuCode, hdr.transSeqNum, dataLen, pData );
   \   00011C                ; Setup parameters for call to function zcl_SendCommand
   \   00011C   78..         MOV       R0,#?V2
   \   00011E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000121   78..         MOV       R0,#?V6
   \   000123   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000126   7408         MOV       A,#0x8
   \   000128   12....       LCALL     ?XSTACK_DISP0_8
   \   00012B   12....       LCALL     ?Subroutine18 & 0xFFFF
    935              }
   \                     ??CrossCallReturnLabel_43:
   \   00012E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000131   7407         MOV       A,#0x7
   \   000133   12....       LCALL     ?XSTACK_DISP0_8
   \   000136   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000139   E9           MOV       A,R1
   \   00013A   F5..         MOV       ?V1,A
   \   00013C   78..         MOV       R0,#?V1
   \   00013E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000141   75..00       MOV       ?V1,#0x0
   \   000144   78..         MOV       R0,#?V1
   \   000146   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000149   75..01       MOV       ?V1,#0x1
   \                     ??zclSampleDoorLock_ProcessAppMsg_4:
   \   00014C   78..         MOV       R0,#?V1
   \   00014E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000151   740F         MOV       A,#0xf
   \   000153   12....       LCALL     ?XSTACK_DISP0_8
   \   000156   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000159   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00015C   AC..         MOV       R4,?V4
   \   00015E   AD..         MOV       R5,?V5
   \   000160   02....       LJMP      ??zclSampleDoorLock_ProcessAppMsg_7 & 0xFFFF
    936              else
    937              {
    938                if ( ZCL_CLUSTER_ID_GEN( clusterID ) )
   \                     ??zclSampleDoorLock_ProcessAppMsg_6:
   \   000163   C3           CLR       C
   \   000164   E5..         MOV       A,?V4
   \   000166   9416         SUBB      A,#0x16
   \   000168   E5..         MOV       A,?V5
   \   00016A   9400         SUBB      A,#0x0
   \   00016C   4003         JC        $+5
   \   00016E   02....       LJMP      ??zclSampleDoorLock_ProcessAppMsg_8 & 0xFFFF
    939                {
    940                  zclSampleDoorLock_ProcessGeneralMsg( srcEP, &dstAddr, clusterID, &hdr, dataLen, pData );
   \   000171   78..         MOV       R0,#?V4
   \   000173   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for zclSampleDoorLock_ProcessAppMs_0`:
   \   000176   0000         DW        0
   \   000178   05           DB        5
   \   000179   ....         DW        ??zclSampleDoorLock_ProcessAppMsg_5
   \   00017B   ....         DW        ??zclSampleDoorLock_ProcessAppMsg_9
   \   00017D   ....         DW        ??zclSampleDoorLock_ProcessAppMsg_5
   \   00017F   ....         DW        ??zclSampleDoorLock_ProcessAppMsg_5
   \   000181   ....         DW        ??zclSampleDoorLock_ProcessAppMsg_5
   \   000183   ....         DW        ??zclSampleDoorLock_ProcessAppMsg_10
   \   000185   ....         DW        ??zclSampleDoorLock_ProcessAppMsg_11
   \                     ??zclSampleDoorLock_ProcessAppMsg_11:
   \   000187                ; Setup parameters for call to function zclSampleDoorLock_ProcessSceneCmd
   \   000187   78..         MOV       R0,#?V2
   \   000189   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00018C   78..         MOV       R0,#?V1
   \   00018E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000191   7403         MOV       A,#0x3
   \   000193   12....       LCALL     ?XSTACK_DISP100_8
   \   000196   88..         MOV       ?V2,R0
   \   000198   89..         MOV       ?V3,R1
   \   00019A   78..         MOV       R0,#?V2
   \   00019C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00019F   7C05         MOV       R4,#0x5
   \   0001A1   7D00         MOV       R5,#0x0
   \   0001A3   7410         MOV       A,#0x10
   \   0001A5   12....       LCALL     ?XSTACK_DISP101_8
   \   0001A8   A9..         MOV       R1,?V0
   \   0001AA   12....       LCALL     `??zclSampleDoorLock_ProcessSceneCmd::?relay`; Banked call to: zclSampleDoorLock_ProcessSceneCmd
   \   0001AD   02....       LJMP      ??zclSampleDoorLock_ProcessAppMsg_12 & 0xFFFF
   \                     ??zclSampleDoorLock_ProcessAppMsg_10:
   \   0001B0                ; Setup parameters for call to function zclSampleDoorLock_ProcessGroupCmd
   \   0001B0   78..         MOV       R0,#?V2
   \   0001B2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B5   78..         MOV       R0,#?V1
   \   0001B7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001BA   7403         MOV       A,#0x3
   \   0001BC   12....       LCALL     ?XSTACK_DISP100_8
   \   0001BF   88..         MOV       ?V2,R0
   \   0001C1   89..         MOV       ?V3,R1
   \   0001C3   78..         MOV       R0,#?V2
   \   0001C5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C8   7C04         MOV       R4,#0x4
   \   0001CA   7D00         MOV       R5,#0x0
   \   0001CC   7410         MOV       A,#0x10
   \   0001CE   12....       LCALL     ?XSTACK_DISP101_8
   \   0001D1   A9..         MOV       R1,?V0
   \   0001D3   12....       LCALL     `??zclSampleDoorLock_ProcessGroupCmd::?relay`; Banked call to: zclSampleDoorLock_ProcessGroupCmd
   \   0001D6   02....       LJMP      ??zclSampleDoorLock_ProcessAppMsg_12 & 0xFFFF
   \                     ??zclSampleDoorLock_ProcessAppMsg_9:
   \   0001D9   7405         MOV       A,#0x5
   \   0001DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DE   E0           MOVX      A,@DPTR
   \   0001DF   6003         JZ        $+5
   \   0001E1   02....       LJMP      ??zclSampleDoorLock_ProcessAppMsg_5 & 0xFFFF
   \   0001E4                ; Setup parameters for call to function zcl_SendCommand
   \   0001E4   E4           CLR       A
   \   0001E5   F5..         MOV       ?V2,A
   \   0001E7   F5..         MOV       ?V3,A
   \   0001E9   78..         MOV       R0,#?V2
   \   0001EB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001EE   78..         MOV       R0,#?V2
   \   0001F0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001F3   7408         MOV       A,#0x8
   \   0001F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F8   12....       LCALL     ?Subroutine18 & 0xFFFF
    941                }
   \                     ??CrossCallReturnLabel_45:
   \   0001FB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001FE   78..         MOV       R0,#?V2
   \   000200   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000203   E9           MOV       A,R1
   \   000204   F5..         MOV       ?V1,A
   \   000206   78..         MOV       R0,#?V1
   \   000208   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00020B   75..00       MOV       ?V1,#0x0
   \   00020E   78..         MOV       R0,#?V1
   \   000210   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000213   75..01       MOV       ?V1,#0x1
   \   000216   78..         MOV       R0,#?V1
   \   000218   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00021B   75..00       MOV       ?V1,#0x0
   \   00021E   78..         MOV       R0,#?V1
   \   000220   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000223   7C00         MOV       R4,#0x0
   \   000225   7D00         MOV       R5,#0x0
   \                     ??zclSampleDoorLock_ProcessAppMsg_7:
   \   000227   7416         MOV       A,#0x16
   \   000229   12....       LCALL     ?XSTACK_DISP101_8
   \   00022C   A9..         MOV       R1,?V0
   \   00022E   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000231   740B         MOV       A,#0xb
   \   000233   12....       LCALL     ?DEALLOC_XSTACK8
   \   000236   803E         SJMP      ??zclSampleDoorLock_ProcessAppMsg_5
    942                else if ( ZCL_CLUSTER_ID_CLOSURES( clusterID ) )
   \                     ??zclSampleDoorLock_ProcessAppMsg_8:
   \   000238   E5..         MOV       A,?V4
   \   00023A   2400         ADD       A,#0x0
   \   00023C   F8           MOV       R0,A
   \   00023D   E5..         MOV       A,?V5
   \   00023F   34FF         ADDC      A,#-0x1
   \   000241   F9           MOV       R1,A
   \   000242   C3           CLR       C
   \   000243   E8           MOV       A,R0
   \   000244   9403         SUBB      A,#0x3
   \   000246   E9           MOV       A,R1
   \   000247   9400         SUBB      A,#0x0
   \   000249   502B         JNC       ??zclSampleDoorLock_ProcessAppMsg_5
    943                {
    944                  zclSampleDoorLock_ProcessClosuresMsg( srcEP, &dstAddr, clusterID, &hdr, dataLen, pData );
   \   00024B                ; Setup parameters for call to function zclSampleDoorLock_ProcessClosuresMsg
   \   00024B   78..         MOV       R0,#?V2
   \   00024D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000250   78..         MOV       R0,#?V1
   \   000252   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000255   7403         MOV       A,#0x3
   \   000257   12....       LCALL     ?XSTACK_DISP100_8
   \   00025A   88..         MOV       ?V2,R0
   \   00025C   89..         MOV       ?V3,R1
   \   00025E   78..         MOV       R0,#?V2
   \   000260   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000263   AC..         MOV       R4,?V4
   \   000265   AD..         MOV       R5,?V5
   \   000267   7410         MOV       A,#0x10
   \   000269   12....       LCALL     ?XSTACK_DISP101_8
   \   00026C   A9..         MOV       R1,?V0
   \   00026E   12....       LCALL     `??zclSampleDoorLock_ProcessClosuresMsg::?relay`; Banked call to: zclSampleDoorLock_ProcessClosuresMsg
   \                     ??zclSampleDoorLock_ProcessAppMsg_12:
   \   000271   7405         MOV       A,#0x5
   \   000273   12....       LCALL     ?DEALLOC_XSTACK8
    945                }
    946              }
    947            }
    948          }
   \                     ??zclSampleDoorLock_ProcessAppMsg_5:
   \   000276   7417         MOV       A,#0x17
   \   000278   12....       LCALL     ?DEALLOC_XSTACK8
   \   00027B   7F08         MOV       R7,#0x8
   \   00027D   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V1,A
   \   000003   78..         MOV       R0,#?V1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine26_0
   \   000004                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   EA           MOV       A,R2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   C4           SWAP      A
   \   000002   540F         ANL       A,#0xf
   \   000004   5401         ANL       A,#0x1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   8E82         MOV       DPL,R6
   \   000007   8F83         MOV       DPH,R7
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET
    949          
    950          /*********************************************************************
    951           * @fn      zclSampleDoorLock_ProcessFoundationMsg
    952           *
    953           * @brief   Process Foundation message
    954           *
    955           * @param   srcEP - Sending Apps endpoint
    956           * @param   dstAddr - where to send the request
    957           * @param   clusterID - real cluster ID
    958           * @param   hdr - pointer to the message header
    959           * @param   len - length of the received message
    960           * @param   data - received message
    961           *
    962           * @return  none
    963           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    964          static void zclSampleDoorLock_ProcessFoundationMsg( afAddrType_t *dstAddr, uint16 clusterID,
   \                     zclSampleDoorLock_ProcessFoundationMsg:
    965                                                          zclFrameHdr_t *hdr, zclParseCmd_t *pParseCmd )
    966          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   \   00000D   7412         MOV       A,#0x12
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V2,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F5..         MOV       ?V3,A
    967          #if defined(ZCL_READ) || defined(ZCL_WRITE) || defined(ZCL_REPORT) || defined(ZCL_DISCOVER)
    968            void *cmd;
    969          #endif
    970          
    971            switch ( hdr->commandID )
   \   000019   85..82       MOV       DPL,?V2
   \   00001C   F583         MOV       DPH,A
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F9           MOV       R1,A
   \   000025   E5..         MOV       A,?V2
   \   000027   2404         ADD       A,#0x4
   \   000029   F5..         MOV       ?V4,A
   \   00002B   E4           CLR       A
   \   00002C   35..         ADDC      A,?V3
   \   00002E   F5..         MOV       ?V5,A
   \   000030   7414         MOV       A,#0x14
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   E0           MOVX      A,@DPTR
   \   000036   F5..         MOV       ?V6,A
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F5..         MOV       ?V7,A
   \   00003C   E9           MOV       A,R1
   \   00003D   6028         JZ        ??zclSampleDoorLock_ProcessFoundationMsg_0
   \   00003F   24FE         ADD       A,#-0x2
   \   000041   6060         JZ        ??zclSampleDoorLock_ProcessFoundationMsg_1
   \   000043   14           DEC       A
   \   000044   7003         JNZ       $+5
   \   000046   02....       LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_2 & 0xFFFF
   \   000049   24FE         ADD       A,#-0x2
   \   00004B   7003         JNZ       $+5
   \   00004D   02....       LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_3 & 0xFFFF
   \   000050   14           DEC       A
   \   000051   7003         JNZ       $+5
   \   000053   02....       LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_4 & 0xFFFF
   \   000056   24FE         ADD       A,#-0x2
   \   000058   7003         JNZ       $+5
   \   00005A   02....       LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_5 & 0xFFFF
   \   00005D   24FE         ADD       A,#-0x2
   \   00005F   7003         JNZ       $+5
   \   000061   02....       LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_6 & 0xFFFF
   \   000064   02....       LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_7 & 0xFFFF
    972            {
    973          #ifdef ZCL_READ
    974              case ZCL_CMD_READ:
    975                cmd = zclParseInReadCmd( pParseCmd );
   \                     ??zclSampleDoorLock_ProcessFoundationMsg_0:
   \   000067                ; Setup parameters for call to function zclParseInReadCmd
   \   000067   AA..         MOV       R2,?V6
   \   000069   AB..         MOV       R3,?V7
   \   00006B   12....       LCALL     `??zclParseInReadCmd::?relay`; Banked call to: zclParseInReadCmd
   \   00006E   8A..         MOV       ?V6,R2
   \   000070   8B..         MOV       ?V7,R3
    976                if ( cmd )
   \   000072   EA           MOV       A,R2
   \   000073   45..         ORL       A,?V7
   \   000075   7003         JNZ       $+5
   \   000077   02....       LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_8 & 0xFFFF
    977                {
    978                  zcl_SendRead( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID, (zclReadCmd_t *)cmd,
    979                                ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \   00007A                ; Setup parameters for call to function zcl_SendRead
   \   00007A   12....       LCALL     ?Subroutine12 & 0xFFFF
    980                  osal_mem_free( cmd );
    981                }
   \                     ??CrossCallReturnLabel_28:
   \   00007D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000080   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000083   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000086   75..00       MOV       ?V2,#0x0
   \   000089   78..         MOV       R0,#?V2
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008E   78..         MOV       R0,#?V6
   \   000090   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000093   AC..         MOV       R4,?V0
   \   000095   AD..         MOV       R5,?V1
   \   000097   EE           MOV       A,R6
   \   000098   FA           MOV       R2,A
   \   000099   EF           MOV       A,R7
   \   00009A   FB           MOV       R3,A
   \   00009B   7908         MOV       R1,#0x8
   \   00009D   12....       LCALL     `??zcl_SendRead::?relay`; Banked call to: zcl_SendRead
   \   0000A0   02....       LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_9 & 0xFFFF
    982                break;
    983          #endif // ZCL_READ
    984          
    985          #ifdef ZCL_WRITE
    986              case ZCL_CMD_WRITE:
    987                cmd = zclParseInWriteCmd( pParseCmd );
   \                     ??zclSampleDoorLock_ProcessFoundationMsg_1:
   \   0000A3                ; Setup parameters for call to function zclParseInWriteCmd
   \   0000A3   AA..         MOV       R2,?V6
   \   0000A5   AB..         MOV       R3,?V7
   \   0000A7   12....       LCALL     `??zclParseInWriteCmd::?relay`; Banked call to: zclParseInWriteCmd
   \   0000AA   8A..         MOV       ?V6,R2
   \   0000AC   8B..         MOV       ?V7,R3
    988                if ( cmd )
   \   0000AE   EA           MOV       A,R2
   \   0000AF   45..         ORL       A,?V7
   \   0000B1   7003         JNZ       $+5
   \   0000B3   02....       LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_8 & 0xFFFF
    989                {
    990                  zcl_SendWrite( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID, (zclWriteCmd_t *)cmd,
    991                                 ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \   0000B6                ; Setup parameters for call to function zcl_SendWriteRequest
   \   0000B6   12....       LCALL     ?Subroutine12 & 0xFFFF
    992                  osal_mem_free( cmd );
    993                }
   \                     ??CrossCallReturnLabel_29:
   \   0000B9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BC   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C2   75..00       MOV       ?V2,#0x0
   \   0000C5   78..         MOV       R0,#?V2
   \   0000C7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CA   75..02       MOV       ?V2,#0x2
   \   0000CD   8056         SJMP      ??zclSampleDoorLock_ProcessFoundationMsg_10
    994                break;
    995          
    996              case ZCL_CMD_WRITE_UNDIVIDED:
    997                cmd = zclParseInWriteCmd( pParseCmd );
   \                     ??zclSampleDoorLock_ProcessFoundationMsg_2:
   \   0000CF                ; Setup parameters for call to function zclParseInWriteCmd
   \   0000CF   AA..         MOV       R2,?V6
   \   0000D1   AB..         MOV       R3,?V7
   \   0000D3   12....       LCALL     `??zclParseInWriteCmd::?relay`; Banked call to: zclParseInWriteCmd
   \   0000D6   8A..         MOV       ?V6,R2
   \   0000D8   8B..         MOV       ?V7,R3
    998                if ( cmd )
   \   0000DA   EA           MOV       A,R2
   \   0000DB   45..         ORL       A,?V7
   \   0000DD   7003         JNZ       $+5
   \   0000DF   02....       LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_8 & 0xFFFF
    999                {
   1000                  zcl_SendWriteUndivided( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID, (zclWriteCmd_t *)cmd,
   1001                                          ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \   0000E2                ; Setup parameters for call to function zcl_SendWriteRequest
   \   0000E2   12....       LCALL     ?Subroutine12 & 0xFFFF
   1002                  osal_mem_free( cmd );
   1003                }
   \                     ??CrossCallReturnLabel_30:
   \   0000E5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E8   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000EB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000EE   75..00       MOV       ?V2,#0x0
   \   0000F1   78..         MOV       R0,#?V2
   \   0000F3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F6   75..03       MOV       ?V2,#0x3
   \   0000F9   802A         SJMP      ??zclSampleDoorLock_ProcessFoundationMsg_10
   1004                break;
   1005          
   1006              case ZCL_CMD_WRITE_NO_RSP:
   1007                cmd = zclParseInWriteCmd( pParseCmd );
   \                     ??zclSampleDoorLock_ProcessFoundationMsg_3:
   \   0000FB                ; Setup parameters for call to function zclParseInWriteCmd
   \   0000FB   AA..         MOV       R2,?V6
   \   0000FD   AB..         MOV       R3,?V7
   \   0000FF   12....       LCALL     `??zclParseInWriteCmd::?relay`; Banked call to: zclParseInWriteCmd
   \   000102   8A..         MOV       ?V6,R2
   \   000104   8B..         MOV       ?V7,R3
   1008                if ( cmd )
   \   000106   EA           MOV       A,R2
   \   000107   45..         ORL       A,?V7
   \   000109   7003         JNZ       $+5
   \   00010B   02....       LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_8 & 0xFFFF
   1009                {
   1010                  zcl_SendWriteNoRsp( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID, (zclWriteCmd_t *)cmd,
   1011                                      ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \   00010E                ; Setup parameters for call to function zcl_SendWriteRequest
   \   00010E   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000111   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000114   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000117   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00011A   75..00       MOV       ?V2,#0x0
   \   00011D   78..         MOV       R0,#?V2
   \   00011F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000122   75..05       MOV       ?V2,#0x5
   \                     ??zclSampleDoorLock_ProcessFoundationMsg_10:
   \   000125   78..         MOV       R0,#?V2
   \   000127   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00012A   78..         MOV       R0,#?V6
   \   00012C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012F   AC..         MOV       R4,?V0
   \   000131   AD..         MOV       R5,?V1
   \   000133   EE           MOV       A,R6
   \   000134   FA           MOV       R2,A
   \   000135   EF           MOV       A,R7
   \   000136   FB           MOV       R3,A
   \   000137   7908         MOV       R1,#0x8
   \   000139   12....       LCALL     `??zcl_SendWriteRequest::?relay`; Banked call to: zcl_SendWriteRequest
   \   00013C   7406         MOV       A,#0x6
   \   00013E   12....       LCALL     ?DEALLOC_XSTACK8
   1012                  osal_mem_free( cmd );
   \   000141                ; Setup parameters for call to function osal_mem_free
   \   000141   02....       LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_11 & 0xFFFF
   1013                }
   1014                break;
   1015          #endif // ZCL_WRITE
   1016          
   1017          #ifdef ZCL_REPORT
   1018              case ZCL_CMD_CONFIG_REPORT:
   1019                cmd = zclParseInConfigReportCmd( pParseCmd );
   \                     ??zclSampleDoorLock_ProcessFoundationMsg_4:
   \   000144                ; Setup parameters for call to function zclParseInConfigReportCmd
   \   000144   AA..         MOV       R2,?V6
   \   000146   AB..         MOV       R3,?V7
   \   000148   12....       LCALL     `??zclParseInConfigReportCmd::?relay`; Banked call to: zclParseInConfigReportCmd
   \   00014B   8A..         MOV       ?V6,R2
   \   00014D   8B..         MOV       ?V7,R3
   1020                if ( cmd )
   \   00014F   EA           MOV       A,R2
   \   000150   45..         ORL       A,?V7
   \   000152   7003         JNZ       $+5
   \   000154   02....       LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_8 & 0xFFFF
   1021                {
   1022                  zcl_SendConfigReportCmd( SAMPLEDOORLOCK_ENDPOINT, dstAddr,  clusterID, (zclCfgReportCmd_t *)cmd,
   1023                                           ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \   000157                ; Setup parameters for call to function zcl_SendConfigReportCmd
   \   000157   12....       LCALL     ?Subroutine12 & 0xFFFF
   1024                  osal_mem_free( cmd );
   1025                }
   \                     ??CrossCallReturnLabel_32:
   \   00015A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00015D   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000160   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000163   75..00       MOV       ?V2,#0x0
   \   000166   78..         MOV       R0,#?V2
   \   000168   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00016B   78..         MOV       R0,#?V6
   \   00016D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000170   AC..         MOV       R4,?V0
   \   000172   AD..         MOV       R5,?V1
   \   000174   EE           MOV       A,R6
   \   000175   FA           MOV       R2,A
   \   000176   EF           MOV       A,R7
   \   000177   FB           MOV       R3,A
   \   000178   7908         MOV       R1,#0x8
   \   00017A   12....       LCALL     `??zcl_SendConfigReportCmd::?relay`; Banked call to: zcl_SendConfigReportCmd
   \   00017D   8074         SJMP      ??zclSampleDoorLock_ProcessFoundationMsg_9
   1026                break;
   1027          
   1028              case ZCL_CMD_READ_REPORT_CFG:
   1029                cmd = zclParseInReadReportCfgCmd( pParseCmd );
   \                     ??zclSampleDoorLock_ProcessFoundationMsg_5:
   \   00017F                ; Setup parameters for call to function zclParseInReadReportCfgCmd
   \   00017F   AA..         MOV       R2,?V6
   \   000181   AB..         MOV       R3,?V7
   \   000183   12....       LCALL     `??zclParseInReadReportCfgCmd::?relay`; Banked call to: zclParseInReadReportCfgCmd
   \   000186   8A..         MOV       ?V6,R2
   \   000188   8B..         MOV       ?V7,R3
   1030                if ( cmd )
   \   00018A   EA           MOV       A,R2
   \   00018B   45..         ORL       A,?V7
   \   00018D   7003         JNZ       $+5
   \   00018F   02....       LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_8 & 0xFFFF
   1031                {
   1032                  zcl_SendReadReportCfgCmd( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID, (zclReadReportCfgCmd_t *)cmd,
   1033                                            ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \   000192                ; Setup parameters for call to function zcl_SendReadReportCfgCmd
   \   000192   12....       LCALL     ?Subroutine12 & 0xFFFF
   1034                  osal_mem_free( cmd );
   1035                }
   \                     ??CrossCallReturnLabel_33:
   \   000195   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000198   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00019B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00019E   75..00       MOV       ?V2,#0x0
   \   0001A1   78..         MOV       R0,#?V2
   \   0001A3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001A6   78..         MOV       R0,#?V6
   \   0001A8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AB   AC..         MOV       R4,?V0
   \   0001AD   AD..         MOV       R5,?V1
   \   0001AF   EE           MOV       A,R6
   \   0001B0   FA           MOV       R2,A
   \   0001B1   EF           MOV       A,R7
   \   0001B2   FB           MOV       R3,A
   \   0001B3   7908         MOV       R1,#0x8
   \   0001B5   12....       LCALL     `??zcl_SendReadReportCfgCmd::?relay`; Banked call to: zcl_SendReadReportCfgCmd
   \   0001B8   8039         SJMP      ??zclSampleDoorLock_ProcessFoundationMsg_9
   1036                break;
   1037          
   1038              case ZCL_CMD_REPORT:
   1039                cmd = zclParseInReportCmd( pParseCmd );
   \                     ??zclSampleDoorLock_ProcessFoundationMsg_6:
   \   0001BA                ; Setup parameters for call to function zclParseInReportCmd
   \   0001BA   AA..         MOV       R2,?V6
   \   0001BC   AB..         MOV       R3,?V7
   \   0001BE   12....       LCALL     `??zclParseInReportCmd::?relay`; Banked call to: zclParseInReportCmd
   \   0001C1   8A..         MOV       ?V6,R2
   \   0001C3   8B..         MOV       ?V7,R3
   1040                if ( cmd )
   \   0001C5   EA           MOV       A,R2
   \   0001C6   45..         ORL       A,?V7
   \   0001C8   7003         JNZ       $+5
   \   0001CA   02....       LJMP      ??zclSampleDoorLock_ProcessFoundationMsg_8 & 0xFFFF
   1041                {
   1042                  zcl_SendReportCmd( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID, (zclReportCmd_t *)cmd,
   1043                                     ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \   0001CD                ; Setup parameters for call to function zcl_SendReportCmd
   \   0001CD   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0001D0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001D3   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0001D6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001D9   75..00       MOV       ?V2,#0x0
   \   0001DC   78..         MOV       R0,#?V2
   \   0001DE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001E1   78..         MOV       R0,#?V6
   \   0001E3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001E6   AC..         MOV       R4,?V0
   \   0001E8   AD..         MOV       R5,?V1
   \   0001EA   EE           MOV       A,R6
   \   0001EB   FA           MOV       R2,A
   \   0001EC   EF           MOV       A,R7
   \   0001ED   FB           MOV       R3,A
   \   0001EE   7908         MOV       R1,#0x8
   \   0001F0   12....       LCALL     `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
   \                     ??zclSampleDoorLock_ProcessFoundationMsg_9:
   \   0001F3   7405         MOV       A,#0x5
   \   0001F5   12....       LCALL     ?DEALLOC_XSTACK8
   1044                  osal_mem_free( cmd );
   \   0001F8                ; Setup parameters for call to function osal_mem_free
   \                     ??zclSampleDoorLock_ProcessFoundationMsg_11:
   \   0001F8   AA..         MOV       R2,?V6
   \   0001FA   AB..         MOV       R3,?V7
   \   0001FC   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001FF   8051         SJMP      ??zclSampleDoorLock_ProcessFoundationMsg_8
   1045                }
   1046                break;
   1047          #endif // ZCL_REPORT
   1048          #ifdef ZCL_DISCOVER
   1049              case ZCL_CMD_DISCOVER_ATTRS:
   1050                cmd = zclParseInDiscAttrsCmd( pParseCmd );
   1051                if ( cmd )
   1052                {
   1053                  zcl_SendDiscoverAttrsCmd( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID, (zclDiscoverAttrsCmd_t *)cmd,
   1054                                            ZCL_FRAME_CLIENT_SERVER_DIR, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   1055                  osal_mem_free( cmd );
   1056                }
   1057                break;
   1058          #endif // ZCL_DISCOVER
   1059          
   1060              default:
   1061                // Unsupported command -- just forward it.
   1062                zcl_SendCommand( pParseCmd->endpoint, dstAddr, clusterID, hdr->commandID, FALSE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1063                                 hdr->fc.disableDefaultRsp, 0, hdr->transSeqNum, pParseCmd->dataLen, pParseCmd->pData );
   \                     ??zclSampleDoorLock_ProcessFoundationMsg_7:
   \   000201                ; Setup parameters for call to function zcl_SendCommand
   \   000201   85..82       MOV       DPL,?V6
   \   000204   85..83       MOV       DPH,?V7
   \   000207   A3           INC       DPTR
   \   000208   A3           INC       DPTR
   \   000209   A3           INC       DPTR
   \   00020A   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00020D   85..82       MOV       DPL,?V6
   \   000210   85..83       MOV       DPH,?V7
   \   000213   A3           INC       DPTR
   \   000214   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000217   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00021A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00021D   E4           CLR       A
   \   00021E   F5..         MOV       ?V4,A
   \   000220   F5..         MOV       ?V5,A
   \   000222   78..         MOV       R0,#?V4
   \   000224   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000227   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00022A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00022D   75..00       MOV       ?V2,#0x0
   \   000230   78..         MOV       R0,#?V2
   \   000232   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000235   78..         MOV       R0,#?V2
   \   000237   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00023A   E9           MOV       A,R1
   \   00023B   F5..         MOV       ?V2,A
   \   00023D   78..         MOV       R0,#?V2
   \   00023F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000242   85..82       MOV       DPL,?V6
   \   000245   85..83       MOV       DPH,?V7
   \   000248   E0           MOVX      A,@DPTR
   \   000249   F9           MOV       R1,A
   \   00024A   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00024D   740B         MOV       A,#0xb
   \   00024F   12....       LCALL     ?DEALLOC_XSTACK8
   1064                break;
   1065            }
   1066          }
   \                     ??zclSampleDoorLock_ProcessFoundationMsg_8:
   \   000252   7F0A         MOV       R7,#0xa
   \   000254   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V4,A
   \   000009   78..         MOV       R0,#?V4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   12....       LCALL     ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000009   F5..         MOV       ?V2,A
   \   00000B   78..         MOV       R0,#?V2
   \   00000D   22           RET
   1067          
   1068          /*********************************************************************
   1069           * @fn      zclSampleDoorLock_ProcessGeneralMsg
   1070           *
   1071           * @brief   Process General Cluster message
   1072           *
   1073           * @param   srcEP - Sending Apps endpoint
   1074           * @param   dstAddr - where to send the request
   1075           * @param   clusterID - real cluster ID
   1076           * @param   hdr - pointer to the message header
   1077           * @param   len - length of the received message
   1078           * @param   data - received message
   1079           *
   1080           * @return  none
   1081           */
   1082          static void zclSampleDoorLock_ProcessGeneralMsg( uint8 srcEP, afAddrType_t *dstAddr,
   1083                            uint16 clusterID, zclFrameHdr_t *hdr, uint8 len, uint8 *data )
   1084          {
   1085            switch ( clusterID )
   1086            {
   1087          #ifdef ZCL_BASIC
   1088              case ZCL_CLUSTER_ID_GEN_BASIC:
   1089                if ( hdr->commandID == COMMAND_BASIC_RESET_FACT_DEFAULT )
   1090                {
   1091                  zclGeneral_SendBasicResetFactoryDefaults( srcEP, dstAddr, hdr->fc.disableDefaultRsp,
   1092                                                            hdr->transSeqNum );
   1093                }
   1094                break;
   1095          #endif // ZCL_BASIC
   1096          
   1097          #ifdef ZCL_GROUPS
   1098              case ZCL_CLUSTER_ID_GEN_GROUPS:
   1099                zclSampleDoorLock_ProcessGroupCmd( srcEP, dstAddr, clusterID, hdr, len, data );
   1100                break;
   1101          #endif // ZCL_GROUPS
   1102          
   1103          #ifdef ZCL_SCENES
   1104              case ZCL_CLUSTER_ID_GEN_SCENES:
   1105                zclSampleDoorLock_ProcessSceneCmd( srcEP, dstAddr, clusterID, hdr, len, data  );
   1106                break;
   1107          #endif // ZCL_SCENES
   1108          
   1109              default:
   1110                break;
   1111            }
   1112          }
   1113          
   1114          #ifdef ZCL_GROUPS
   1115          /*********************************************************************
   1116           * @fn      zclSampleDoorLock_ProcessGroupCmd
   1117           *
   1118           * @brief   Process Group Command
   1119           *
   1120           * @param   srcEP - Sending Apps endpoint
   1121           * @param   dstAddr - where to send the request
   1122           * @param   clusterID - real cluster ID
   1123           * @param   hdr - pointer to the message header
   1124           * @param   len - length of the received message
   1125           * @param   data - received message
   1126           *
   1127           * @return  none
   1128           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1129          static void zclSampleDoorLock_ProcessGroupCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSampleDoorLock_ProcessGroupCmd:
   1130                            uint16 clusterID, zclFrameHdr_t *hdr, uint8 len, uint8 *data )
   1131          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV       A,#-0x11
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   7411         MOV       A,#0x11
   \   000009   12....       LCALL     ?XSTACK_DISP0_8
   \   00000C   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00000F   88..         MOV       ?V0,R0
   \   000011   89..         MOV       ?V1,R1
   1132            uint16 groupID;
   1133            uint8 grpCnt;
   1134            uint16 *grpList;
   1135          
   1136            switch ( hdr->commandID )
   \   000013   8882         MOV       DPL,R0
   \   000015   F583         MOV       DPH,A
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F9           MOV       R1,A
   \   00001E   7414         MOV       A,#0x14
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V6,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V7,A
   \   00002A   85..82       MOV       DPL,?V6
   \   00002D   F583         MOV       DPH,A
   \   00002F   A3           INC       DPTR
   \   000030   8582..       MOV       ?V4,DPL
   \   000033   8583..       MOV       ?V5,DPH
   \   000036   E5..         MOV       A,?V6
   \   000038   2402         ADD       A,#0x2
   \   00003A   F5..         MOV       ?V2,A
   \   00003C   E4           CLR       A
   \   00003D   35..         ADDC      A,?V7
   \   00003F   F5..         MOV       ?V3,A
   \   000041   E9           MOV       A,R1
   \   000042   601B         JZ        ??zclSampleDoorLock_ProcessGroupCmd_0
   \   000044   14           DEC       A
   \   000045   603A         JZ        ??zclSampleDoorLock_ProcessGroupCmd_1
   \   000047   14           DEC       A
   \   000048   6053         JZ        ??zclSampleDoorLock_ProcessGroupCmd_2
   \   00004A   14           DEC       A
   \   00004B   7003         JNZ       $+5
   \   00004D   02....       LJMP      ??zclSampleDoorLock_ProcessGroupCmd_3 & 0xFFFF
   \   000050   14           DEC       A
   \   000051   7003         JNZ       $+5
   \   000053   02....       LJMP      ??zclSampleDoorLock_ProcessGroupCmd_4 & 0xFFFF
   \   000056   14           DEC       A
   \   000057   7003         JNZ       $+5
   \   000059   02....       LJMP      ??zclSampleDoorLock_ProcessGroupCmd_5 & 0xFFFF
   \   00005C   02....       LJMP      ??zclSampleDoorLock_ProcessGroupCmd_6 & 0xFFFF
   1137            {
   1138              case COMMAND_GROUP_ADD:
   1139                groupID =  BUILD_UINT16( data[0], data[1] );
   1140                data += 2;
   1141                zclGeneral_SendGroupAdd( srcEP, dstAddr, groupID, data,
   1142                                         hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \                     ??zclSampleDoorLock_ProcessGroupCmd_0:
   \   00005F                ; Setup parameters for call to function zclGeneral_SendAddGroupRequest
   \   00005F   8882         MOV       DPL,R0
   \   000061   85..83       MOV       DPH,?V1
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F5..         MOV       ?V8,A
   \   00006B   78..         MOV       R0,#?V8
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000070   78..         MOV       R0,#?V2
   \   000072   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000075   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000078   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007B   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00007E   02....       LJMP      ??zclSampleDoorLock_ProcessGroupCmd_7 & 0xFFFF
   1143                break;
   1144          
   1145              case COMMAND_GROUP_VIEW:
   1146                groupID =  BUILD_UINT16( data[0], data[1] );
   1147                zclGeneral_SendGroupView( srcEP, dstAddr, groupID,
   1148                                          hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \                     ??zclSampleDoorLock_ProcessGroupCmd_1:
   \   000081                ; Setup parameters for call to function zclGeneral_SendGroupRequest
   \   000081   8882         MOV       DPL,R0
   \   000083   85..83       MOV       DPH,?V1
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   12....       LCALL     ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00008D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000090   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000093   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000096   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000099   7C01         MOV       R4,#0x1
   \   00009B   805E         SJMP      ??zclSampleDoorLock_ProcessGroupCmd_8
   1149                break;
   1150          
   1151              case COMMAND_GROUP_GET_MEMBERSHIP:
   1152                grpCnt = data[0];
   1153                grpList = (uint16 *)(&data[1]);
   1154                zclGeneral_SendGroupGetMembership( srcEP, dstAddr, grpCnt, grpList,
   1155                                                   hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \                     ??zclSampleDoorLock_ProcessGroupCmd_2:
   \   00009D                ; Setup parameters for call to function zclGeneral_SendGroupGetMembershipRequest
   \   00009D   8882         MOV       DPL,R0
   \   00009F   85..83       MOV       DPH,?V1
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   12....       LCALL     ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0000A9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AC   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000AF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B2   78..         MOV       R0,#?V4
   \   0000B4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B7   85..82       MOV       DPL,?V6
   \   0000BA   85..83       MOV       DPH,?V7
   \   0000BD   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C3   75..00       MOV       ?V0,#0x0
   \   0000C6   78..         MOV       R0,#?V0
   \   0000C8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CB   78..         MOV       R0,#?V0
   \   0000CD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D0   7D00         MOV       R5,#0x0
   \   0000D2   7C02         MOV       R4,#0x2
   \   0000D4   EE           MOV       A,R6
   \   0000D5   F9           MOV       R1,A
   \   0000D6   12....       LCALL     `??zclGeneral_SendGroupGetMembershipRequest::?re`; Banked call to: zclGeneral_SendGroupGetMembershipRequest
   \   0000D9   7407         MOV       A,#0x7
   \   0000DB   12....       LCALL     ?DEALLOC_XSTACK8
   1156                break;
   \   0000DE   02....       LJMP      ??zclSampleDoorLock_ProcessGroupCmd_9 & 0xFFFF
   1157          
   1158              case COMMAND_GROUP_REMOVE:
   1159                groupID =  BUILD_UINT16( data[0], data[1] );
   1160                zclGeneral_SendGroupRemove( srcEP,  dstAddr, groupID,
   1161                                            hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \                     ??zclSampleDoorLock_ProcessGroupCmd_3:
   \   0000E1                ; Setup parameters for call to function zclGeneral_SendGroupRequest
   \   0000E1   8882         MOV       DPL,R0
   \   0000E3   85..83       MOV       DPH,?V1
   \   0000E6   A3           INC       DPTR
   \   0000E7   A3           INC       DPTR
   \   0000E8   A3           INC       DPTR
   \   0000E9   A3           INC       DPTR
   \   0000EA   12....       LCALL     ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000ED   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F0   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000F3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F6   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000F9   7C03         MOV       R4,#0x3
   \                     ??zclSampleDoorLock_ProcessGroupCmd_8:
   \   0000FB   EE           MOV       A,R6
   \   0000FC   F9           MOV       R1,A
   \   0000FD   12....       LCALL     `??zclGeneral_SendGroupRequest::?relay`; Banked call to: zclGeneral_SendGroupRequest
   \   000100   7403         MOV       A,#0x3
   \   000102   12....       LCALL     ?DEALLOC_XSTACK8
   1162                break;
   \   000105   02....       LJMP      ??zclSampleDoorLock_ProcessGroupCmd_9 & 0xFFFF
   1163          
   1164              case COMMAND_GROUP_REMOVE_ALL:
   1165                 zclGeneral_SendGroupRemoveAll( srcEP, dstAddr, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \                     ??zclSampleDoorLock_ProcessGroupCmd_4:
   \   000108                ; Setup parameters for call to function zcl_SendCommand
   \   000108   E4           CLR       A
   \   000109   F5..         MOV       ?V2,A
   \   00010B   F5..         MOV       ?V3,A
   \   00010D   78..         MOV       R0,#?V2
   \   00010F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000112   78..         MOV       R0,#?V2
   \   000114   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000117   85..82       MOV       DPL,?V0
   \   00011A   85..83       MOV       DPH,?V1
   \   00011D   A3           INC       DPTR
   \   00011E   A3           INC       DPTR
   \   00011F   A3           INC       DPTR
   \   000120   A3           INC       DPTR
   \   000121   12....       LCALL     ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000124   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000127   E4           CLR       A
   \   000128   F5..         MOV       ?V2,A
   \   00012A   78..         MOV       R0,#?V2
   \   00012C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012F   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000132   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000135   75..00       MOV       ?V0,#0x0
   \   000138   78..         MOV       R0,#?V0
   \   00013A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00013D   75..01       MOV       ?V0,#0x1
   \   000140   78..         MOV       R0,#?V0
   \   000142   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000145   75..04       MOV       ?V0,#0x4
   \   000148   78..         MOV       R0,#?V0
   \   00014A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00014D   7C04         MOV       R4,#0x4
   \   00014F   7D00         MOV       R5,#0x0
   \   000151   EE           MOV       A,R6
   \   000152   F9           MOV       R1,A
   \   000153   807A         SJMP      ??zclSampleDoorLock_ProcessGroupCmd_10
   1166                break;
   1167          
   1168              case COMMAND_GROUP_ADD_IF_IDENTIFYING:
   1169                groupID =  BUILD_UINT16( data[0], data[1] );
   1170                data += 2;
   1171                zclGeneral_SendGroupAddIfIdentifying( srcEP, dstAddr, groupID, data,
   1172                                                      hdr->fc.disableDefaultRsp,  hdr->transSeqNum );
   \                     ??zclSampleDoorLock_ProcessGroupCmd_5:
   \   000155                ; Setup parameters for call to function zclGeneral_SendAddGroupRequest
   \   000155   8882         MOV       DPL,R0
   \   000157   85..83       MOV       DPH,?V1
   \   00015A   A3           INC       DPTR
   \   00015B   A3           INC       DPTR
   \   00015C   A3           INC       DPTR
   \   00015D   A3           INC       DPTR
   \   00015E   E0           MOVX      A,@DPTR
   \   00015F   F5..         MOV       ?V8,A
   \   000161   78..         MOV       R0,#?V8
   \   000163   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000166   78..         MOV       R0,#?V2
   \   000168   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016B   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00016E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000171   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000174   7C05         MOV       R4,#0x5
   \                     ??zclSampleDoorLock_ProcessGroupCmd_7:
   \   000176   EE           MOV       A,R6
   \   000177   F9           MOV       R1,A
   \   000178   12....       LCALL     `??zclGeneral_SendAddGroupRequest::?relay`; Banked call to: zclGeneral_SendAddGroupRequest
   \   00017B   7405         MOV       A,#0x5
   \   00017D   12....       LCALL     ?DEALLOC_XSTACK8
   1173                break;
   \   000180   8055         SJMP      ??zclSampleDoorLock_ProcessGroupCmd_9
   1174          
   1175              default:
   1176                // Unsupported command -- just forward it.
   1177                zcl_SendCommand( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID,
   1178                                 hdr->commandID, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1179                                 hdr->fc.disableDefaultRsp, 0, hdr->transSeqNum, len, data );
   \                     ??zclSampleDoorLock_ProcessGroupCmd_6:
   \   000182                ; Setup parameters for call to function zcl_SendCommand
   \   000182   78..         MOV       R0,#?V6
   \   000184   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000187   7415         MOV       A,#0x15
   \   000189   12....       LCALL     ?XSTACK_DISP0_8
   \   00018C   E0           MOVX      A,@DPTR
   \   00018D   F5..         MOV       ?V2,A
   \   00018F   75..00       MOV       ?V3,#0x0
   \   000192   78..         MOV       R0,#?V2
   \   000194   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000197   85..82       MOV       DPL,?V0
   \   00019A   85..83       MOV       DPH,?V1
   \   00019D   A3           INC       DPTR
   \   00019E   A3           INC       DPTR
   \   00019F   A3           INC       DPTR
   \   0001A0   A3           INC       DPTR
   \   0001A1   12....       LCALL     ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0001A4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001A7   E4           CLR       A
   \   0001A8   F5..         MOV       ?V2,A
   \   0001AA   78..         MOV       R0,#?V2
   \   0001AC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AF   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0001B2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001B5   75..00       MOV       ?V0,#0x0
   \   0001B8   78..         MOV       R0,#?V0
   \   0001BA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001BD   75..01       MOV       ?V0,#0x1
   \   0001C0   78..         MOV       R0,#?V0
   \   0001C2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001C5   E9           MOV       A,R1
   \   0001C6   F5..         MOV       ?V0,A
   \   0001C8   78..         MOV       R0,#?V0
   \   0001CA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001CD   7908         MOV       R1,#0x8
   \                     ??zclSampleDoorLock_ProcessGroupCmd_10:
   \   0001CF   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0001D2   740B         MOV       A,#0xb
   \   0001D4   12....       LCALL     ?DEALLOC_XSTACK8
   1180                break;
   1181            }
   1182          }
   \                     ??zclSampleDoorLock_ProcessGroupCmd_9:
   \   0001D7                REQUIRE ?Subroutine2
   \   0001D7                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F09         MOV       R7,#0x9
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85..82       MOV       DPL,?V6
   \   000003   85..83       MOV       DPH,?V7
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FC           MOV       R4,A
   \   000008   85..82       MOV       DPL,?V4
   \   00000B   85..83       MOV       DPH,?V5
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F8           MOV       R0,A
   \   000010   E4           CLR       A
   \   000011   C8           XCH       A,R0
   \   000012   F9           MOV       R1,A
   \   000013   EC           MOV       A,R4
   \   000014   28           ADD       A,R0
   \   000015   F5..         MOV       ?V2,A
   \   000017   E4           CLR       A
   \   000018   39           ADDC      A,R1
   \   000019   F5..         MOV       ?V3,A
   \   00001B   78..         MOV       R0,#?V2
   \   00001D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000003   FD           MOV       R5,A
   \   000004   7C00         MOV       R4,#0x0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine27_0
   \   000006                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000003   F5..         MOV       ?V0,A
   \   000005   78..         MOV       R0,#?V0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000003   FD           MOV       R5,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   78..         MOV       R0,#?V2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET
   1183          #endif // ZCL_GROUPS
   1184          
   1185          #ifdef ZCL_SCENES
   1186          /*********************************************************************
   1187           * @fn      zclSampleDoorLock_ProcessSceneCmd
   1188           *
   1189           * @brief   Process Scene Command
   1190           *
   1191           * @param   srcEP - Sending Apps endpoint
   1192           * @param   dstAddr - where to send the request
   1193           * @param   clusterID - real cluster ID
   1194           * @param   hdr - pointer to the message header
   1195           * @param   len - length of the received message
   1196           * @param   data - received message
   1197           *
   1198           * @return  none
   1199           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1200          static void zclSampleDoorLock_ProcessSceneCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSampleDoorLock_ProcessSceneCmd:
   1201                            uint16 clusterID, zclFrameHdr_t *hdr, uint8 len, uint8 *data )
   1202          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 55
   \   000005   74C9         MOV       A,#-0x37
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V7,R1
   \   00000C   8A..         MOV       ?V8,R2
   \   00000E   8B..         MOV       ?V9,R3
   \   000010   8C..         MOV       ?V4,R4
   \   000012   8D..         MOV       ?V5,R5
   1203            zclGeneral_Scene_t scene;
   1204            uint8 *pData = data;
   1205            uint8 nameLen;
   1206          
   1207            osal_memset( (uint8*)&scene, 0, sizeof( zclGeneral_Scene_t ) );
   \   000014                ; Setup parameters for call to function osal_memset
   \   000014   7C37         MOV       R4,#0x37
   \   000016   7D00         MOV       R5,#0x0
   \   000018   7900         MOV       R1,#0x0
   \   00001A   AA..         MOV       R2,?XSP + 0
   \   00001C   AB..         MOV       R3,?XSP + 1
   \   00001E   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   000021   7450         MOV       A,#0x50
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F5..         MOV       ?V12,A
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F5..         MOV       ?V13,A
   1208          
   1209            scene.groupID = BUILD_UINT16( pData[0], pData[1] );
   \   00002D   85..82       MOV       DPL,?V12
   \   000030   F583         MOV       DPH,A
   \   000032   12....       LCALL     ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000035   85..82       MOV       DPL,?XSP + 0
   \   000038   85..83       MOV       DPH,?XSP + 1
   \   00003B   F0           MOVX      @DPTR,A
   \   00003C   A3           INC       DPTR
   \   00003D   E9           MOV       A,R1
   \   00003E   F0           MOVX      @DPTR,A
   1210            pData += 2;   // Move past group ID
   \   00003F   E5..         MOV       A,?V12
   \   000041   2402         ADD       A,#0x2
   \   000043   FE           MOV       R6,A
   \   000044   E4           CLR       A
   \   000045   35..         ADDC      A,?V13
   \   000047   FF           MOV       R7,A
   1211            scene.ID = *pData++;
   \   000048   8E82         MOV       DPL,R6
   \   00004A   8F83         MOV       DPH,R7
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   FD           MOV       R5,A
   \   00004E   7402         MOV       A,#0x2
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   ED           MOV       A,R5
   \   000054   F0           MOVX      @DPTR,A
   \   000055   8E82         MOV       DPL,R6
   \   000057   8F83         MOV       DPH,R7
   \   000059   A3           INC       DPTR
   \   00005A   AE82         MOV       R6,DPL
   \   00005C   AF83         MOV       R7,DPH
   \   00005E   744D         MOV       A,#0x4d
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   12....       LCALL     ?Subroutine11 & 0xFFFF
   1212          
   1213            switch ( hdr->commandID )
   \                     ??CrossCallReturnLabel_26:
   \   000066   F5..         MOV       ?V2,A
   \   000068   E4           CLR       A
   \   000069   35..         ADDC      A,?V1
   \   00006B   F5..         MOV       ?V3,A
   \   00006D   744F         MOV       A,#0x4f
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   E0           MOVX      A,@DPTR
   \   000073   F5..         MOV       ?V11,A
   \   000075   E9           MOV       A,R1
   \   000076   6027         JZ        ??zclSampleDoorLock_ProcessSceneCmd_0
   \   000078   14           DEC       A
   \   000079   7003         JNZ       $+5
   \   00007B   02....       LJMP      ??zclSampleDoorLock_ProcessSceneCmd_1 & 0xFFFF
   \   00007E   14           DEC       A
   \   00007F   7003         JNZ       $+5
   \   000081   02....       LJMP      ??zclSampleDoorLock_ProcessSceneCmd_2 & 0xFFFF
   \   000084   14           DEC       A
   \   000085   7003         JNZ       $+5
   \   000087   02....       LJMP      ??zclSampleDoorLock_ProcessSceneCmd_3 & 0xFFFF
   \   00008A   14           DEC       A
   \   00008B   7003         JNZ       $+5
   \   00008D   02....       LJMP      ??zclSampleDoorLock_ProcessSceneCmd_4 & 0xFFFF
   \   000090   14           DEC       A
   \   000091   7003         JNZ       $+5
   \   000093   02....       LJMP      ??zclSampleDoorLock_ProcessSceneCmd_5 & 0xFFFF
   \   000096   14           DEC       A
   \   000097   7003         JNZ       $+5
   \   000099   02....       LJMP      ??zclSampleDoorLock_ProcessSceneCmd_6 & 0xFFFF
   \   00009C   02....       LJMP      ??zclSampleDoorLock_ProcessSceneCmd_7 & 0xFFFF
   1214            {
   1215              case COMMAND_SCENE_ADD:
   1216                // Parse the rest of the incoming message
   1217                scene.transTime = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclSampleDoorLock_ProcessSceneCmd_0:
   \   00009F   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000A2   F8           MOV       R0,A
   \   0000A3   7403         MOV       A,#0x3
   \   0000A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A8   12....       LCALL     ?Subroutine4 & 0xFFFF
   1218                pData += 2;
   1219                nameLen = *pData++; // Name length
   \                     ??CrossCallReturnLabel_1:
   \   0000AB   F5..         MOV       ?V10,A
   \   0000AD   EE           MOV       A,R6
   \   0000AE   2403         ADD       A,#0x3
   \   0000B0   FE           MOV       R6,A
   \   0000B1   5001         JNC       ??zclSampleDoorLock_ProcessSceneCmd_8
   \   0000B3   0F           INC       R7
   1220                if ( nameLen > (ZCL_SCENE_NAME_LEN-1) )
   \                     ??zclSampleDoorLock_ProcessSceneCmd_8:
   \   0000B4   E5..         MOV       A,?V10
   \   0000B6   C3           CLR       C
   \   0000B7   9410         SUBB      A,#0x10
   \   0000B9   7407         MOV       A,#0x7
   \   0000BB   4007         JC        ??zclSampleDoorLock_ProcessSceneCmd_9
   1221                {
   1222                  scene.name[0] = ZCL_SCENE_NAME_LEN-1;
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   740F         MOV       A,#0xf
   \   0000C2   8005         SJMP      ??zclSampleDoorLock_ProcessSceneCmd_10
   1223                }
   1224                else
   1225                {
   1226                  scene.name[0] = nameLen;
   \                     ??zclSampleDoorLock_ProcessSceneCmd_9:
   \   0000C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C7   E5..         MOV       A,?V10
   \                     ??zclSampleDoorLock_ProcessSceneCmd_10:
   \   0000C9   F0           MOVX      @DPTR,A
   1227                }
   1228                osal_memcpy( &(scene.name[1]), pData, scene.name[0] );
   \   0000CA                ; Setup parameters for call to function osal_memcpy
   \   0000CA   8E..         MOV       ?V4,R6
   \   0000CC   8F..         MOV       ?V5,R7
   \   0000CE   75..00       MOV       ?V6,#0x0
   \   0000D1   78..         MOV       R0,#?V4
   \   0000D3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000D6   740A         MOV       A,#0xa
   \   0000D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   FC           MOV       R4,A
   \   0000DD   7D00         MOV       R5,#0x0
   \   0000DF   740B         MOV       A,#0xb
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   AA82         MOV       R2,DPL
   \   0000E6   AB83         MOV       R3,DPH
   \   0000E8   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000EB   7403         MOV       A,#0x3
   \   0000ED   12....       LCALL     ?DEALLOC_XSTACK8
   1229                pData += nameLen; // move past name, use original length
   \   0000F0   A8..         MOV       R0,?V10
   \   0000F2   EE           MOV       A,R6
   \   0000F3   28           ADD       A,R0
   \   0000F4   FE           MOV       R6,A
   \   0000F5   E4           CLR       A
   \   0000F6   3F           ADDC      A,R7
   \   0000F7   FF           MOV       R7,A
   1230          
   1231                // Add the extension field(s)
   1232                scene.extLen = len - ( (uint8)( pData - data ) );
   \   0000F8   EE           MOV       A,R6
   \   0000F9   F8           MOV       R0,A
   \   0000FA   E5..         MOV       A,?V11
   \   0000FC   C3           CLR       C
   \   0000FD   98           SUBB      A,R0
   \   0000FE   25..         ADD       A,?V12
   \   000100   F8           MOV       R0,A
   \   000101   7417         MOV       A,#0x17
   \   000103   12....       LCALL     ?XSTACK_DISP0_8
   \   000106   E8           MOV       A,R0
   \   000107   F0           MOVX      @DPTR,A
   1233                if ( scene.extLen > 0 )
   \   000108   602B         JZ        ??zclSampleDoorLock_ProcessSceneCmd_11
   1234                {
   1235                  // Copy the extention field(s)
   1236                  if ( scene.extLen > ZCL_GEN_SCENE_EXT_LEN )
   \   00010A   C3           CLR       C
   \   00010B   9420         SUBB      A,#0x20
   \   00010D   4003         JC        ??zclSampleDoorLock_ProcessSceneCmd_12
   1237                  {
   1238                    scene.extLen = ZCL_GEN_SCENE_EXT_LEN;
   \   00010F   741F         MOV       A,#0x1f
   \   000111   F0           MOVX      @DPTR,A
   1239                  }
   1240                  osal_memcpy( scene.extField, pData, scene.extLen );
   \                     ??zclSampleDoorLock_ProcessSceneCmd_12:
   \   000112                ; Setup parameters for call to function osal_memcpy
   \   000112   8E..         MOV       ?V4,R6
   \   000114   8F..         MOV       ?V5,R7
   \   000116   78..         MOV       R0,#?V4
   \   000118   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00011B   741A         MOV       A,#0x1a
   \   00011D   12....       LCALL     ?XSTACK_DISP0_8
   \   000120   E0           MOVX      A,@DPTR
   \   000121   FC           MOV       R4,A
   \   000122   7D00         MOV       R5,#0x0
   \   000124   741B         MOV       A,#0x1b
   \   000126   12....       LCALL     ?XSTACK_DISP0_8
   \   000129   AA82         MOV       R2,DPL
   \   00012B   AB83         MOV       R3,DPH
   \   00012D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000130   7403         MOV       A,#0x3
   \   000132   12....       LCALL     ?DEALLOC_XSTACK8
   1241                }
   1242          
   1243                zclGeneral_SendAddScene( srcEP, dstAddr, &scene,
   1244                                         hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \                     ??zclSampleDoorLock_ProcessSceneCmd_11:
   \   000135                ; Setup parameters for call to function zclGeneral_SendAddSceneRequest
   \   000135   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000138   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00013B   7401         MOV       A,#0x1
   \   00013D   12....       LCALL     ?XSTACK_DISP100_8
   \   000140   88..         MOV       ?V2,R0
   \   000142   89..         MOV       ?V3,R1
   \   000144   78..         MOV       R0,#?V2
   \   000146   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000149   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00014C   AA..         MOV       R2,?V8
   \   00014E   AB..         MOV       R3,?V9
   \   000150   A9..         MOV       R1,?V7
   \   000152   12....       LCALL     `??zclGeneral_SendAddSceneRequest::?relay`; Banked call to: zclGeneral_SendAddSceneRequest
   \   000155   7403         MOV       A,#0x3
   \   000157   12....       LCALL     ?DEALLOC_XSTACK8
   1245                break;
   \   00015A   02....       LJMP      ??zclSampleDoorLock_ProcessSceneCmd_13 & 0xFFFF
   1246          
   1247              case COMMAND_SCENE_VIEW:
   1248                zclGeneral_SendSceneView( srcEP, dstAddr, scene.groupID, scene.ID,
   1249                                          hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \                     ??zclSampleDoorLock_ProcessSceneCmd_1:
   \   00015D                ; Setup parameters for call to function zclGeneral_SendSceneRequest
   \   00015D   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000160   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000163   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000166   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000169   7402         MOV       A,#0x2
   \   00016B   12....       LCALL     ?XSTACK_DISP0_8
   \   00016E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000171   7C01         MOV       R4,#0x1
   \   000173   807A         SJMP      ??zclSampleDoorLock_ProcessSceneCmd_14
   1250                break;
   1251          
   1252              case COMMAND_SCENE_REMOVE:
   1253                zclGeneral_SendSceneRemove( srcEP, dstAddr, scene.groupID, scene.ID,
   1254                                            hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \                     ??zclSampleDoorLock_ProcessSceneCmd_2:
   \   000175                ; Setup parameters for call to function zclGeneral_SendSceneRequest
   \   000175   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000178   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00017B   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00017E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000181   7402         MOV       A,#0x2
   \   000183   12....       LCALL     ?XSTACK_DISP0_8
   \   000186   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000189   7C02         MOV       R4,#0x2
   \   00018B   8062         SJMP      ??zclSampleDoorLock_ProcessSceneCmd_14
   1255                break;
   1256          
   1257              case COMMAND_SCENE_REMOVE_ALL:
   1258                zclGeneral_SendSceneRemoveAll( srcEP, dstAddr, scene.groupID,
   1259                                               hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \                     ??zclSampleDoorLock_ProcessSceneCmd_3:
   \   00018D                ; Setup parameters for call to function zclGeneral_SendSceneRequest
   \   00018D   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000190   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000193   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000196   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000199   7402         MOV       A,#0x2
   \   00019B   12....       LCALL     ?XSTACK_DISP0_8
   \   00019E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001A1   7D00         MOV       R5,#0x0
   \   0001A3   7C03         MOV       R4,#0x3
   \   0001A5   8048         SJMP      ??zclSampleDoorLock_ProcessSceneCmd_14
   1260                break;
   1261          
   1262              case COMMAND_SCENE_STORE:
   1263                zclGeneral_SendSceneStore( srcEP, dstAddr, scene.groupID, scene.ID,
   1264                                           hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \                     ??zclSampleDoorLock_ProcessSceneCmd_4:
   \   0001A7                ; Setup parameters for call to function zclGeneral_SendSceneRequest
   \   0001A7   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0001AA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001AD   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0001B0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001B3   7402         MOV       A,#0x2
   \   0001B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B8   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001BB   7C04         MOV       R4,#0x4
   \   0001BD   8030         SJMP      ??zclSampleDoorLock_ProcessSceneCmd_14
   1265                break;
   1266          
   1267              case COMMAND_SCENE_RECALL:
   1268                zclGeneral_SendSceneRecall( srcEP, dstAddr, scene.groupID, scene.ID,
   1269                                            hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \                     ??zclSampleDoorLock_ProcessSceneCmd_5:
   \   0001BF                ; Setup parameters for call to function zclGeneral_SendSceneRequest
   \   0001BF   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   0001C2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001C5   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0001C8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001CB   7402         MOV       A,#0x2
   \   0001CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D0   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001D3   7C05         MOV       R4,#0x5
   \   0001D5   8018         SJMP      ??zclSampleDoorLock_ProcessSceneCmd_14
   1270                break;
   1271          
   1272              case COMMAND_SCENE_GET_MEMBERSHIP:
   1273                zclGeneral_SendSceneGetMembership( srcEP, dstAddr, scene.groupID,
   1274                                                   hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \                     ??zclSampleDoorLock_ProcessSceneCmd_6:
   \   0001D7                ; Setup parameters for call to function zclGeneral_SendSceneRequest
   \   0001D7   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0001DA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001DD   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0001E0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001E3   7402         MOV       A,#0x2
   \   0001E5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E8   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001EB   7D00         MOV       R5,#0x0
   \   0001ED   7C06         MOV       R4,#0x6
   \                     ??zclSampleDoorLock_ProcessSceneCmd_14:
   \   0001EF   AA..         MOV       R2,?V8
   \   0001F1   AB..         MOV       R3,?V9
   \   0001F3   A9..         MOV       R1,?V7
   \   0001F5   12....       LCALL     `??zclGeneral_SendSceneRequest::?relay`; Banked call to: zclGeneral_SendSceneRequest
   \   0001F8   7404         MOV       A,#0x4
   \   0001FA   12....       LCALL     ?DEALLOC_XSTACK8
   1275                break;
   \   0001FD   8051         SJMP      ??zclSampleDoorLock_ProcessSceneCmd_13
   1276          
   1277              default:
   1278                // Unsupported command -- just forward it.
   1279                zcl_SendCommand( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID,
   1280                                 hdr->commandID, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1281                                 hdr->fc.disableDefaultRsp, 0, hdr->transSeqNum, len, data );
   \                     ??zclSampleDoorLock_ProcessSceneCmd_7:
   \   0001FF                ; Setup parameters for call to function zcl_SendCommand
   \   0001FF   78..         MOV       R0,#?V12
   \   000201   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000204   E5..         MOV       A,?V11
   \   000206   F5..         MOV       ?V10,A
   \   000208   75..00       MOV       ?V11,#0x0
   \   00020B   78..         MOV       R0,#?V10
   \   00020D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000210   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000213   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000216   E4           CLR       A
   \   000217   F5..         MOV       ?V2,A
   \   000219   F5..         MOV       ?V3,A
   \   00021B   78..         MOV       R0,#?V2
   \   00021D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000220   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000223   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000226   75..00       MOV       ?V0,#0x0
   \   000229   78..         MOV       R0,#?V0
   \   00022B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00022E   75..01       MOV       ?V0,#0x1
   \   000231   78..         MOV       R0,#?V0
   \   000233   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000236   E9           MOV       A,R1
   \   000237   F5..         MOV       ?V0,A
   \   000239   78..         MOV       R0,#?V0
   \   00023B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00023E   AC..         MOV       R4,?V4
   \   000240   AD..         MOV       R5,?V5
   \   000242   AA..         MOV       R2,?V8
   \   000244   AB..         MOV       R3,?V9
   \   000246   7908         MOV       R1,#0x8
   \   000248   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00024B   740B         MOV       A,#0xb
   \   00024D   12....       LCALL     ?DEALLOC_XSTACK8
   1282                break;
   1283            }
   1284          }
   \                     ??zclSampleDoorLock_ProcessSceneCmd_13:
   \   000250   7437         MOV       A,#0x37
   \   000252   12....       LCALL     ?DEALLOC_XSTACK8
   \   000255   7F0E         MOV       R7,#0xe
   \   000257   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   85..82       MOV       DPL,?V0
   \   00000A   F583         MOV       DPH,A
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F9           MOV       R1,A
   \   000013   E5..         MOV       A,?V0
   \   000015   2404         ADD       A,#0x4
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006                REQUIRE ??Subroutine28_0
   \   000006                ; // Fall through to label ??Subroutine28_0
   1285          #endif // ZCL_SCENES
   1286          
   1287          /*********************************************************************
   1288           * @fn      zclSampleDoorLock_ProcessClosuresMsg
   1289           *
   1290           * @brief   Process Closures Cluster Command
   1291           *
   1292           * @param   srcEP - Sending Apps endpoint
   1293           * @param   dstAddr - where to send the request
   1294           * @param   clusterID - real cluster ID
   1295           * @param   hdr - pointer to the message header
   1296           * @param   len - length of the received message
   1297           * @param   data - received message
   1298           *
   1299           * @return  none
   1300           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1301          static void zclSampleDoorLock_ProcessClosuresMsg( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSampleDoorLock_ProcessClosuresMsg:
   1302                                                            uint16 clusterID, zclFrameHdr_t *hdr,
   1303                                                            uint8 len, uint8 *data )
   1304          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV       A,#-0x11
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V8,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   \   000010   7413         MOV       A,#0x13
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine11 & 0xFFFF
   1305          #ifdef ZCL_DOORLOCK
   1306          
   1307            uint8 i;
   1308            uint16 calculatedArraySize;
   1309          
   1310            // Client-to-Server
   1311            if ( zcl_ServerCmd( hdr->fc.direction ) )
   \                     ??CrossCallReturnLabel_27:
   \   000018   F5..         MOV       ?V4,A
   \   00001A   E4           CLR       A
   \   00001B   35..         ADDC      A,?V1
   \   00001D   F5..         MOV       ?V5,A
   \   00001F   85..82       MOV       DPL,?V0
   \   000022   85..83       MOV       DPH,?V1
   \   000025   E0           MOVX      A,@DPTR
   \   000026   FA           MOV       R2,A
   \   000027   7416         MOV       A,#0x16
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F5..         MOV       ?V2,A
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F5..         MOV       ?V3,A
   \   000033   EA           MOV       A,R2
   \   000034   5408         ANL       A,#0x8
   \   000036   6003         JZ        $+5
   \   000038   02....       LJMP      ??zclSampleDoorLock_ProcessClosuresMsg_0 & 0xFFFF
   1312            {
   1313              switch( hdr->commandID )
   \   00003B   7402         MOV       A,#0x2
   \   00003D   69           XRL       A,R1
   \   00003E   6003         JZ        $+5
   \   000040   02....       LJMP      ??zclSampleDoorLock_ProcessClosuresMsg_1 & 0xFFFF
   1314              {
   1315                case COMMAND_CLOSURES_TOGGLE_DOOR:
   1316                {
   1317                  zclDoorLock_t cmd;
   1318          
   1319                  // first octet of PIN/RFID Code variable string identifies its length
   1320                  calculatedArraySize = data[0] + 1;
   \   000043   85..82       MOV       DPL,?V2
   \   000046   85..83       MOV       DPH,?V3
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   2401         ADD       A,#0x1
   \   00004C   F5..         MOV       ?V6,A
   \   00004E   E4           CLR       A
   \   00004F   3400         ADDC      A,#0x0
   \   000051   F5..         MOV       ?V7,A
   1321          
   1322                  cmd.pPinRfidCode = osal_mem_alloc( calculatedArraySize );
   \   000053                ; Setup parameters for call to function osal_mem_alloc
   \   000053   AA..         MOV       R2,?V6
   \   000055   FB           MOV       R3,A
   \   000056   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000059   85..82       MOV       DPL,?XSP + 0
   \   00005C   85..83       MOV       DPH,?XSP + 1
   \   00005F   EA           MOV       A,R2
   \   000060   F0           MOVX      @DPTR,A
   \   000061   A3           INC       DPTR
   \   000062   EB           MOV       A,R3
   \   000063   F0           MOVX      @DPTR,A
   1323                  if( !cmd.pPinRfidCode )
   \   000064   85..82       MOV       DPL,?XSP + 0
   \   000067   85..83       MOV       DPH,?XSP + 1
   \   00006A   12....       LCALL     ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00006D   7003         JNZ       $+5
   \   00006F   02....       LJMP      ??zclSampleDoorLock_ProcessClosuresMsg_2 & 0xFFFF
   1324                  {
   1325                    return;  // no memory
   1326                  }
   1327          
   1328                  for( i = 0; i < calculatedArraySize; i++ )
   \   000072   7A00         MOV       R2,#0x0
   1329                  {
   1330                    cmd.pPinRfidCode[i] = data[i];
   \                     ??zclSampleDoorLock_ProcessClosuresMsg_3:
   \   000074   EA           MOV       A,R2
   \   000075   F8           MOV       R0,A
   \   000076   E5..         MOV       A,?V2
   \   000078   28           ADD       A,R0
   \   000079   F582         MOV       DPL,A
   \   00007B   E4           CLR       A
   \   00007C   35..         ADDC      A,?V3
   \   00007E   F583         MOV       DPH,A
   \   000080   E0           MOVX      A,@DPTR
   \   000081   C0E0         PUSH      A
   \   000083   85..82       MOV       DPL,?XSP + 0
   \   000086   85..83       MOV       DPH,?XSP + 1
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   28           ADD       A,R0
   \   00008B   FB           MOV       R3,A
   \   00008C   A3           INC       DPTR
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   3400         ADDC      A,#0x0
   \   000090   8B82         MOV       DPL,R3
   \   000092   F583         MOV       DPH,A
   \   000094   D0E0         POP       A
   \   000096   F0           MOVX      @DPTR,A
   1331                  }
   \   000097   0A           INC       R2
   \   000098   EA           MOV       A,R2
   \   000099   C3           CLR       C
   \   00009A   95..         SUBB      A,?V6
   \   00009C   E4           CLR       A
   \   00009D   95..         SUBB      A,?V7
   \   00009F   40D3         JC        ??zclSampleDoorLock_ProcessClosuresMsg_3
   1332          
   1333                  zclClosures_SendDoorLockToggleDoor( srcEP, dstAddr, &cmd, hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \   0000A1                ; Setup parameters for call to function zclClosures_SendDoorLockRequest
   \   0000A1   85..82       MOV       DPL,?V4
   \   0000A4   85..83       MOV       DPH,?V5
   \   0000A7   12....       LCALL     ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AD   7401         MOV       A,#0x1
   \   0000AF   12....       LCALL     ?XSTACK_DISP100_8
   \   0000B2   88..         MOV       ?V2,R0
   \   0000B4   89..         MOV       ?V3,R1
   \   0000B6   78..         MOV       R0,#?V2
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BB   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000BE   7C02         MOV       R4,#0x2
   \   0000C0   EE           MOV       A,R6
   \   0000C1   FA           MOV       R2,A
   \   0000C2   EF           MOV       A,R7
   \   0000C3   FB           MOV       R3,A
   \   0000C4   A9..         MOV       R1,?V8
   \   0000C6   12....       LCALL     `??zclClosures_SendDoorLockRequest::?relay`; Banked call to: zclClosures_SendDoorLockRequest
   \   0000C9   7403         MOV       A,#0x3
   \   0000CB   12....       LCALL     ?DEALLOC_XSTACK8
   1334                  osal_mem_free( cmd.pPinRfidCode );
   \   0000CE                ; Setup parameters for call to function osal_mem_free
   \   0000CE   85..82       MOV       DPL,?XSP + 0
   \   0000D1   85..83       MOV       DPH,?XSP + 1
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   FA           MOV       R2,A
   \   0000D6   A3           INC       DPTR
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   FB           MOV       R3,A
   \   0000D9   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1335                  break;
   \   0000DC   8076         SJMP      ??zclSampleDoorLock_ProcessClosuresMsg_2
   1336                }
   1337          
   1338                default:
   1339                  // Unsupported command -- just forward it.
   1340                  zcl_SendCommand( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID,
   1341                                   hdr->commandID, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1342                                   hdr->fc.disableDefaultRsp, 0, hdr->transSeqNum, len, data );
   1343                  break;
   1344              }
   1345            }
   1346            // Server-to-Client
   1347            else
   1348            {
   1349              switch( hdr->commandID )
   \                     ??zclSampleDoorLock_ProcessClosuresMsg_0:
   \   0000DE   7402         MOV       A,#0x2
   \   0000E0   69           XRL       A,R1
   \   0000E1   7024         JNZ       ??zclSampleDoorLock_ProcessClosuresMsg_1
   1350              {
   1351                case COMMAND_CLOSURES_TOGGLE_DOOR_RSP:
   1352                  zclClosures_SendDoorLockToggleDoorRsp( srcEP, dstAddr, data[0], hdr->fc.disableDefaultRsp, hdr->transSeqNum );
   \   0000E3                ; Setup parameters for call to function zclClosures_SendDoorLockStatusResponse
   \   0000E3   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   0000E6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E9   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0000EC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000EF   85..82       MOV       DPL,?V2
   \   0000F2   85..83       MOV       DPH,?V3
   \   0000F5   E0           MOVX      A,@DPTR
   \   0000F6   FD           MOV       R5,A
   \   0000F7   7C02         MOV       R4,#0x2
   \   0000F9   EE           MOV       A,R6
   \   0000FA   FA           MOV       R2,A
   \   0000FB   A9..         MOV       R1,?V8
   \   0000FD   12....       LCALL     `??zclClosures_SendDoorLockStatusResponse::?rela`; Banked call to: zclClosures_SendDoorLockStatusResponse
   \   000100   7402         MOV       A,#0x2
   \   000102   12....       LCALL     ?DEALLOC_XSTACK8
   1353                  break;
   \   000105   804D         SJMP      ??zclSampleDoorLock_ProcessClosuresMsg_2
   1354          
   1355                default:
   1356                  // Unsupported command -- just forward it.
   1357                  zcl_SendCommand( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID,
   1358                                   hdr->commandID, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1359                                   hdr->fc.disableDefaultRsp, 0, hdr->transSeqNum, len, data );
   \                     ??zclSampleDoorLock_ProcessClosuresMsg_1:
   \   000107                ; Setup parameters for call to function zcl_SendCommand
   \   000107   78..         MOV       R0,#?V2
   \   000109   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010C   7417         MOV       A,#0x17
   \   00010E   12....       LCALL     ?XSTACK_DISP0_8
   \   000111   E0           MOVX      A,@DPTR
   \   000112   F5..         MOV       ?V0,A
   \   000114   75..00       MOV       ?V1,#0x0
   \   000117   78..         MOV       R0,#?V0
   \   000119   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011C   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00011F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000122   E4           CLR       A
   \   000123   F5..         MOV       ?V0,A
   \   000125   78..         MOV       R0,#?V0
   \   000127   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012A   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00012D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000130   75..00       MOV       ?V0,#0x0
   \   000133   78..         MOV       R0,#?V0
   \   000135   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000138   75..01       MOV       ?V0,#0x1
   \   00013B   78..         MOV       R0,#?V0
   \   00013D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000140   E9           MOV       A,R1
   \   000141   F5..         MOV       ?V0,A
   \   000143   78..         MOV       R0,#?V0
   \   000145   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000148   EE           MOV       A,R6
   \   000149   FA           MOV       R2,A
   \   00014A   7908         MOV       R1,#0x8
   \   00014C   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00014F   740B         MOV       A,#0xb
   \   000151   12....       LCALL     ?DEALLOC_XSTACK8
   1360                  break;
   1361              }
   1362            }
   1363          
   1364          #else
   1365            // Unsupported command -- just forward it.
   1366            zcl_SendCommand( SAMPLEDOORLOCK_ENDPOINT, dstAddr, clusterID,
   1367                             hdr->commandID, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1368                             hdr->fc.disableDefaultRsp, 0, hdr->transSeqNum, len, data );
   1369          #endif // ZCL_DOORLOCK
   1370          }
   \                     ??zclSampleDoorLock_ProcessClosuresMsg_2:
   \   000154   7402         MOV       A,#0x2
   \   000156   12....       LCALL     ?DEALLOC_XSTACK8
   \   000159   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   EA           MOV       A,R2
   \   000001   C4           SWAP      A
   \   000002   540F         ANL       A,#0xf
   \   000004   5401         ANL       A,#0x1
   \   000006   F5..         MOV       ?V0,A
   \   000008   78..         MOV       R0,#?V0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006                REQUIRE ??Subroutine30_0
   \   000006                ; // Fall through to label ??Subroutine30_0
   1371          
   1372          /*********************************************************************
   1373           * @fn      zclSampleDoorLock_ProcessIdentifyTimeChange
   1374           *
   1375           * @brief   Called to process any change to the IdentifyTime attribute.
   1376           *
   1377           * @param   none
   1378           *
   1379           * @return  none
   1380           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1381          static void zclSampleDoorLock_ProcessIdentifyTimeChange( void )
   \                     zclSampleDoorLock_ProcessIdentifyTimeChange:
   1382          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1383            if ( zclSampleDoorLock_IdentifyTime > 0 )
   \   000004   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000007   6026         JZ        ??zclSampleDoorLock_ProcessIdentifyTimeChange_0
   1384            {
   1385              osal_start_timerEx( zclSampleDoorLock_TaskID, SAMPLEDOORLOCK_IDENTIFY_TIMEOUT_EVT, 1000 );
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009   90....       MOV       DPTR,#__Constant_3e8
   \   00000C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00000F   7A01         MOV       R2,#0x1
   \   000011   7B00         MOV       R3,#0x0
   \   000013   90....       MOV       DPTR,#zclSampleDoorLock_TaskID
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F9           MOV       R1,A
   \   000018   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00001B   7404         MOV       A,#0x4
   \   00001D   12....       LCALL     ?DEALLOC_XSTACK8
   1386              HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
   \   000020                ; Setup parameters for call to function HalLedBlink
   \   000020   7CE8         MOV       R4,#-0x18
   \   000022   7D03         MOV       R5,#0x3
   \   000024   7B05         MOV       R3,#0x5
   \   000026   7AFF         MOV       R2,#-0x1
   \   000028   7908         MOV       R1,#0x8
   \   00002A   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   \   00002D   801D         SJMP      ??zclSampleDoorLock_ProcessIdentifyTimeChange_1
   1387            }
   1388            else
   1389            {
   1390              if ( zclSampleDoorLock_OnOff )
   \                     ??zclSampleDoorLock_ProcessIdentifyTimeChange_0:
   \   00002F   90....       MOV       DPTR,#zclSampleDoorLock_OnOff
   \   000032   E0           MOVX      A,@DPTR
   \   000033   6004         JZ        ??zclSampleDoorLock_ProcessIdentifyTimeChange_2
   1391                HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
   \   000035                ; Setup parameters for call to function HalLedSet
   \   000035   7A01         MOV       R2,#0x1
   \   000037   8002         SJMP      ??zclSampleDoorLock_ProcessIdentifyTimeChange_3
   1392              else
   1393                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \                     ??zclSampleDoorLock_ProcessIdentifyTimeChange_2:
   \   000039                ; Setup parameters for call to function HalLedSet
   \   000039   7A00         MOV       R2,#0x0
   \                     ??zclSampleDoorLock_ProcessIdentifyTimeChange_3:
   \   00003B   7908         MOV       R1,#0x8
   \   00003D   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   1394              osal_stop_timerEx( zclSampleDoorLock_TaskID, SAMPLEDOORLOCK_IDENTIFY_TIMEOUT_EVT );
   \   000040                ; Setup parameters for call to function osal_stop_timerEx
   \   000040   7A01         MOV       R2,#0x1
   \   000042   7B00         MOV       R3,#0x0
   \   000044   90....       MOV       DPTR,#zclSampleDoorLock_TaskID
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F9           MOV       R1,A
   \   000049   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1395            }
   1396          }
   \                     ??zclSampleDoorLock_ProcessIdentifyTimeChange_1:
   \   00004C   80..         SJMP      ?Subroutine0
   1397          
   1398          /*********************************************************************
   1399           * @fn      zclSampleDoorLock_BasicResetCB
   1400           *
   1401           * @brief   Callback from the ZCL General Cluster Library
   1402           *          to set all the Basic Cluster attributes to default values.
   1403           *
   1404           * @param   none
   1405           *
   1406           * @return  none
   1407           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1408          static void zclSampleDoorLock_BasicResetCB( void )
   \                     zclSampleDoorLock_BasicResetCB:
   1409          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1410            // Put device back to factory default settings
   1411            zgWriteStartupOptions( ZG_STARTUP_SET, 3 );   // bit set both default configuration and default network
   \   000004                ; Setup parameters for call to function zgWriteStartupOptions
   \   000004   7A03         MOV       R2,#0x3
   \   000006   79FF         MOV       R1,#-0x1
   \   000008   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   1412          
   1413            // restart device
   1414            MT_SysCommandProcessing( aProcessCmd );
   \   00000B                ; Setup parameters for call to function MT_SysCommandProcessing
   \   00000B   7A..         MOV       R2,#aProcessCmd & 0xff
   \   00000D   7B..         MOV       R3,#(aProcessCmd >> 8) & 0xff
   \   00000F   12....       LCALL     `??MT_SysCommandProcessing::?relay`; Banked call to: MT_SysCommandProcessing
   1415          }
   \   000012                REQUIRE ?Subroutine0
   \   000012                ; // Fall through to label ?Subroutine0
   1416          
   1417          /*********************************************************************
   1418           * @fn      zclSampleDoorLock_IdentifyCB
   1419           *
   1420           * @brief   Callback from the ZCL General Cluster Library when
   1421           *          it received an Identity Command for this application.
   1422           *
   1423           * @param   srcAddr - source address and endpoint of the response message
   1424           * @param   identifyTime - the number of seconds to identify yourself
   1425           *
   1426           * @return  none
   1427           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1428          static void zclSampleDoorLock_IdentifyCB( zclIdentify_t *pCmd )
   \                     zclSampleDoorLock_IdentifyCB:
   1429          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1430            zclSampleDoorLock_IdentifyTime = pCmd->identifyTime;
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00000D   90....       MOV       DPTR,#zclSampleDoorLock_IdentifyTime
   \   000010   E8           MOV       A,R0
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   E9           MOV       A,R1
   \   000014   F0           MOVX      @DPTR,A
   1431            zclSampleDoorLock_ProcessIdentifyTimeChange();
   \   000015                ; Setup parameters for call to function zclSampleDoorLock_ProcessIdentifyTimeChange
   \   000015   12....       LCALL     `??zclSampleDoorLock_ProcessIdentifyTimeChange::`; Banked call to: zclSampleDoorLock_ProcessIdentifyTimeChange
   1432          }
   \   000018   80..         SJMP      ?Subroutine0
   1433          
   1434          /*********************************************************************
   1435           * @fn      zclSampleDoorLock_IdentifyQueryRspCB
   1436           *
   1437           * @brief   Callback from the ZCL General Cluster Library when
   1438           *          it received an Identity Query Response Command for this application.
   1439           *
   1440           * @param   srcAddr - requestor's address
   1441           * @param   timeout - number of seconds to identify yourself (valid for query response)
   1442           *
   1443           * @return  none
   1444           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1445          static void zclSampleDoorLock_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
   \                     zclSampleDoorLock_IdentifyQueryRspCB:
   1446          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV       A,#-0x2
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   1447            // Query Response (with timeout value)
   1448            (void)pRsp;
   1449          #ifdef ZCL_EZMODE
   1450            {
   1451              zclEZMode_ActionData_t data;
   1452              data.pIdentifyQueryRsp = pRsp;
   \   000009   12....       LCALL     ?Subroutine5 & 0xFFFF
   1453              zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
   1454            }
   \                     ??CrossCallReturnLabel_2:
   \   00000C   7904         MOV       R1,#0x4
   \   00000E   12....       LCALL     `??zcl_EZModeAction::?relay`; Banked call to: zcl_EZModeAction
   1455          #endif
   1456          }
   \   000011   7402         MOV       A,#0x2
   \   000013   12....       LCALL     ?DEALLOC_XSTACK8
   \   000016   80..         SJMP      ?Subroutine0
   1457          
   1458          #if 0
   1459          /*********************************************************************
   1460           * @fn      zclSampleDoorLock_OnOffCB
   1461           *
   1462           * @brief   Callback from the ZCL General Cluster Library when
   1463           *          it received an On/Off Command for this application.
   1464           *
   1465           * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
   1466           *
   1467           * @return  none
   1468           */
   1469          static void zclSampleDoorLock_OnOffCB( uint8 cmd )
   1470          {
   1471            // Turn on the light
   1472            if ( cmd == COMMAND_ON )
   1473              zclSampleDoorLock_OnOff = LIGHT_ON;
   1474          
   1475            // Turn off the light
   1476            else if ( cmd == COMMAND_OFF )
   1477              zclSampleDoorLock_OnOff = LIGHT_OFF;
   1478          
   1479            // Toggle the light
   1480            else
   1481            {
   1482              if ( zclSampleDoorLock_OnOff == LIGHT_OFF )
   1483                zclSampleDoorLock_OnOff = LIGHT_ON;
   1484              else
   1485                zclSampleDoorLock_OnOff = LIGHT_OFF;
   1486            }
   1487          
   1488            // In this sample app, we use LED4 to simulate the DoorLock
   1489            if ( zclSampleDoorLock_OnOff == LIGHT_ON )
   1490              HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   1491            else
   1492              HalLedSet( HAL_LED_4, HAL_LED_MODE_OFF );
   1493          }
   1494          #endif
   1495          
   1496          /******************************************************************************
   1497           *
   1498           *  Functions for processing ZCL Foundation incoming Command/Response messages
   1499           *
   1500           *****************************************************************************/
   1501          
   1502          /*********************************************************************
   1503           * @fn      zclSampleDoorLock_ProcessIncomingMsg
   1504           *
   1505           * @brief   Process ZCL Foundation incoming message
   1506           *
   1507           * @param   pInMsg - pointer to the received message
   1508           *
   1509           * @return  none
   1510           */
   1511          static void zclSampleDoorLock_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
   1512          {
   1513            switch ( pInMsg->zclHdr.commandID )
   1514            {
   1515          #ifdef ZCL_READ
   1516              case ZCL_CMD_READ_RSP:
   1517                zclSampleDoorLock_ProcessInReadRspCmd( pInMsg );
   1518                break;
   1519          #endif
   1520          #ifdef ZCL_WRITE
   1521              case ZCL_CMD_WRITE_RSP:
   1522                zclSampleDoorLock_ProcessInWriteRspCmd( pInMsg );
   1523                break;
   1524          #endif
   1525          #ifdef ZCL_REPORT
   1526              // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
   1527              case ZCL_CMD_CONFIG_REPORT:
   1528                //zclSampleDoorLock_ProcessInConfigReportCmd( pInMsg );
   1529                break;
   1530          
   1531              case ZCL_CMD_CONFIG_REPORT_RSP:
   1532                //zclSampleDoorLock_ProcessInConfigReportRspCmd( pInMsg );
   1533                break;
   1534          
   1535              case ZCL_CMD_READ_REPORT_CFG:
   1536                //zclSampleDoorLock_ProcessInReadReportCfgCmd( pInMsg );
   1537                break;
   1538          
   1539              case ZCL_CMD_READ_REPORT_CFG_RSP:
   1540                //zclSampleDoorLock_ProcessInReadReportCfgRspCmd( pInMsg );
   1541                break;
   1542          
   1543              case ZCL_CMD_REPORT:
   1544                //zclSampleDoorLock_ProcessInReportCmd( pInMsg );
   1545                break;
   1546          #endif
   1547              case ZCL_CMD_DEFAULT_RSP:
   1548                zclSampleDoorLock_ProcessInDefaultRspCmd( pInMsg );
   1549                break;
   1550          
   1551              default:
   1552                break;
   1553            }
   1554          
   1555            if ( pInMsg->attrCmd )
   1556              osal_mem_free( pInMsg->attrCmd );
   1557          }
   1558          
   1559          #ifdef ZCL_READ
   1560          /*********************************************************************
   1561           * @fn      zclSampleDoorLock_ProcessInReadRspCmd
   1562           *
   1563           * @brief   Process the "Profile" Read Response Command
   1564           *
   1565           * @param   pInMsg - incoming message to process
   1566           *
   1567           * @return  none
   1568           */
   1569          static uint8 zclSampleDoorLock_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
   1570          {
   1571            zclReadRspCmd_t *readRspCmd;
   1572            uint8 i;
   1573          
   1574            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
   1575            for (i = 0; i < readRspCmd->numAttr; i++)
   1576            {
   1577              // Notify the originator of the results of the original read attributes
   1578              // attempt and, for each successfull request, the value of the requested
   1579              // attribute
   1580            }
   1581          
   1582            return TRUE;
   1583          }
   1584          #endif // ZCL_READ
   1585          
   1586          #ifdef ZCL_WRITE
   1587          /*********************************************************************
   1588           * @fn      zclSampleDoorLock_ProcessInWriteRspCmd
   1589           *
   1590           * @brief   Process the "Profile" Write Response Command
   1591           *
   1592           * @param   pInMsg - incoming message to process
   1593           *
   1594           * @return  none
   1595           */
   1596          static uint8 zclSampleDoorLock_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
   1597          {
   1598            zclWriteRspCmd_t *writeRspCmd;
   1599            uint8 i;
   1600          
   1601            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
   1602            for (i = 0; i < writeRspCmd->numAttr; i++)
   1603            {
   1604              // Notify the device of the results of the its original write attributes
   1605              // command.
   1606            }
   1607          
   1608            return TRUE;
   1609          }
   1610          #endif // ZCL_WRITE
   1611          
   1612          /*********************************************************************
   1613           * @fn      zclSampleDoorLock_ProcessInDefaultRspCmd
   1614           *
   1615           * @brief   Process the "Profile" Default Response Command
   1616           *
   1617           * @param   pInMsg - incoming message to process
   1618           *
   1619           * @return  none
   1620           */
   1621          static uint8 zclSampleDoorLock_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
   1622          {
   1623            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
   1624          
   1625            // Device is notified of the Default Response command.
   1626            (void)pInMsg;
   1627          
   1628            return TRUE;
   1629          }
   1630          
   1631          /*********************************************************************
   1632           * @fn      zclSampleDoorLock_DoorLockCB
   1633           *
   1634           * @brief   Callback from the ZCL General Cluster Library when
   1635           *          it received an Door Lock cluster Command for this application.
   1636           *
   1637           * @param   pInMsg - process incoming message
   1638           * @param   pInCmd - PIN/RFID code of command
   1639           *
   1640           * @return  ZStatus_t
   1641           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1642          static ZStatus_t zclSampleDoorLock_DoorLockCB ( zclIncoming_t *pInMsg, zclDoorLock_t *pInCmd )
   \                     zclSampleDoorLock_DoorLockCB:
   1643          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1644            if (  osal_memcmp( aiDoorLockMasterPINCode, pInCmd->pPinRfidCode, 5 ) == TRUE )
   \   000009   EE           MOV       A,R6
   \   00000A   2406         ADD       A,#0x6
   \   00000C   F5..         MOV       ?V0,A
   \   00000E   E4           CLR       A
   \   00000F   3F           ADDC      A,R7
   \   000010   F5..         MOV       ?V1,A
   \   000012   EE           MOV       A,R6
   \   000013   2407         ADD       A,#0x7
   \   000015   F5..         MOV       ?V2,A
   \   000017   E4           CLR       A
   \   000018   3F           ADDC      A,R7
   \   000019   F5..         MOV       ?V3,A
   \   00001B                ; Setup parameters for call to function osal_memcmp
   \   00001B   8C82         MOV       DPL,R4
   \   00001D   8D83         MOV       DPH,R5
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V4,A
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V5,A
   \   000026   75..00       MOV       ?V6,#0x0
   \   000029   78..         MOV       R0,#?V4
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00002E   7C05         MOV       R4,#0x5
   \   000030   7D00         MOV       R5,#0x0
   \   000032   79..         MOV       R1,#aiDoorLockMasterPINCode & 0xff
   \   000034   7A..         MOV       R2,#(aiDoorLockMasterPINCode >> 8) & 0xff
   \   000036   7B00         MOV       R3,#0x0
   \   000038   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00003B   7403         MOV       A,#0x3
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000040   E9           MOV       A,R1
   \   000041   6401         XRL       A,#0x1
   \   000043   6003         JZ        $+5
   \   000045   02....       LJMP      ??zclSampleDoorLock_DoorLockCB_0 & 0xFFFF
   1645            {
   1646              // Lock the door
   1647              if ( pInMsg->hdr.commandID == COMMAND_CLOSURES_LOCK_DOOR )
   \   000048   85..82       MOV       DPL,?V2
   \   00004B   85..83       MOV       DPH,?V3
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   F8           MOV       R0,A
   \   000050   7033         JNZ       ??zclSampleDoorLock_DoorLockCB_1
   1648              {
   1649                if( zclSampleDoorLock_DoorLockActuator( CLOSURES_LOCK_STATE_LOCKED ) == ZSuccess )
   \   000052                ; Setup parameters for call to function zclSampleDoorLock_DoorLockActuator
   \   000052   7901         MOV       R1,#0x1
   \   000054   12....       LCALL     `??zclSampleDoorLock_DoorLockActuator::?relay`; Banked call to: zclSampleDoorLock_DoorLockActuator
   \   000057   E9           MOV       A,R1
   \   000058   8E82         MOV       DPL,R6
   \   00005A   8F83         MOV       DPH,R7
   \   00005C   7015         JNZ       ??zclSampleDoorLock_DoorLockCB_2
   1650                {
   1651          
   1652                  zclClosures_SendDoorLockStatusResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1653                                                          COMMAND_CLOSURES_LOCK_DOOR,
   1654                                                          ZCL_STATUS_SUCCESS,TRUE, pInMsg->hdr.transSeqNum );
   \   00005E   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   1655                }
   \                     ??CrossCallReturnLabel_83:
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000064   75..01       MOV       ?V0,#0x1
   \   000067   78..         MOV       R0,#?V0
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006C   7D00         MOV       R5,#0x0
   \                     ??zclSampleDoorLock_DoorLockCB_3:
   \   00006E   7C00         MOV       R4,#0x0
   \                     ??zclSampleDoorLock_DoorLockCB_4:
   \   000070   02....       LJMP      ??zclSampleDoorLock_DoorLockCB_5 & 0xFFFF
   1656                else
   1657                {
   1658                  zclClosures_SendDoorLockStatusResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1659                                                          COMMAND_CLOSURES_LOCK_DOOR,
   1660                                                          ZCL_STATUS_FAILURE, TRUE, pInMsg->hdr.transSeqNum );
   \                     ??zclSampleDoorLock_DoorLockCB_2:
   \   000073   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   1661                }
   1662              }
   \                     ??CrossCallReturnLabel_84:
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000079   75..01       MOV       ?V0,#0x1
   \   00007C   78..         MOV       R0,#?V0
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000081   7D01         MOV       R5,#0x1
   \   000083   80E9         SJMP      ??zclSampleDoorLock_DoorLockCB_3
   1663              // Unlock the door
   1664              else if ( pInMsg->hdr.commandID == COMMAND_CLOSURES_UNLOCK_DOOR )
   \                     ??zclSampleDoorLock_DoorLockCB_1:
   \   000085   7401         MOV       A,#0x1
   \   000087   68           XRL       A,R0
   \   000088   7032         JNZ       ??zclSampleDoorLock_DoorLockCB_6
   1665              {
   1666                if( zclSampleDoorLock_DoorLockActuator( CLOSURES_LOCK_STATE_UNLOCKED ) == ZSuccess )
   \   00008A                ; Setup parameters for call to function zclSampleDoorLock_DoorLockActuator
   \   00008A   7902         MOV       R1,#0x2
   \   00008C   12....       LCALL     `??zclSampleDoorLock_DoorLockActuator::?relay`; Banked call to: zclSampleDoorLock_DoorLockActuator
   \   00008F   E9           MOV       A,R1
   \   000090   8E82         MOV       DPL,R6
   \   000092   8F83         MOV       DPH,R7
   \   000094   7014         JNZ       ??zclSampleDoorLock_DoorLockCB_7
   1667                {
   1668                  zclClosures_SendDoorLockStatusResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1669                                                          COMMAND_CLOSURES_UNLOCK_DOOR,
   1670                                                          ZCL_STATUS_SUCCESS, TRUE, pInMsg->hdr.transSeqNum );
   \   000096   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   1671                }
   \                     ??CrossCallReturnLabel_85:
   \   000099   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009C   75..01       MOV       ?V0,#0x1
   \   00009F   78..         MOV       R0,#?V0
   \   0000A1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A4   7D00         MOV       R5,#0x0
   \                     ??zclSampleDoorLock_DoorLockCB_8:
   \   0000A6   7C01         MOV       R4,#0x1
   \   0000A8   80C6         SJMP      ??zclSampleDoorLock_DoorLockCB_4
   1672                else
   1673                {
   1674                  zclClosures_SendDoorLockStatusResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1675                                                          COMMAND_CLOSURES_UNLOCK_DOOR,
   1676                                                          ZCL_STATUS_FAILURE, TRUE, pInMsg->hdr.transSeqNum );
   \                     ??zclSampleDoorLock_DoorLockCB_7:
   \   0000AA   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   1677                }
   1678              }
   \                     ??CrossCallReturnLabel_86:
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B0   75..01       MOV       ?V0,#0x1
   \   0000B3   78..         MOV       R0,#?V0
   \   0000B5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B8   7D01         MOV       R5,#0x1
   \   0000BA   80EA         SJMP      ??zclSampleDoorLock_DoorLockCB_8
   1679              // Toggle the door
   1680              else if ( pInMsg->hdr.commandID == COMMAND_CLOSURES_TOGGLE_DOOR )
   \                     ??zclSampleDoorLock_DoorLockCB_6:
   \   0000BC   7402         MOV       A,#0x2
   \   0000BE   68           XRL       A,R0
   \   0000BF   7901         MOV       R1,#0x1
   \   0000C1   7034         JNZ       ??zclSampleDoorLock_DoorLockCB_9
   1681              {
   1682                if( zclSampleDoorLock_DoorLockActuator( CLOSURES_LOCK_STATE_LOCKED ) == ZSuccess )
   \   0000C3                ; Setup parameters for call to function zclSampleDoorLock_DoorLockActuator
   \   0000C3   12....       LCALL     `??zclSampleDoorLock_DoorLockActuator::?relay`; Banked call to: zclSampleDoorLock_DoorLockActuator
   \   0000C6   E9           MOV       A,R1
   \   0000C7   6008         JZ        ??zclSampleDoorLock_DoorLockCB_10
   1683                {
   1684          
   1685                  zclClosures_SendDoorLockStatusResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1686                                                          COMMAND_CLOSURES_TOGGLE_DOOR,
   1687                                                          ZCL_STATUS_SUCCESS, TRUE, pInMsg->hdr.transSeqNum );
   1688                }
   1689                else if( zclSampleDoorLock_DoorLockActuator( CLOSURES_LOCK_STATE_UNLOCKED ) == ZSuccess )
   \   0000C9                ; Setup parameters for call to function zclSampleDoorLock_DoorLockActuator
   \   0000C9   7902         MOV       R1,#0x2
   \   0000CB   12....       LCALL     `??zclSampleDoorLock_DoorLockActuator::?relay`; Banked call to: zclSampleDoorLock_DoorLockActuator
   \   0000CE   E9           MOV       A,R1
   \   0000CF   7014         JNZ       ??zclSampleDoorLock_DoorLockCB_11
   1690                {
   1691                  zclClosures_SendDoorLockStatusResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1692                                                          COMMAND_CLOSURES_TOGGLE_DOOR,
   1693                                                          ZCL_STATUS_SUCCESS, TRUE, pInMsg->hdr.transSeqNum );
   \                     ??zclSampleDoorLock_DoorLockCB_10:
   \   0000D1   12....       LCALL     ?Subroutine6 & 0xFFFF
   1694                }
   \                     ??CrossCallReturnLabel_87:
   \   0000D4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D7   75..01       MOV       ?V0,#0x1
   \   0000DA   78..         MOV       R0,#?V0
   \   0000DC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DF   7D00         MOV       R5,#0x0
   \                     ??zclSampleDoorLock_DoorLockCB_12:
   \   0000E1   7C02         MOV       R4,#0x2
   \   0000E3   8049         SJMP      ??zclSampleDoorLock_DoorLockCB_5
   1695                else
   1696                {
   1697                  zclClosures_SendDoorLockStatusResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1698                                                          COMMAND_CLOSURES_TOGGLE_DOOR,
   1699                                                          ZCL_STATUS_FAILURE, TRUE, pInMsg->hdr.transSeqNum );
   \                     ??zclSampleDoorLock_DoorLockCB_11:
   \   0000E5   12....       LCALL     ?Subroutine6 & 0xFFFF
   1700                }
   1701              }
   \                     ??CrossCallReturnLabel_88:
   \   0000E8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000EB   75..01       MOV       ?V0,#0x1
   \   0000EE   78..         MOV       R0,#?V0
   \   0000F0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F3   7D01         MOV       R5,#0x1
   \   0000F5   80EA         SJMP      ??zclSampleDoorLock_DoorLockCB_12
   1702              else
   1703              {
   1704                return ( ZCL_STATUS_FAILURE );  // invalid command
   \                     ??zclSampleDoorLock_DoorLockCB_9:
   \   0000F7   8051         SJMP      ??zclSampleDoorLock_DoorLockCB_13
   1705              }
   1706          
   1707              return ( ZCL_STATUS_CMD_HAS_RSP );
   1708            }
   1709            else
   1710            {
   1711              // incorrect PIN received
   1712          
   1713          #ifdef LCD_SUPPORTED
   1714              if ( giDoorLockScreenMode == DOORLOCK_MAINMODE )
   \                     ??zclSampleDoorLock_DoorLockCB_0:
   \   0000F9   90....       MOV       DPTR,#giDoorLockScreenMode
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   7009         JNZ       ??zclSampleDoorLock_DoorLockCB_14
   1715              {
   1716                HalLcdWriteString( (char *)sInvalidPIN, HAL_LCD_LINE_2);
   \   0000FF                ; Setup parameters for call to function HalLcdWriteString
   \   0000FF   7902         MOV       R1,#0x2
   \   000101   7A..         MOV       R2,#sInvalidPIN & 0xff
   \   000103   7B..         MOV       R3,#(sInvalidPIN >> 8) & 0xff
   \   000105   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1717              }
   1718          #endif //LCD_SUPPORTED
   1719          
   1720              HalLedSet( HAL_LED_1, HAL_LED_MODE_BLINK );
   \                     ??zclSampleDoorLock_DoorLockCB_14:
   \   000108                ; Setup parameters for call to function HalLedSet
   \   000108   7A02         MOV       R2,#0x2
   \   00010A   7901         MOV       R1,#0x1
   \   00010C   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   1721              HalLedSet( HAL_LED_2, HAL_LED_MODE_BLINK );
   \   00010F                ; Setup parameters for call to function HalLedSet
   \   00010F   7A02         MOV       R2,#0x2
   \   000111   7902         MOV       R1,#0x2
   \   000113   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   1722          
   1723              zclClosures_SendDoorLockStatusResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1724                                                      pInMsg->hdr.commandID,
   1725                                                      ZCL_STATUS_INVALID_VALUE, FALSE, pInMsg->hdr.transSeqNum );
   \   000116   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000119   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00011C   75..00       MOV       ?V0,#0x0
   \   00011F   78..         MOV       R0,#?V0
   \   000121   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000124   7D87         MOV       R5,#-0x79
   \   000126   85..82       MOV       DPL,?V2
   \   000129   85..83       MOV       DPH,?V3
   \   00012C   E0           MOVX      A,@DPTR
   \   00012D   FC           MOV       R4,A
   \                     ??zclSampleDoorLock_DoorLockCB_5:
   \   00012E   EE           MOV       A,R6
   \   00012F   2406         ADD       A,#0x6
   \   000131   FA           MOV       R2,A
   \   000132   E4           CLR       A
   \   000133   3F           ADDC      A,R7
   \   000134   FB           MOV       R3,A
   \   000135   EE           MOV       A,R6
   \   000136   2414         ADD       A,#0x14
   \   000138   F582         MOV       DPL,A
   \   00013A   E4           CLR       A
   \   00013B   3F           ADDC      A,R7
   \   00013C   F583         MOV       DPH,A
   \   00013E   E0           MOVX      A,@DPTR
   \   00013F   F9           MOV       R1,A
   \   000140   12....       LCALL     `??zclClosures_SendDoorLockStatusResponse::?rela`; Banked call to: zclClosures_SendDoorLockStatusResponse
   \   000143   7402         MOV       A,#0x2
   \   000145   12....       LCALL     ?DEALLOC_XSTACK8
   1726          
   1727              return ( ZCL_STATUS_CMD_HAS_RSP );
   \   000148   79FF         MOV       R1,#-0x1
   \                     ??zclSampleDoorLock_DoorLockCB_13:
   \   00014A   7F07         MOV       R7,#0x7
   \   00014C   02....       LJMP      ?BANKED_LEAVE_XDATA
   1728            }
   1729          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine29_0
   \   000004                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005                ; Setup parameters for call to function zclClosures_SendDoorLockStatusResponse
   \   000005                ; Setup parameters for call to function zclClosures_SendDoorLockStatusResponse
   \   000005                ; Setup parameters for call to function zclClosures_SendDoorLockStatusResponse
   \   000005                ; Setup parameters for call to function zclClosures_SendDoorLockStatusResponse
   \   000005                ; Setup parameters for call to function zclClosures_SendDoorLockStatusResponse
   \   000005                ; Setup parameters for call to function zclClosures_SendDoorLockStatusResponse
   \   000005                ; Setup parameters for call to function zclClosures_SendDoorLockStatusResponse
   \   000005   85..82       MOV       DPL,?V0
   \   000008   85..83       MOV       DPH,?V1
   \   00000B   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00000E   22           RET
   1730          
   1731          /*********************************************************************
   1732           * @fn      zclSampleDoorLock_DoorLockRspCB
   1733           *
   1734           * @brief   Callback from the ZCL General Cluster Library when
   1735           *          it received an Door Lock response for this application.
   1736           *
   1737           * @param   cmd - Command ID
   1738           * @param   srcAddr - Requestor's address
   1739           * @param   transSeqNum - Transaction sequence number
   1740           * @param   status - status response from server's door lock cmd
   1741           *
   1742           * @return  ZStatus_t
   1743           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1744          static ZStatus_t zclSampleDoorLock_DoorLockRspCB ( zclIncoming_t *pInMsg, uint8 status )
   \                     zclSampleDoorLock_DoorLockRspCB:
   1745          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1746            return ( ZCL_STATUS_SUCCESS );
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
   1747          }
   1748          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1749          static ZStatus_t zclSampleDoorLock_DoorLockActuator ( uint8 newDoorLockState )
   \                     zclSampleDoorLock_DoorLockActuator:
   1750          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1751            // In this sample app, we use LED1 and LED2 to simulate the Door Lock/Unlock states
   1752            if ( newDoorLockState == CLOSURES_LOCK_STATE_LOCKED )
   \   000007   7401         MOV       A,#0x1
   \   000009   6E           XRL       A,R6
   \   00000A   702C         JNZ       ??zclSampleDoorLock_DoorLockActuator_0
   1753            {
   1754              if ( zclSampleDoorLock_LockState == CLOSURES_LOCK_STATE_LOCKED )
   \   00000C   90....       MOV       DPTR,#zclSampleDoorLock_LockState
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   6401         XRL       A,#0x1
   \   000012   6031         JZ        ??zclSampleDoorLock_DoorLockActuator_1
   1755              {
   1756                return ZFailure;
   1757              }
   1758          
   1759          #ifdef LCD_SUPPORTED
   1760              if ( giDoorLockScreenMode == DOORLOCK_MAINMODE )
   \   000014   90....       MOV       DPTR,#giDoorLockScreenMode
   \   000017   E0           MOVX      A,@DPTR
   \   000018   7009         JNZ       ??zclSampleDoorLock_DoorLockActuator_2
   1761              {
   1762                HalLcdWriteString( (char *)sDoorLocked, HAL_LCD_LINE_2);
   \   00001A                ; Setup parameters for call to function HalLcdWriteString
   \   00001A   7902         MOV       R1,#0x2
   \   00001C   7A..         MOV       R2,#sDoorLocked & 0xff
   \   00001E   7B..         MOV       R3,#(sDoorLocked >> 8) & 0xff
   \   000020   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1763              }
   1764          #endif //LCD_SUPPORTED
   1765          
   1766              HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
   \                     ??zclSampleDoorLock_DoorLockActuator_2:
   \   000023                ; Setup parameters for call to function HalLedSet
   \   000023   7A00         MOV       R2,#0x0
   \   000025   7901         MOV       R1,#0x1
   \   000027   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   1767              HalLedSet( HAL_LED_2, HAL_LED_MODE_BLINK );
   \   00002A                ; Setup parameters for call to function HalLedSet
   \   00002A   7A02         MOV       R2,#0x2
   \   00002C   7902         MOV       R1,#0x2
   \   00002E   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   1768              zclSampleDoorLock_LockState = CLOSURES_LOCK_STATE_LOCKED;
   \   000031   90....       MOV       DPTR,#zclSampleDoorLock_LockState
   \   000034   7401         MOV       A,#0x1
   \   000036   8033         SJMP      ??zclSampleDoorLock_DoorLockActuator_3
   1769            }
   1770            else if ( newDoorLockState == CLOSURES_LOCK_STATE_UNLOCKED )
   \                     ??zclSampleDoorLock_DoorLockActuator_0:
   \   000038   7402         MOV       A,#0x2
   \   00003A   6E           XRL       A,R6
   \   00003B   702F         JNZ       ??zclSampleDoorLock_DoorLockActuator_4
   1771            {
   1772              if ( zclSampleDoorLock_LockState == CLOSURES_LOCK_STATE_UNLOCKED )
   \   00003D   90....       MOV       DPTR,#zclSampleDoorLock_LockState
   \   000040   E0           MOVX      A,@DPTR
   \   000041   6402         XRL       A,#0x2
   \   000043   7004         JNZ       ??zclSampleDoorLock_DoorLockActuator_5
   1773              {
   1774                return ZFailure;
   \                     ??zclSampleDoorLock_DoorLockActuator_1:
   \   000045   7901         MOV       R1,#0x1
   \   000047   8025         SJMP      ??zclSampleDoorLock_DoorLockActuator_6
   1775              }
   1776          
   1777          #ifdef LCD_SUPPORTED
   1778              if ( giDoorLockScreenMode == DOORLOCK_MAINMODE )
   \                     ??zclSampleDoorLock_DoorLockActuator_5:
   \   000049   90....       MOV       DPTR,#giDoorLockScreenMode
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   7009         JNZ       ??zclSampleDoorLock_DoorLockActuator_7
   1779              {
   1780                HalLcdWriteString( (char *)sDoorUnlocked, HAL_LCD_LINE_2);
   \   00004F                ; Setup parameters for call to function HalLcdWriteString
   \   00004F   7902         MOV       R1,#0x2
   \   000051   7A..         MOV       R2,#sDoorUnlocked & 0xff
   \   000053   7B..         MOV       R3,#(sDoorUnlocked >> 8) & 0xff
   \   000055   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1781              }
   1782          #endif //LCD_SUPPORTED
   1783          
   1784              HalLedSet( HAL_LED_1, HAL_LED_MODE_BLINK );
   \                     ??zclSampleDoorLock_DoorLockActuator_7:
   \   000058                ; Setup parameters for call to function HalLedSet
   \   000058   7A02         MOV       R2,#0x2
   \   00005A   7901         MOV       R1,#0x1
   \   00005C   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   1785              HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
   \   00005F                ; Setup parameters for call to function HalLedSet
   \   00005F   7A00         MOV       R2,#0x0
   \   000061   7902         MOV       R1,#0x2
   \   000063   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   1786              zclSampleDoorLock_LockState = CLOSURES_LOCK_STATE_UNLOCKED;
   \   000066   90....       MOV       DPTR,#zclSampleDoorLock_LockState
   \   000069   7402         MOV       A,#0x2
   \                     ??zclSampleDoorLock_DoorLockActuator_3:
   \   00006B   F0           MOVX      @DPTR,A
   1787            }
   1788          
   1789            return ZSuccess;
   \                     ??zclSampleDoorLock_DoorLockActuator_4:
   \   00006C   7900         MOV       R1,#0x0
   \                     ??zclSampleDoorLock_DoorLockActuator_6:
   \   00006E                REQUIRE ?Subroutine3
   \   00006E                ; // Fall through to label ?Subroutine3
   1790          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1791          
   1792          #if ZCL_EZMODE
   1793          /*********************************************************************
   1794           * @fn      zclSampleDoorLock_ProcessZDOMsgs
   1795           *
   1796           * @brief   Called when this node receives a ZDO/ZDP response.
   1797           *
   1798           * @param   none
   1799           *
   1800           * @return  status
   1801           */
   1802          static void zclSampleDoorLock_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
   1803          {
   1804            zclEZMode_ActionData_t data;
   1805            ZDO_MatchDescRsp_t *pMatchDescRsp;
   1806          
   1807            // Let EZ-Mode know of the Match Descriptor Response
   1808            if ( pMsg->clusterID == Match_Desc_rsp )
   1809            {
   1810              pMatchDescRsp = ZDO_ParseEPListRsp( pMsg );
   1811              data.pMatchDescRsp = pMatchDescRsp;
   1812              zcl_EZModeAction( EZMODE_ACTION_MATCH_DESC_RSP, &data );
   1813              osal_mem_free( pMatchDescRsp );
   1814            }
   1815          }
   1816          
   1817          /*********************************************************************
   1818           * @fn      zclSampleDoorLock_EZModeCB
   1819           *
   1820           * @brief   The Application is informed of events. This can be used to show on the UI what is
   1821          *           going on during EZ-Mode steering/finding/binding.
   1822           *
   1823           * @param   state - an
   1824           *
   1825           * @return  none
   1826           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1827          static void zclSampleDoorLock_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
   \                     zclSampleDoorLock_EZModeCB:
   1828          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   1829          #ifdef LCD_SUPPORTED
   1830            char *pStr;
   1831            uint8 err;
   1832          #endif
   1833          
   1834            // time to go into identify mode
   1835            if ( state == EZMODE_STATE_IDENTIFYING )
   \   00000B   7404         MOV       A,#0x4
   \   00000D   65..         XRL       A,?V0
   \   00000F   7018         JNZ       ??zclSampleDoorLock_EZModeCB_0
   1836            {
   1837          #ifdef LCD_SUPPORTED
   1838              HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
   \   000011                ; Setup parameters for call to function HalLcdWriteString
   \   000011   7902         MOV       R1,#0x2
   \   000013   7A..         MOV       R2,#`?<Constant "EZMode">` & 0xff
   \   000015   7B..         MOV       R3,#(`?<Constant "EZMode">` >> 8) & 0xff
   \   000017   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1839          #endif
   1840          
   1841              zclSampleDoorLock_IdentifyTime = (EZMODE_TIME / 1000);  // convert to seconds
   \   00001A   90....       MOV       DPTR,#zclSampleDoorLock_IdentifyTime
   \   00001D   74B4         MOV       A,#-0x4c
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   A3           INC       DPTR
   \   000021   E4           CLR       A
   \   000022   F0           MOVX      @DPTR,A
   1842              zclSampleDoorLock_ProcessIdentifyTimeChange();
   \   000023                ; Setup parameters for call to function zclSampleDoorLock_ProcessIdentifyTimeChange
   \   000023   12....       LCALL     `??zclSampleDoorLock_ProcessIdentifyTimeChange::`; Banked call to: zclSampleDoorLock_ProcessIdentifyTimeChange
   \   000026   02....       LJMP      ??zclSampleDoorLock_EZModeCB_1 & 0xFFFF
   1843            }
   1844          
   1845            // autoclosing, show what happened (success, cancelled, etc...)
   1846            if( state == EZMODE_STATE_AUTOCLOSE )
   \                     ??zclSampleDoorLock_EZModeCB_0:
   \   000029   7407         MOV       A,#0x7
   \   00002B   65..         XRL       A,?V0
   \   00002D   7028         JNZ       ??zclSampleDoorLock_EZModeCB_2
   1847            {
   1848          #ifdef LCD_SUPPORTED
   1849              pStr = NULL;
   1850              err = pData->sAutoClose.err;
   \   00002F   8E82         MOV       DPL,R6
   \   000031   8F83         MOV       DPH,R7
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F8           MOV       R0,A
   1851              if ( err == EZMODE_ERR_SUCCESS )
   \   000035   7006         JNZ       ??zclSampleDoorLock_EZModeCB_3
   1852              {
   1853                pStr = "EZMode: Success";
   \   000037   7A..         MOV       R2,#`?<Constant "EZMode: Success">` & 0xff
   \   000039   7B..         MOV       R3,#(`?<Constant "EZMode: Success">` >> 8) & 0xff
   \   00003B   8009         SJMP      ??zclSampleDoorLock_EZModeCB_4
   1854              }
   1855              else if ( err == EZMODE_ERR_NOMATCH )
   \                     ??zclSampleDoorLock_EZModeCB_3:
   \   00003D   7404         MOV       A,#0x4
   \   00003F   68           XRL       A,R0
   \   000040   7072         JNZ       ??zclSampleDoorLock_EZModeCB_1
   1856              {
   1857                pStr = "EZMode: NoMatch"; // not a match made in heaven
   \   000042   7A..         MOV       R2,#`?<Constant "EZMode: NoMatch">` & 0xff
   \   000044   7B..         MOV       R3,#(`?<Constant "EZMode: NoMatch">` >> 8) & 0xff
   1858              }
   1859              if ( pStr )
   \                     ??zclSampleDoorLock_EZModeCB_4:
   \   000046   EA           MOV       A,R2
   \   000047   4B           ORL       A,R3
   \   000048   606A         JZ        ??zclSampleDoorLock_EZModeCB_1
   1860              {
   1861                if ( giDoorLockScreenMode == DOORLOCK_MAINMODE )
   \   00004A   90....       MOV       DPTR,#giDoorLockScreenMode
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   7064         JNZ       ??zclSampleDoorLock_EZModeCB_1
   1862                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   \   000050                ; Setup parameters for call to function HalLcdWriteString
   \   000050   7902         MOV       R1,#0x2
   \   000052   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000055   805D         SJMP      ??zclSampleDoorLock_EZModeCB_1
   1863              }
   1864          #endif
   1865            }
   1866          
   1867            // finished, either show DstAddr/EP, or nothing (depending on success or not)
   1868            if( state == EZMODE_STATE_FINISH )
   \                     ??zclSampleDoorLock_EZModeCB_2:
   \   000057   7463         MOV       A,#0x63
   \   000059   65..         XRL       A,?V0
   \   00005B   7057         JNZ       ??zclSampleDoorLock_EZModeCB_1
   1869            {
   1870              // turn off identify mode
   1871              zclSampleDoorLock_IdentifyTime = 0;
   \   00005D   90....       MOV       DPTR,#zclSampleDoorLock_IdentifyTime
   \   000060   E4           CLR       A
   \   000061   F0           MOVX      @DPTR,A
   \   000062   A3           INC       DPTR
   \   000063   F0           MOVX      @DPTR,A
   1872              zclSampleDoorLock_ProcessIdentifyTimeChange();
   \   000064                ; Setup parameters for call to function zclSampleDoorLock_ProcessIdentifyTimeChange
   \   000064   12....       LCALL     `??zclSampleDoorLock_ProcessIdentifyTimeChange::`; Banked call to: zclSampleDoorLock_ProcessIdentifyTimeChange
   1873          
   1874          #ifdef LCD_SUPPORTED
   1875              // if successful, inform user which nwkaddr/ep we bound to
   1876              pStr = NULL;
   1877              err = pData->sFinish.err;
   \   000067   8E82         MOV       DPL,R6
   \   000069   8F83         MOV       DPH,R7
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   F8           MOV       R0,A
   1878              if( err == EZMODE_ERR_SUCCESS )
   \   00006D   602E         JZ        ??zclSampleDoorLock_EZModeCB_5
   1879              {
   1880                // already stated on autoclose
   1881              }
   1882              else if ( err == EZMODE_ERR_CANCELLED )
   \   00006F   7402         MOV       A,#0x2
   \   000071   68           XRL       A,R0
   \   000072   7006         JNZ       ??zclSampleDoorLock_EZModeCB_6
   1883              {
   1884                pStr = "EZMode: Cancel";
   \   000074   7A..         MOV       R2,#`?<Constant "EZMode: Cancel">` & 0xff
   \   000076   7B..         MOV       R3,#(`?<Constant "EZMode: Cancel">` >> 8) & 0xff
   \   000078   8014         SJMP      ??zclSampleDoorLock_EZModeCB_7
   1885              }
   1886              else if ( err == EZMODE_ERR_BAD_PARAMETER )
   \                     ??zclSampleDoorLock_EZModeCB_6:
   \   00007A   7401         MOV       A,#0x1
   \   00007C   68           XRL       A,R0
   \   00007D   7006         JNZ       ??zclSampleDoorLock_EZModeCB_8
   1887              {
   1888                pStr = "EZMode: BadParm";
   \   00007F   7A..         MOV       R2,#`?<Constant "EZMode: BadParm">` & 0xff
   \   000081   7B..         MOV       R3,#(`?<Constant "EZMode: BadParm">` >> 8) & 0xff
   \   000083   8009         SJMP      ??zclSampleDoorLock_EZModeCB_7
   1889              }
   1890              else if ( err == EZMODE_ERR_TIMEDOUT )
   \                     ??zclSampleDoorLock_EZModeCB_8:
   \   000085   7403         MOV       A,#0x3
   \   000087   68           XRL       A,R0
   \   000088   7013         JNZ       ??zclSampleDoorLock_EZModeCB_5
   1891              {
   1892                pStr = "EZMode: TimeOut";
   \   00008A   7A..         MOV       R2,#`?<Constant "EZMode: TimeOut">` & 0xff
   \   00008C   7B..         MOV       R3,#(`?<Constant "EZMode: TimeOut">` >> 8) & 0xff
   1893              }
   1894              if ( pStr )
   \                     ??zclSampleDoorLock_EZModeCB_7:
   \   00008E   EA           MOV       A,R2
   \   00008F   4B           ORL       A,R3
   \   000090   600B         JZ        ??zclSampleDoorLock_EZModeCB_5
   1895              {
   1896                if ( giDoorLockScreenMode == DOORLOCK_MAINMODE )
   \   000092   90....       MOV       DPTR,#giDoorLockScreenMode
   \   000095   E0           MOVX      A,@DPTR
   \   000096   7005         JNZ       ??zclSampleDoorLock_EZModeCB_5
   1897                  HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
   \   000098                ; Setup parameters for call to function HalLcdWriteString
   \   000098   7902         MOV       R1,#0x2
   \   00009A   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   1898              }
   1899          #endif
   1900          
   1901              // show main UI screen 3 seconds after binding
   1902              osal_start_timerEx( zclSampleDoorLock_TaskID, SAMPLEDOORLOCK_MAIN_SCREEN_EVT, 3000 );
   \                     ??zclSampleDoorLock_EZModeCB_5:
   \   00009D                ; Setup parameters for call to function osal_start_timerEx
   \   00009D   90....       MOV       DPTR,#__Constant_bb8
   \   0000A0   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000A3   7A10         MOV       R2,#0x10
   \   0000A5   7B00         MOV       R3,#0x0
   \   0000A7   90....       MOV       DPTR,#zclSampleDoorLock_TaskID
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   F9           MOV       R1,A
   \   0000AC   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000AF   7404         MOV       A,#0x4
   \   0000B1   12....       LCALL     ?DEALLOC_XSTACK8
   1903            }
   1904          
   1905          }
   \                     ??zclSampleDoorLock_EZModeCB_1:
   \   0000B4   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleDoorLock_ActuatorEn`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleDoorLock_RequirePin`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleDoorLock_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for aProcessCmd>`:
   \   000000   01           DB 1
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for aiDoorLockMasterPINCode>`:
   \   000000   04           DB 4
   \   000001   31           DB 49
   \   000002   32           DB 50
   \   000003   33           DB 51
   \   000004   34           DB 52

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleDoorLock_TestEp>`:
   \   000000   14           DB 20
   \   000001   ....         DW zclSampleDoorLock_TaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleDoorLock_CmdCallbac`:
   \   000000   ....         DW `??zclSampleDoorLock_BasicResetCB::?relay`
   \   000002   ....         DW `??zclSampleDoorLock_IdentifyCB::?relay`
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   ....         DW `??zclSampleDoorLock_IdentifyQueryRspCB::?relay`
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H
   \   000012   0000         DW 0H
   \   000014   0000         DW 0H
   \   000016   0000         DW 0H
   \   000018   0000         DW 0H
   \   00001A   0000         DW 0H
   \   00001C   0000         DW 0H
   \   00001E   0000         DW 0H

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleDoorLock_DoorLockCm`:
   \   000000   ....         DW `??zclSampleDoorLock_DoorLockCB::?relay`
   \   000002   ....         DW `??zclSampleDoorLock_DoorLockRspCB::?relay`
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H
   \   000012   0000         DW 0H
   \   000014   0000         DW 0H
   \   000016   0000         DW 0H
   \   000018   0000         DW 0H
   \   00001A   0000         DW 0H
   \   00001C   0000         DW 0H
   \   00001E   0000         DW 0H
   \   000020   0000         DW 0H
   \   000022   0000         DW 0H
   \   000024   0000         DW 0H
   \   000026   0000         DW 0H
   \   000028   0000         DW 0H
   \   00002A   0000         DW 0H
   \   00002C   0000         DW 0H
   \   00002E   0000         DW 0H
   \   000030   0000         DW 0H
   \   000032   0000         DW 0H
   \   000034   0000         DW 0H
   \   000036   0000         DW 0H
   \   000038   0000         DW 0H
   \   00003A   0000         DW 0H
   \   00003C   0000         DW 0H
   \   00003E   0000         DW 0H
   \   000040   0000         DW 0H
   \   000042   0000         DW 0H
   \   000044   0000         DW 0H
   \   000046   0000         DW 0H
   \   000048   0000         DW 0H
   \   00004A   0000         DW 0H
   \   00004C   0000         DW 0H
   \   00004E   0000         DW 0H
   \   000050   0000         DW 0H
   \   000052   0000         DW 0H
   \   000054   0000         DW 0H
   \   000056   0000         DW 0H
   \   000058   0000         DW 0H
   \   00005A   0000         DW 0H
   \   00005C   0000         DW 0H
   \   00005E   0000         DW 0H
   \   000060   0000         DW 0H
   \   000062   0000         DW 0H

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleDoorLock_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleDoorLock_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleDoorLock_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleDoorLock_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleDoorLock_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleDoorLock_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleDoorLock_LcdDisplayUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleDoorLock_LcdDisplayUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleDoorLock_LcdDisplayMainMode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleDoorLock_LcdDisplayMainMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleDoorLock_LcdDisplayHelpMode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleDoorLock_LcdDisplayHelpMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleDoorLock_LcdDisplayPINMode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleDoorLock_LcdDisplayPINMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleDoorLock_ProcessAppMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleDoorLock_ProcessAppMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleDoorLock_ProcessFoundationMsg::?rela`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleDoorLock_ProcessFoundationMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleDoorLock_ProcessGroupCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleDoorLock_ProcessGroupCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleDoorLock_ProcessSceneCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleDoorLock_ProcessSceneCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleDoorLock_ProcessClosuresMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleDoorLock_ProcessClosuresMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleDoorLock_ProcessIdentifyTimeChange::`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleDoorLock_ProcessIdentifyTimeChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleDoorLock_BasicResetCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleDoorLock_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleDoorLock_IdentifyCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleDoorLock_IdentifyCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleDoorLock_IdentifyQueryRspCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleDoorLock_IdentifyQueryRspCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleDoorLock_DoorLockCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleDoorLock_DoorLockCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleDoorLock_DoorLockRspCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleDoorLock_DoorLockRspCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleDoorLock_DoorLockActuator::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleDoorLock_DoorLockActuator

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleDoorLock_EZModeCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleDoorLock_EZModeCB

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode">`:
   \   000000   455A4D6F     DB "EZMode"
   \            646500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SW5: Help      *">`:
   \   000000   5357353A     DB "SW5: Help      *"
   \            2048656C
   \            70202020
   \            2020202A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SW5: Help       ">`:
   \   000000   5357353A     DB "SW5: Help       "
   \            2048656C
   \            70202020
   \            20202020
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Enter PIN: ">`:
   \   000000   456E7465     DB "Enter PIN: "
   \            72205049
   \            4E3A2000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Enter PIN: *">`:
   \   000000   456E7465     DB "Enter PIN: *"
   \            72205049
   \            4E3A202A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Enter PIN: **">`:
   \   000000   456E7465     DB "Enter PIN: **"
   \            72205049
   \            4E3A202A
   \            2A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Enter PIN: ***">`:
   \   000000   456E7465     DB "Enter PIN: ***"
   \            72205049
   \            4E3A202A
   \            2A2A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Enter PIN: **** ">`:
   \   000000   456E7465     DB "Enter PIN: **** "
   \            72205049
   \            4E3A202A
   \            2A2A2A20
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: Success">`:
   \   000000   455A4D6F     DB "EZMode: Success"
   \            64653A20
   \            53756363
   \            65737300

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: NoMatch">`:
   \   000000   455A4D6F     DB "EZMode: NoMatch"
   \            64653A20
   \            4E6F4D61
   \            74636800

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: Cancel">`:
   \   000000   455A4D6F     DB "EZMode: Cancel"
   \            64653A20
   \            43616E63
   \            656C00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: BadParm">`:
   \   000000   455A4D6F     DB "EZMode: BadParm"
   \            64653A20
   \            42616450
   \            61726D00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EZMode: TimeOut">`:
   \   000000   455A4D6F     DB "EZMode: TimeOut"
   \            64653A20
   \            54696D65
   \            4F757400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_bb8:
   \   000000   B80B0000     DD 3000
   1906          
   1907          #endif // ZCL_EZMODE
   1908          
   1909          /****************************************************************************
   1910          ****************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     22   zclSampleDoorLock_BasicResetCB
        2      0   -> MT_SysCommandProcessing
        2      0   -> zgWriteStartupOptions
      0     24   zclSampleDoorLock_DoorLockActuator
        0      9   -> HalLcdWriteString
        0      9   -> HalLedSet
      0     18   zclSampleDoorLock_DoorLockCB
        0     15   -> HalLcdWriteString
        0     15   -> HalLedSet
        0     18   -> osal_memcmp
        0     17   -> zclClosures_SendDoorLockStatusResponse
        0     15   -> zclSampleDoorLock_DoorLockActuator
      0      0   zclSampleDoorLock_DoorLockRspCB
      0     13   zclSampleDoorLock_EZModeCB
        0      9   -> HalLcdWriteString
        0     13   -> osal_start_timerEx
        0      9   -> zclSampleDoorLock_ProcessIdentifyTimeChange
      1     42   zclSampleDoorLock_HandleKeys
        0     22   -> HalLcdWriteString
        0     22   -> HalLedSet
        0     22   -> NLME_GetShortAddr
        0     22   -> ZDP_MgmtPermitJoinReq
        0     22   -> _itoa
        0     26   -> osal_nv_write
        0     22   -> zclSampleDoorLock_BasicResetCB
        0     22   -> zclSampleDoorLock_LcdDisplayUpdate
        0     22   -> zcl_InvokeEZMode
      2      0   zclSampleDoorLock_IdentifyCB
        2      0   -> zclSampleDoorLock_ProcessIdentifyTimeChange
      2      2   zclSampleDoorLock_IdentifyQueryRspCB
        2      2   -> zcl_EZModeAction
      0     14   zclSampleDoorLock_Init
        0     10   -> HalLcdWriteString
        0     10   -> RegisterForKeys
        0     10   -> ZDO_RegisterForZDOMsg
        0     10   -> afRegister
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
        0     10   -> zclClosures_RegisterDoorLockCmdCallbacks
        0     10   -> zclGeneral_RegisterCmdCallbacks
        0     10   -> zclHA_Init
        0     10   -> zcl_RegisterEZMode
        0     10   -> zcl_registerAttrList
        0     10   -> zcl_registerForMsg
      2      0   zclSampleDoorLock_LcdDisplayHelpMode
        2      0   -> HalLcdWriteString
      0     46   zclSampleDoorLock_LcdDisplayMainMode
        0     27   -> HalLcdWriteString
        0     30   -> osal_memcpy
        0     27   -> zclHA_LcdStatusLine1
      0     30   zclSampleDoorLock_LcdDisplayPINMode
        0     27   -> HalLcdWriteString
        0     29   -> _ltoa
        0     30   -> osal_memcpy
      2     22   zclSampleDoorLock_LcdDisplayUpdate
        2      0   -> zclSampleDoorLock_LcdDisplayHelpMode
        2      0   -> zclSampleDoorLock_LcdDisplayMainMode
        2      0   -> zclSampleDoorLock_LcdDisplayPINMode
      1     66   zclSampleDoorLock_ProcessAppMsg
        0     39   -> zclParseHdr
        0     44   -> zclSampleDoorLock_ProcessClosuresMsg
        0     43   -> zclSampleDoorLock_ProcessFoundationMsg
        0     44   -> zclSampleDoorLock_ProcessGroupCmd
        0     44   -> zclSampleDoorLock_ProcessSceneCmd
        0     50   -> zcl_SendCommand
      1     74   zclSampleDoorLock_ProcessClosuresMsg
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> zclClosures_SendDoorLockRequest
        0     21   -> zclClosures_SendDoorLockStatusResponse
        0     30   -> zcl_SendCommand
      0     72   zclSampleDoorLock_ProcessFoundationMsg
        0     18   -> osal_mem_free
        0     18   -> zclParseInConfigReportCmd
        0     18   -> zclParseInReadCmd
        0     18   -> zclParseInReadReportCfgCmd
        0     18   -> zclParseInReportCmd
        0     18   -> zclParseInWriteCmd
        0     29   -> zcl_SendCommand
        0     23   -> zcl_SendConfigReportCmd
        0     23   -> zcl_SendRead
        0     23   -> zcl_SendReadReportCfgCmd
        0     23   -> zcl_SendReportCmd
        0     24   -> zcl_SendWriteRequest
      0     72   zclSampleDoorLock_ProcessGroupCmd
        0     22   -> zclGeneral_SendAddGroupRequest
        0     24   -> zclGeneral_SendGroupGetMembershipRequest
        0     20   -> zclGeneral_SendGroupRequest
        0     28   -> zcl_SendCommand
      2     20   zclSampleDoorLock_ProcessIdentifyTimeChange
        2      0   -> HalLedBlink
        2      0   -> HalLedSet
        2      4   -> osal_start_timerEx
        2      0   -> osal_stop_timerEx
      1    132   zclSampleDoorLock_ProcessSceneCmd
        0     80   -> osal_memcpy
        0     77   -> osal_memset
        0     80   -> zclGeneral_SendAddSceneRequest
        0     81   -> zclGeneral_SendSceneRequest
        0     88   -> zcl_SendCommand
      0     16   zclSampleDoorLock_event_loop
        0     16   -> ZDO_ParseEPListRsp
        0     16   -> osal_mem_free
        0     16   -> osal_msg_deallocate
        0     16   -> osal_msg_receive
        0     16   -> zclSampleDoorLock_HandleKeys
        0     16   -> zclSampleDoorLock_LcdDisplayMainMode
        0     16   -> zclSampleDoorLock_ProcessAppMsg
        0     16   -> zclSampleDoorLock_ProcessIdentifyTimeChange
        0     16   -> zcl_EZModeAction


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?<Constant "EZMode">
      16  ?<Constant "EZMode: BadParm">
      15  ?<Constant "EZMode: Cancel">
      16  ?<Constant "EZMode: NoMatch">
      16  ?<Constant "EZMode: Success">
      16  ?<Constant "EZMode: TimeOut">
      12  ?<Constant "Enter PIN: ">
      13  ?<Constant "Enter PIN: *">
      14  ?<Constant "Enter PIN: **">
      15  ?<Constant "Enter PIN: ***">
      17  ?<Constant "Enter PIN: **** ">
      17  ?<Constant "SW5: Help       ">
      17  ?<Constant "SW5: Help      *">
       4  ?<Initializer for aProcessCmd>
       5  ?<Initializer for aiDoorLockMasterPINCode>
       6  ?<Initializer for sampleDoorLock_TestEp>
       1  ?<Initializer for zclSampleDoorLock_ActuatorEn
      32  ?<Initializer for zclSampleDoorLock_CmdCallbac
     100  ?<Initializer for zclSampleDoorLock_DoorLockCm
       1  ?<Initializer for zclSampleDoorLock_NwkState>
       1  ?<Initializer for zclSampleDoorLock_RequirePin
       6  ??Subroutine25_0
       7  ??Subroutine26_0
       7  ??Subroutine27_0
       6  ??Subroutine28_0
      15  ??Subroutine29_0
       6  ??Subroutine30_0
       7  ?Subroutine0
      13  ?Subroutine1
       6  ?Subroutine10
      24  ?Subroutine11
      12  ?Subroutine12
      16  ?Subroutine13
       3  ?Subroutine14
      15  ?Subroutine15
      14  ?Subroutine16
       4  ?Subroutine17
       6  ?Subroutine18
       7  ?Subroutine19
       5  ?Subroutine2
       5  ?Subroutine20
      11  ?Subroutine21
       6  ?Subroutine22
       6  ?Subroutine23
       6  ?Subroutine24
       5  ?Subroutine3
      13  ?Subroutine4
      16  ?Subroutine5
       4  ?Subroutine6
       8  ?Subroutine7
      30  ?Subroutine8
      14  ?Subroutine9
       4  __Constant_3e8
       4  __Constant_bb8
       4  aProcessCmd
       5  aiDoorLockMasterPINCode
       1  gPermitDuration
       1  giDoorLockPINColumnCount
       1  giDoorLockPINCount
       1  giDoorLockScreenMode
       1  iToggleBuff
       2  sClearLine
      13  sDeviceName
      14  sDoorLocked
      16  sDoorUnlocked
      14  sInvalidPIN
       6  sPINLine2
      17  sPINLine3
      13  sStorePIN
      17  sSwDoorLock
      13  sSwEZMode
      10  sSwHelp
      16  sSwPIN
       6  sampleDoorLock_TestEp
       1  zclSampleDoorLockSeqNum
       1  zclSampleDoorLock_ActuatorEnabled
      18  zclSampleDoorLock_BasicResetCB
       6  zclSampleDoorLock_BasicResetCB::?relay
      32  zclSampleDoorLock_CmdCallbacks
     110  zclSampleDoorLock_DoorLockActuator
       6  zclSampleDoorLock_DoorLockActuator::?relay
     335  zclSampleDoorLock_DoorLockCB
       6  zclSampleDoorLock_DoorLockCB::?relay
     100  zclSampleDoorLock_DoorLockCmdCallbacks
       5  zclSampleDoorLock_DoorLockRspCB
       6  zclSampleDoorLock_DoorLockRspCB::?relay
      12  zclSampleDoorLock_DstAddr
     183  zclSampleDoorLock_EZModeCB
       6  zclSampleDoorLock_EZModeCB::?relay
     530  zclSampleDoorLock_HandleKeys
       6  zclSampleDoorLock_HandleKeys::?relay
      26  zclSampleDoorLock_IdentifyCB
       6  zclSampleDoorLock_IdentifyCB::?relay
      24  zclSampleDoorLock_IdentifyQueryRspCB
       6  zclSampleDoorLock_IdentifyQueryRspCB::?relay
     175  zclSampleDoorLock_Init
       6  zclSampleDoorLock_Init::?relay
      34  zclSampleDoorLock_LcdDisplayHelpMode
       6  zclSampleDoorLock_LcdDisplayHelpMode::?relay
     113  zclSampleDoorLock_LcdDisplayMainMode
       6  zclSampleDoorLock_LcdDisplayMainMode::?relay
     233  zclSampleDoorLock_LcdDisplayPINMode
       6  zclSampleDoorLock_LcdDisplayPINMode::?relay
      33  zclSampleDoorLock_LcdDisplayUpdate
       6  zclSampleDoorLock_LcdDisplayUpdate::?relay
       1  zclSampleDoorLock_LockState
       1  zclSampleDoorLock_LockType
       1  zclSampleDoorLock_NwkState
       1  zclSampleDoorLock_OnOff
     640  zclSampleDoorLock_ProcessAppMsg
       6  zclSampleDoorLock_ProcessAppMsg::?relay
     348  zclSampleDoorLock_ProcessClosuresMsg
       6  zclSampleDoorLock_ProcessClosuresMsg::?relay
     599  zclSampleDoorLock_ProcessFoundationMsg
       6  zclSampleDoorLock_ProcessFoundationMsg::?relay
     471  zclSampleDoorLock_ProcessGroupCmd
       6  zclSampleDoorLock_ProcessGroupCmd::?relay
      78  zclSampleDoorLock_ProcessIdentifyTimeChange
       6  zclSampleDoorLock_ProcessIdentifyTimeChange::?relay
     602  zclSampleDoorLock_ProcessSceneCmd
       6  zclSampleDoorLock_ProcessSceneCmd::?relay
      10  zclSampleDoorLock_RegisterEZModeData
       1  zclSampleDoorLock_RequirePinForRfOperation
       1  zclSampleDoorLock_SendPinOta
       1  zclSampleDoorLock_TaskID
     355  zclSampleDoorLock_event_loop
       6  zclSampleDoorLock_event_loop::?relay

 
 5 215 bytes in segment BANKED_CODE
   120 bytes in segment BANK_RELAYS
   150 bytes in segment XDATA_I
   150 bytes in segment XDATA_ID
   360 bytes in segment XDATA_ROM_C
    23 bytes in segment XDATA_Z
 
   270 bytes of CODE     memory
   352 bytes of CONST    memory (+ 8 bytes shared)
 5 215 bytes of HUGECODE memory
   173 bytes of XDATA    memory

Errors: none
Warnings: none
